{"version":3,"file":"core-sdk.cjs.production.min.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Rails.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/entities/Native/Boba.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/router.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  SEPOLIA = 11155111,\r\n  RAIL = 6278,\r\n  BIT = 2383187,\r\n  RAIL_TESTNET = 24116,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  MOONBEAM = 1284,\r\n  OPTIMISM = 10,\r\n  KAVA = 2222,\r\n  METIS = 1088,\r\n  ARBITRUM_NOVA = 42170,\r\n  BOBA_AVAX = 43288,\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  RAIL = 'rails-testnet',\r\n  RAIL_TESTNET = 'rails',\r\n  ETHEREUM = 'ethereum',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  MOONBEAM = 'moonbeam',\r\n  OPTIMISM = 'optimism',\r\n  KAVA = 'kava',\r\n  METIS = 'metis',\r\n  ARBITRUM_NOVA = 'arbitrum-nova',\r\n  BOBA_AVAX = 'boba-avax',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\r\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\r\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: '',\r\n  [ChainId.PALM]: '',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\r\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\r\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\r\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\r\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\r\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\r\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\r\n}\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\r\n  [ChainId.SEPOLIA]: '0xf08A50178dfcDe18524640EA6618a1f965821715',\r\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\r\n  [ChainId.RAIL]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n  [ChainId.RAIL_TESTNET]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\r\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\r\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\r\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\r\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\r\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\r\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\r\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\r\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\r\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\r\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\r\n  [ChainId.KAVA]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.METIS]: '0xEA32A96608495e54156Ae48931A7c20f0dcc1a21',\r\n  [ChainId.ARBITRUM_NOVA]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n}\r\n\r\nexport const USD_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n  [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\r\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\r\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\r\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\r\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\r\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\r\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\r\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\r\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\r\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\r\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\r\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\r\n  [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.KAVA]: USDC_ADDRESS[ChainId.KAVA],\r\n  [ChainId.METIS]: USDC_ADDRESS[ChainId.METIS],\r\n  [ChainId.ARBITRUM_NOVA]: USDC_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n}\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.SEPOLIA]: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\r\n  [ChainId.BIT]: '0xdb65A76d1baeefa0c3a3f40cD3a6299a4291dAD6',\r\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RAIL]: '0x0000000000000000000000000000000000627800',\r\n  [ChainId.RAIL_TESTNET]: '0x0000000000000000000000000000000000627800',\r\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\r\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\r\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\r\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\r\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\r\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\r\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\r\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\r\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\r\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\r\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\r\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\r\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\r\n  [ChainId.KAVA]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.METIS]: '0x420000000000000000000000000000000000000A',\r\n  [ChainId.ARBITRUM_NOVA]: '0x722E8BdD2ce80A4422E880164f2079488e115365',\r\n}\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\r\n  [ChainId.BIT]: WETH9_ADDRESS[ChainId.BIT],\r\n  [ChainId.SEPOLIA]: WETH9_ADDRESS[ChainId.SEPOLIA],\r\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\r\n  [ChainId.RAIL]: WETH9_ADDRESS[ChainId.RAIL],\r\n  [ChainId.RAIL_TESTNET]: WETH9_ADDRESS[ChainId.RAIL_TESTNET],\r\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\r\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\r\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\r\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\r\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\r\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\r\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\r\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\r\n  [ChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\r\n  [ChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\r\n  [ChainId.ARBITRUM_NOVA]: WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n  [ChainId.BOBA_AVAX]: '0x26c319B7B2cF823365414d082698C8ac90cbBA63',\r\n}\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\r\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\r\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\r\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\r\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\r\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\r\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\r\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.KAVA]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\r\n  [ChainId.METIS]: '0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0',\r\n  [ChainId.ARBITRUM_NOVA]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n}\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\r\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\r\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\r\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\r\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\r\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\r\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\r\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\r\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\r\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\r\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\r\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\r\n  [ChainId.KAVA]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.METIS]: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\r\n  [ChainId.ARBITRUM_NOVA]: '0xeD9d63a96c27f87B07115b56b2e3572827f21646',\r\n}\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\r\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\r\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\r\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\r\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\r\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\r\n}\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\r\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\r\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\r\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\r\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\r\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\r\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\r\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\r\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\r\n}\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.SEPOLIA]: '0x7E0987E5b3a30e3f2828572Bb659A548460a3003',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BIT]: '0x91A3AFd5eE1746932E54c3f2C3b18364753A4489',\r\n  [ChainId.RAIL_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RAIL]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\r\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_NOVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BOBA_AVAX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n}\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.SEPOLIA]: '0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008',\r\n  [ChainId.BIT]: '0xE14ae12D83f7436a49DB537C31C2DAbe7eb4A19C',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.RAIL_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.RAIL]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\r\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_NOVA]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BOBA_AVAX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n}\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n}\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\r\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\r\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\r\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\r\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KAVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.METIS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n}\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\r\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n}\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\r\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\r\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\r\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\r\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\r\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\r\n}\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\r\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\r\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n}\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\r\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\r\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\r\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\r\n  [ChainId.KAVA]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.METIS]: '0x1334c8e873E1cae8467156e2A81d1C8b566B2da1',\r\n}\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n}\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n}\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\r\n}\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.BIT]: '0xB3558E5780d3cDc4EEb9C80bcc1EFaca21b70357',\r\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\r\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\r\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\r\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\r\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n}\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\r\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\r\n}\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  // [ChainId.ROPSTEN]: '',\r\n  // [ChainId.RINKEBY]: '',\r\n  // [ChainId.GÖRLI]: '',\r\n  // [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\r\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\r\n  // [ChainId.HECO]: '',\r\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\r\n  // [ChainId.OKEX]: '',\r\n  // [ChainId.OKEX_TESTNET]: '',\r\n  // [ChainId.PALM]: '',\r\n  // [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\r\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\r\n}\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\r\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\r\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\r\n  [ChainId.KOVAN]: ChainKey.KOVAN,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.FANTOM]: ChainKey.FANTOM,\r\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\r\n  [ChainId.XDAI]: ChainKey.XDAI,\r\n  [ChainId.BSC]: ChainKey.RAIL,\r\n  [ChainId.RAIL]: ChainKey.RAIL_TESTNET,\r\n  [ChainId.RAIL_TESTNET]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\r\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\r\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\r\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\r\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\r\n  [ChainId.HECO]: ChainKey.HECO,\r\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\r\n  [ChainId.HARMONY]: ChainKey.HARMONY,\r\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\r\n  [ChainId.OKEX]: ChainKey.OKEX,\r\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\r\n  [ChainId.CELO]: ChainKey.CELO,\r\n  [ChainId.PALM]: ChainKey.PALM,\r\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\r\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\r\n  [ChainId.FUSE]: ChainKey.FUSE,\r\n  [ChainId.TELOS]: ChainKey.TELOS,\r\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\r\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\r\n  [ChainId.KAVA]: ChainKey.KAVA,\r\n  [ChainId.METIS]: ChainKey.METIS,\r\n  [ChainId.ARBITRUM_NOVA]: ChainKey.ARBITRUM_NOVA,\r\n  [ChainId.BOBA_AVAX]: ChainKey.BOBA_AVAX,\r\n}\r\n","import { ChainId } from '../enums/ChainId'\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BIT]: '0x720db3cfeeee5cf23c63d34919a2b8a73e1e38f203dec83c504cb1ac68019fc3',\r\n  [ChainId.SEPOLIA]: '0x4156ccc01dad273e6c65c4335c428a2ff4a4b0c95a9a228f6bfed45a069d3fe7',\r\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RAIL]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RAIL_TESTNET]: '0x68621122d5a2d88173b4685b8a130c8edf6af1711c629d20fc360e4512b3a347',\r\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\r\n  [ChainId.TELOS]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONBEAM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ARBITRUM_NOVA]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BOBA_AVAX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types'\r\nimport { SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { Token } from '../entities/Token'\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, USDC_ADDRESS[ChainId.SEPOLIA], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.RAIL]: new Token(ChainId.RAIL, USDC_ADDRESS[ChainId.RAIL], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.RAIL_TESTNET]: new Token(ChainId.RAIL_TESTNET, USDC_ADDRESS[ChainId.RAIL_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, USDC_ADDRESS[ChainId.KAVA], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, USDC_ADDRESS[ChainId.METIS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM_NOVA]: new Token(ChainId.ARBITRUM_NOVA, USDC_ADDRESS[ChainId.ARBITRUM_NOVA], 6, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\r\n}\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, WETH9_ADDRESS[ChainId.SEPOLIA], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.BIT]: new Token(ChainId.BIT, WETH9_ADDRESS[ChainId.BIT], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.RAIL]: new Token(ChainId.RAIL, WETH9_ADDRESS[ChainId.RAIL], 18, 'WSTMX', 'Wrapped STMX'),\r\n  [ChainId.RAIL_TESTNET]: new Token(ChainId.RAIL_TESTNET, WETH9_ADDRESS[ChainId.RAIL_TESTNET], 18, 'WSTMX', 'Wrapped STMX'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WETH9_ADDRESS[ChainId.KAVA], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WETH9_ADDRESS[ChainId.METIS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_NOVA]: new Token(\r\n    ChainId.ARBITRUM_NOVA,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n}\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\r\n  [ChainId.BIT]: WETH9[ChainId.BIT],\r\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\r\n  [ChainId.SEPOLIA]: WETH9[ChainId.SEPOLIA],\r\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\r\n  [ChainId.RAIL_TESTNET]: WETH9[ChainId.RAIL_TESTNET],\r\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM'\r\n  ),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.RAIL]: new Token(\r\n    ChainId.RAIL,\r\n    WNATIVE_ADDRESS[ChainId.RAIL],\r\n    18,\r\n    'WSTMX',\r\n    'Wrapped STMX'\r\n  ),\r\n\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  ),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\r\n  [ChainId.MOONRIVER]: new Token(\r\n    ChainId.MOONRIVER,\r\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\r\n    18,\r\n    'WMOVR',\r\n    'Wrapped Moonriver'\r\n  ),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WNATIVE_ADDRESS[ChainId.KAVA], 18, 'WKAVA', 'Wrapped Kava'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WNATIVE_ADDRESS[ChainId.METIS], 18, 'WMETIS', 'Wrapped Metis'),\r\n  [ChainId.ARBITRUM_NOVA]: WETH9[ChainId.ARBITRUM_NOVA],\r\n  [ChainId.BOBA_AVAX]: new Token(ChainId.BOBA_AVAX, WNATIVE_ADDRESS[ChainId.BOBA_AVAX], 18, 'WBOBA', 'Wrapped Boba'),\r\n}\r\n\r\nexport const SUSHI: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\r\n  // [ChainId.SEPOLIA]: new Token(ChainId.SEPOLIA, SUSHI_ADDRESS[ChainId.SEPOLIA], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, SUSHI_ADDRESS[ChainId.KAVA], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, SUSHI_ADDRESS[ChainId.METIS], 18, 'SUSHI', 'SushiToken'),\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Rails extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'STMX', 'STMX')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wrails = WNATIVE[this.chainId]\r\n    invariant(!!wrails, 'WRAPPED')\r\n    return wrails\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Rails } = {}\r\n\r\n  public static onChain(chainId: number): Rails {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Rails(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Glmr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glmr } = {}\r\n\r\n  public static onChain(chainId: number): Glmr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Kava extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'KAVA', 'Kava')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Kava } = {}\r\n\r\n  public static onChain(chainId: number): Kava {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Metis extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'METIS', 'Metis')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Metis } = {}\r\n\r\n  public static onChain(chainId: number): Metis {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Boba extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BOBA', 'Boba')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Boba } = {}\r\n\r\n  public static onChain(chainId: number): Boba {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Boba(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","// import { Rails } from 'src/entities/Native/Rails'\r\nimport {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Glmr,\r\n  Harmony,\r\n  Heco,\r\n  Kava,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Rails,\r\n  Palm,\r\n  Telos,\r\n  xDai,\r\n  Metis,\r\n  Boba,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\r\n  [ChainId.BIT]: Ether.onChain(ChainId.BIT),\r\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\r\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\r\n  [ChainId.SEPOLIA]: Ether.onChain(ChainId.SEPOLIA),\r\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\r\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\r\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\r\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\r\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\r\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\r\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\r\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\r\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\r\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\r\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\r\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\r\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\r\n  [ChainId.RAIL]: Rails.onChain(ChainId.RAIL),\r\n  [ChainId.RAIL_TESTNET]: Rails.onChain(ChainId.RAIL_TESTNET),\r\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\r\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\r\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\r\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\r\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\r\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\r\n  [ChainId.KAVA]: Kava.onChain(ChainId.KAVA),\r\n  [ChainId.METIS]: Metis.onChain(ChainId.METIS),\r\n  [ChainId.ARBITRUM_NOVA]: Ether.onChain(ChainId.ARBITRUM_NOVA),\r\n  [ChainId.BOBA_AVAX]: Boba.onChain(ChainId.BOBA_AVAX),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big, { roundDown,roundHalfUp,roundHalfEven,roundUp } from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  [Rounding.ROUND_DOWN]: 0,\r\n  [Rounding.ROUND_HALF_UP]: 1,\r\n  [Rounding.ROUND_UP]: 3,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport { computePairAddress } from '../functions/computePairAddress'\r\nimport invariant from 'tiny-invariant'\r\nimport { sqrt } from '../functions/math'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\r\n      })\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","_SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","KAVA","METIS","USDC_ADDRESS","_USDC_ADDRESS","SEPOLIA","MATIC_TESTNET","RAIL","RAIL_TESTNET","OPTIMISM","ARBITRUM_NOVA","USD_ADDRESS","_USD_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","BIT","ARBITRUM_TESTNET","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","FANTOM_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","BOBA_AVAX","DAI_ADDRESS","_DAI_ADDRESS","USDT_ADDRESS","_USDT_ADDRESS","MIM_ADDRESS","_MIM_ADDRESS","FRAX_ADDRESS","_FRAX_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","ROUTER_ADDRESS","_ROUTER_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","_BALANCE_FETCHER_ADDR","MULTISIG_ADDRESS","_MULTISIG_ADDRESS","CHAIN_KEY","_CHAIN_KEY","INIT_CODE_HASH","_INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","invariant","isInteger","this","NativeCurrency","_AbstractCurrency","_this","_inheritsLoose","validateAndParseAddress","address","getAddress","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","USDC","_USDC","USD","_extends","_extends2","WETH9","_WETH","WNATIVE","_WNATIVE","SUSHI","_SUSHI","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Rails","wrails","Palm","Fuse","Telos","Glmr","Kava","Metis","Boba","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","token1","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","_step","path","_iterator","_createForOfIteratorHelperLoose","entries","done","_step$value","currentInput","push","_midPrice","_step2","prices","_iterator2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","a","b","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","i","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","getSigner","library","account","connectUnchecked","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","to","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","currencyA","currencyB","highest","undefined","GT","lowest","LT","from","total","base","roundUp","elastic","solidityType"],"mappings":"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"}