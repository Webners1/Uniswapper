{"version":3,"file":"core-sdk.esm.js","sources":["../src/enums/ChainId.ts","../src/enums/ChainKey.ts","../src/enums/Rounding.ts","../src/enums/SolidityType.ts","../src/enums/TradeType.ts","../src/enums/TradeVersion.ts","../src/constants/addresses.ts","../src/constants/chain.ts","../src/constants/legacy.ts","../src/entities/AbstractCurrency.ts","../src/entities/NativeCurrency.ts","../src/functions/validateAndParseAddress.ts","../src/entities/Token.ts","../src/constants/tokens.ts","../src/entities/Native/Avalanche.ts","../src/entities/Native/Binance.ts","../src/entities/Native/Celo.ts","../src/entities/Native/Ether.ts","../src/entities/Native/Fantom.ts","../src/entities/Native/Harmony.ts","../src/entities/Native/Heco.ts","../src/entities/Native/Matic.ts","../src/entities/Native/Movr.ts","../src/entities/Native/Okex.ts","../src/entities/Native/xDai.ts","../src/entities/Native/Rails.ts","../src/entities/Native/Palm.ts","../src/entities/Native/Fuse.ts","../src/entities/Native/Telos.ts","../src/entities/Native/Glmr.ts","../src/entities/Native/Kava.ts","../src/entities/Native/Metis.ts","../src/entities/Native/Boba.ts","../src/constants/natives.ts","../src/constants/numbers.ts","../src/constants/solidity.ts","../src/errors.ts","../src/entities/Fraction.ts","../src/entities/CurrencyAmount.ts","../src/entities/Price.ts","../src/functions/computePairAddress.ts","../src/functions/math.ts","../src/entities/Pair.ts","../src/entities/Percent.ts","../src/entities/Route.ts","../src/functions/computePriceImpact.ts","../src/functions/sortedInsert.ts","../src/entities/Trade.ts","../src/functions/contract.ts","../src/functions/rebase.ts","../src/functions/validateSolidityTypeInstance.ts","../src/router.ts"],"sourcesContent":["export enum ChainId {\r\n  ETHEREUM = 1,\r\n  SEPOLIA = 11155111,\r\n  RAIL = 6278,\r\n  RAIL_TESTNET = 24116,\r\n  ROPSTEN = 3,\r\n  RINKEBY = 4,\r\n  GÖRLI = 5,\r\n  KOVAN = 42,\r\n  MATIC = 137,\r\n  MATIC_TESTNET = 80001,\r\n  FANTOM = 250,\r\n  FANTOM_TESTNET = 4002,\r\n  XDAI = 100,\r\n  BSC = 56,\r\n  BSC_TESTNET = 97,\r\n  ARBITRUM = 42161,\r\n  ARBITRUM_TESTNET = 79377087078960,\r\n  MOONBEAM_TESTNET = 1287,\r\n  AVALANCHE = 43114,\r\n  AVALANCHE_TESTNET = 43113,\r\n  HECO = 128,\r\n  HECO_TESTNET = 256,\r\n  HARMONY = 1666600000,\r\n  HARMONY_TESTNET = 1666700000,\r\n  OKEX = 66,\r\n  OKEX_TESTNET = 65,\r\n  CELO = 42220,\r\n  PALM = 11297108109,\r\n  PALM_TESTNET = 11297108099,\r\n  MOONRIVER = 1285,\r\n  FUSE = 122,\r\n  TELOS = 40,\r\n  HARDHAT = 31337,\r\n  MOONBEAM = 1284,\r\n  OPTIMISM = 10,\r\n  KAVA = 2222,\r\n  METIS = 1088,\r\n  ARBITRUM_NOVA = 42170,\r\n  BOBA_AVAX = 43288,\r\n}\r\n","export enum ChainKey {\r\n  ARBITRUM = 'arbitrum',\r\n  ARBITRUM_TESTNET = 'arbitrum-testnet',\r\n  AVALANCHE = 'avalanche',\r\n  AVALANCHE_TESTNET = 'avalance-testnet',\r\n  BSC = 'bsc',\r\n  BSC_TESTNET = 'bsc-testnet',\r\n  CELO = 'celo',\r\n  RAIL = 'rails-testnet',\r\n  RAIL_TESTNET = 'rails',\r\n  ETHEREUM = 'ethereum',\r\n  FANTOM = 'fantom',\r\n  FANTOM_TESTNET = 'fantom-testnet',\r\n  FUSE = 'fuse',\r\n  GÖRLI = 'goerli',\r\n  HARMONY = 'harmony',\r\n  HARMONY_TESTNET = 'harmony-testnet',\r\n  HECO = 'heco',\r\n  HECO_TESTNET = 'heco-testnet',\r\n  KOVAN = 'kovan',\r\n  ROPSTEN = 'ropsten',\r\n  MATIC = 'polygon',\r\n  MATIC_TESTNET = 'matic-testnet',\r\n  MOONBEAM_TESTNET = 'moonbeam-testnet',\r\n  MOONRIVER = 'moonriver',\r\n  OKEX = 'okex',\r\n  OKEX_TESTNET = 'okex-testnet',\r\n  PALM = 'palm',\r\n  PALM_TESTNET = 'palm-testnet',\r\n  RINKEBY = 'rinkeby',\r\n  TELOS = 'telos',\r\n  XDAI = 'xdai',\r\n  MOONBEAM = 'moonbeam',\r\n  OPTIMISM = 'optimism',\r\n  KAVA = 'kava',\r\n  METIS = 'metis',\r\n  ARBITRUM_NOVA = 'arbitrum-nova',\r\n  BOBA_AVAX = 'boba-avax',\r\n}\r\n","export enum Rounding {\r\n  ROUND_DOWN = 0,\r\n  ROUND_HALF_UP = 1,\r\n  ROUND_UP = 3,\r\n}\r\n","export enum SolidityType {\r\n    uint8 = 'uint8',\r\n    uint256 = 'uint256',\r\n}","export enum TradeType {\r\n  EXACT_INPUT,\r\n  EXACT_OUTPUT,\r\n}\r\n","export enum TradeVersion {\r\n  V2TRADE,\r\n  V3TRADE,\r\n}\r\n","import { AddressMap } from '../types'\r\nimport { ChainId } from '../enums'\r\n\r\nexport const SUSHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B3595068778DD592e39A122f4f5a5cF09C90fE2',\r\n  [ChainId.ROPSTEN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.RINKEBY]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.GÖRLI]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.KOVAN]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.FANTOM]: '0xae75A438b2E0cB8Bb01Ec1E1e376De11D44477CC',\r\n  [ChainId.MATIC]: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\r\n  [ChainId.XDAI]: '0x2995D1317DcD4f0aB89f4AE60F3f020A4F17C7CE',\r\n  [ChainId.BSC]: '0x947950BcC74888a40Ffa2593C5798F11Fc9124C4',\r\n  [ChainId.ARBITRUM]: '0xd4d42F0b6DEF4CE0383636770eF773390d85c61A',\r\n  [ChainId.AVALANCHE]: '0x37B608519F91f70F2EeB0e5Ed9AF4061722e4F76',\r\n  [ChainId.HECO]: '0x52E00B2dA5Bd7940fFe26B609A42F957f31118D5',\r\n  [ChainId.HARMONY]: '0xBEC775Cb42AbFa4288dE81F387a9b1A3c4Bc552A',\r\n  [ChainId.OKEX]: '0x2218E0D5E0173769F5b4939a3aE423f7e5E4EAB7',\r\n  [ChainId.OKEX_TESTNET]: '',\r\n  [ChainId.PALM]: '',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xf390830DF829cf22c53c8840554B98eafC5dCBc2',\r\n  [ChainId.CELO]: '0x29dFce9c22003A4999930382Fd00f9Fd6133Acd1',\r\n  [ChainId.TELOS]: '0x922D641a426DcFFaeF11680e5358F34d97d112E1',\r\n  [ChainId.FUSE]: '0x90708b20ccC1eb95a4FA7C8b18Fd2C22a0Ff9E78',\r\n  [ChainId.MOONBEAM]: '0x2C78f1b70Ccf63CDEe49F9233e9fAa99D43AA07e',\r\n  [ChainId.KAVA]: '0x7C598c96D02398d89FbCb9d41Eab3DF0C16F227D',\r\n  [ChainId.METIS]: '0x17Ee7E4dA37B01FC1bcc908fA63DF343F23B4B7C',\r\n}\r\n\r\nexport const USDC_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n  [ChainId.ROPSTEN]: '0x0D9C8723B343A8368BebE0B5E89273fF8D712e3C',\r\n  [ChainId.SEPOLIA]: '0xCDFfcdf0DFbD3C044b6236C2c63b69b9D5E0B82A',\r\n  [ChainId.KOVAN]: '0xb7a4F3E9097C08dA09517b5aB877F7a917224ede',\r\n  [ChainId.MATIC]: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\r\n  [ChainId.MATIC_TESTNET]: '0x742DfA5Aa70a8212857966D491D67B09Ce7D6ec7',\r\n  [ChainId.RAIL]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n  [ChainId.RAIL_TESTNET]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n  [ChainId.FANTOM]: '0x04068DA6C83AFCFA0e13ba15A6696662335D5B75',\r\n  [ChainId.BSC]: '0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d',\r\n  [ChainId.HARMONY]: '0x985458E523dB3d53125813eD68c274899e9DfAb4',\r\n  [ChainId.HECO]: '0x9362Bbef4B8313A8Aa9f0c9808B80577Aa26B73B',\r\n  [ChainId.OKEX]: '0xc946DAf81b08146B1C7A8Da2A851Ddf2B3EAaf85',\r\n  [ChainId.XDAI]: '0xDDAfbb505ad214D7b80b1f830fcCc89B60fb7A83',\r\n  [ChainId.ARBITRUM]: '0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8',\r\n  [ChainId.AVALANCHE]: '0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664',\r\n  [ChainId.MOONRIVER]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.CELO]: '0xef4229c8c3250C675F21BCefa42f58EfbfF6002a',\r\n  [ChainId.TELOS]: '0x818ec0A7Fe18Ff94269904fCED6AE3DaE6d6dC0b',\r\n  [ChainId.FUSE]: '0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5',\r\n  [ChainId.MOONBEAM]: '0x8f552a71EFE5eeFc207Bf75485b356A0b3f01eC9',\r\n  [ChainId.OPTIMISM]: '0x7F5c764cBc14f9669B88837ca1490cCa17c31607',\r\n  [ChainId.KAVA]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.METIS]: '0xEA32A96608495e54156Ae48931A7c20f0dcc1a21',\r\n  [ChainId.ARBITRUM_NOVA]: '0x750ba8b76187092B0D1E87E28daaf484d1b5273b',\r\n}\r\n\r\nexport const USD_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: USDC_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: USDC_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.KOVAN]: USDC_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.MATIC]: USDC_ADDRESS[ChainId.MATIC],\r\n  [ChainId.MATIC_TESTNET]: USDC_ADDRESS[ChainId.MATIC_TESTNET],\r\n  [ChainId.FANTOM]: USDC_ADDRESS[ChainId.FANTOM],\r\n  [ChainId.BSC]: USDC_ADDRESS[ChainId.BSC],\r\n  [ChainId.HARMONY]: USDC_ADDRESS[ChainId.HARMONY],\r\n  [ChainId.HECO]: USDC_ADDRESS[ChainId.HECO],\r\n  [ChainId.OKEX]: USDC_ADDRESS[ChainId.OKEX],\r\n  [ChainId.XDAI]: USDC_ADDRESS[ChainId.XDAI],\r\n  [ChainId.ARBITRUM]: USDC_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.AVALANCHE]: USDC_ADDRESS[ChainId.AVALANCHE],\r\n  [ChainId.MOONRIVER]: USDC_ADDRESS[ChainId.MOONRIVER],\r\n  [ChainId.CELO]: '0x765DE816845861e75A25fCA122bb6898B8B1282a',\r\n  [ChainId.TELOS]: USDC_ADDRESS[ChainId.TELOS],\r\n  [ChainId.FUSE]: USDC_ADDRESS[ChainId.FUSE],\r\n  [ChainId.MOONBEAM]: USDC_ADDRESS[ChainId.MOONBEAM],\r\n  [ChainId.OPTIMISM]: USDC_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.KAVA]: USDC_ADDRESS[ChainId.KAVA],\r\n  [ChainId.METIS]: USDC_ADDRESS[ChainId.METIS],\r\n  [ChainId.ARBITRUM_NOVA]: USDC_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n}\r\n\r\nexport const WETH9_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\r\n  [ChainId.SEPOLIA]: '0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9',\r\n  [ChainId.ROPSTEN]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RINKEBY]: '0xc778417E063141139Fce010982780140Aa0cD5Ab',\r\n  [ChainId.RAIL]: '0x0000000000000000000000000000000000627800',\r\n  [ChainId.RAIL_TESTNET]: '0x0000000000000000000000000000000000627800',\r\n  [ChainId.GÖRLI]: '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6',\r\n  [ChainId.KOVAN]: '0xd0A1E359811322d97991E03f863a0C30C2cF029C',\r\n  [ChainId.ARBITRUM]: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\r\n  [ChainId.BSC]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.FANTOM]: '0x74b23882a30290451A17c44f4F05243b6b58C76d',\r\n  [ChainId.MATIC]: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\r\n  [ChainId.MATIC_TESTNET]: '0x714550C2C1Ea08688607D86ed8EeF4f5E4F22323',\r\n  [ChainId.OKEX]: '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\r\n  [ChainId.HECO]: '0x64FF637fB478863B7468bc97D30a5bF3A428a1fD',\r\n  [ChainId.HARMONY]: '0x6983D1E6DEf3690C4d616b13597A09e6193EA013',\r\n  [ChainId.XDAI]: '0x6A023CCd1ff6F2045C3309768eAd9E68F978f6e1',\r\n  [ChainId.AVALANCHE]: '0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB',\r\n  [ChainId.PALM]: '0x726138359C17F1E56bA8c4F737a7CAf724F6010b',\r\n  [ChainId.CELO]: '0x122013fd7dF1C6F636a5bb8f03108E876548b455',\r\n  [ChainId.MOONRIVER]: '0x639A647fbe20b6c8ac19E48E2de44ea792c62c5C',\r\n  [ChainId.TELOS]: '0xfA9343C3897324496A05fC75abeD6bAC29f8A40f',\r\n  [ChainId.FUSE]: '0xa722c13135930332Eb3d749B2F0906559D2C5b99',\r\n  [ChainId.MOONBEAM]: '0x30D2a9F5FDf90ACe8c17952cbb4eE48a55D916A7',\r\n  [ChainId.OPTIMISM]: '0x4200000000000000000000000000000000000006',\r\n  [ChainId.KAVA]: '0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D',\r\n  [ChainId.METIS]: '0x420000000000000000000000000000000000000A',\r\n  [ChainId.ARBITRUM_NOVA]: '0x722E8BdD2ce80A4422E880164f2079488e115365',\r\n}\r\n\r\nexport const WNATIVE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: WETH9_ADDRESS[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9_ADDRESS[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9_ADDRESS[ChainId.RINKEBY],\r\n  [ChainId.SEPOLIA]: WETH9_ADDRESS[ChainId.SEPOLIA],\r\n  [ChainId.GÖRLI]: WETH9_ADDRESS[ChainId.GÖRLI],\r\n  [ChainId.RAIL]: WETH9_ADDRESS[ChainId.RAIL],\r\n  [ChainId.RAIL_TESTNET]: WETH9_ADDRESS[ChainId.RAIL_TESTNET],\r\n  [ChainId.KOVAN]: WETH9_ADDRESS[ChainId.KOVAN],\r\n  [ChainId.OPTIMISM]: WETH9_ADDRESS[ChainId.OPTIMISM],\r\n  [ChainId.ARBITRUM]: WETH9_ADDRESS[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',\r\n  [ChainId.FANTOM_TESTNET]: '0xf1277d1Ed8AD466beddF92ef448A132661956621',\r\n  [ChainId.MATIC]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\r\n  [ChainId.MATIC_TESTNET]: '0x5B67676a984807a212b1c59eBFc9B3568a474F0a',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\r\n  [ChainId.BSC_TESTNET]: '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x372d0695E75563D9180F8CE31c9924D7e8aaac47',\r\n  [ChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F',\r\n  [ChainId.HECO_TESTNET]: '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\r\n  [ChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\r\n  [ChainId.HARMONY_TESTNET]: '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\r\n  [ChainId.OKEX]: '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\r\n  [ChainId.OKEX_TESTNET]: '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\r\n  [ChainId.PALM]: '0xF98cABF0a963452C5536330408B2590567611a71',\r\n  [ChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',\r\n  [ChainId.MOONRIVER]: '0xf50225a84382c74CbdeA10b0c176f71fc3DE0C4d',\r\n  [ChainId.FUSE]: '0x0BE9e53fd7EDaC9F859882AfdDa116645287C629',\r\n  [ChainId.TELOS]: '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E',\r\n  [ChainId.MOONBEAM]: '0xAcc15dC74880C9944775448304B263D191c6077F',\r\n  [ChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',\r\n  [ChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',\r\n  [ChainId.ARBITRUM_NOVA]: WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n  [ChainId.BOBA_AVAX]: '0x26c319B7B2cF823365414d082698C8ac90cbBA63',\r\n}\r\n\r\nexport const DAI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n  [ChainId.ROPSTEN]: '0xc2118d4d90b274016cB7a54c03EF52E6c537D957',\r\n  [ChainId.KOVAN]: '0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa',\r\n  [ChainId.MATIC]: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\r\n  [ChainId.FANTOM]: '0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E',\r\n  [ChainId.BSC]: '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',\r\n  [ChainId.HARMONY]: '0xEf977d2f931C1978Db5F6747666fa1eACB0d0339',\r\n  [ChainId.HECO]: '0x3D760a45D0887DFD89A2F5385a236B29Cb46ED2a',\r\n  [ChainId.OKEX]: '0x21cDE7E32a6CAF4742d00d44B07279e7596d26B9',\r\n  [ChainId.XDAI]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',\r\n  [ChainId.ARBITRUM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.AVALANCHE]: '0xd586E7F844cEa2F87f50152665BCbc2C279D8d70',\r\n  [ChainId.CELO]: '0x90Ca507a5D4458a4C6C6249d186b6dCb02a5BCCd',\r\n  [ChainId.MOONRIVER]: '0x80A16016cC4A2E6a2CACA8a4a498b1699fF0f844',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x94Ba7A27c7A95863d1bdC7645AC2951E0cca06bA',\r\n  [ChainId.MOONBEAM]: '0xc234A67a4F840E61adE794be47de455361b52413',\r\n  [ChainId.OPTIMISM]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n  [ChainId.KAVA]: '0x765277EebeCA2e31912C9946eAe1021199B39C61',\r\n  [ChainId.METIS]: '0x4c078361FC9BbB78DF910800A991C7c3DD2F6ce0',\r\n  [ChainId.ARBITRUM_NOVA]: '0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1',\r\n}\r\n\r\nexport const USDT_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\r\n  [ChainId.ROPSTEN]: '0x110a13FC3efE6A245B50102D2d79B3E76125Ae83',\r\n  [ChainId.KOVAN]: '0x07de306FF27a2B630B1141956844eB1552B956B5',\r\n  [ChainId.MATIC]: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\r\n  [ChainId.FANTOM]: '0x049d68029688eAbF473097a2fC38ef61633A3C7A',\r\n  [ChainId.BSC]: '0x55d398326f99059fF775485246999027B3197955',\r\n  [ChainId.HARMONY]: '0x3C2B8Be99c50593081EAA2A724F0B8285F5aba8f',\r\n  [ChainId.HECO]: '0xa71EdC38d189767582C38A3145b5873052c3e47a',\r\n  [ChainId.OKEX]: '0x382bB369d343125BfB2117af9c149795C6C65C50',\r\n  [ChainId.XDAI]: '0x4ECaBa5870353805a9F068101A40E0f32ed605C6',\r\n  [ChainId.ARBITRUM]: '0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9',\r\n  [ChainId.AVALANCHE]: '0xc7198437980c041c805A1EDcbA50c1Ce5db95118',\r\n  [ChainId.CELO]: '0x88eeC49252c8cbc039DCdB394c0c2BA2f1637EA0',\r\n  [ChainId.MOONRIVER]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.TELOS]: '0xeFAeeE334F0Fd1712f9a8cc375f427D9Cdd40d73',\r\n  [ChainId.FUSE]: '0xFaDbBF8Ce7D5b7041bE672561bbA99f79c532e10',\r\n  [ChainId.MOONBEAM]: '0x8e70cd5b4ff3f62659049e74b6649c6603a0e594',\r\n  [ChainId.OPTIMISM]: '0x94b008aA00579c1307B0EF2c499aD98a8ce58e58',\r\n  [ChainId.KAVA]: '0xB44a9B6905aF7c801311e8F4E76932ee959c663C',\r\n  [ChainId.METIS]: '0xbB06DCA3AE6887fAbF931640f67cab3e3a16F4dC',\r\n  [ChainId.ARBITRUM_NOVA]: '0xeD9d63a96c27f87B07115b56b2e3572827f21646',\r\n}\r\n\r\nexport const MIM_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x99D8a9C45b2ecA8864373A26D1459e3Dff1e17F3',\r\n  [ChainId.FANTOM]: '0x82f0B8B456c1A451378467398982d4834b6829c1',\r\n  [ChainId.BSC]: '0xfE19F0B51438fd612f6FD59C1dbB3eA319f433Ba',\r\n  [ChainId.ARBITRUM]: '0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A',\r\n  [ChainId.AVALANCHE]: '0x130966628846BFd36ff31a822705796e8cb8C18D',\r\n  [ChainId.MATIC]: '0x49a0400587A7F65072c87c4910449fDcC5c47242',\r\n  [ChainId.MOONRIVER]: '0x0caE51e1032e8461f4806e26332c030E34De3aDb',\r\n}\r\n\r\nexport const FRAX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x853d955aCEf822Db058eb8505911ED77F175b99e',\r\n  [ChainId.FANTOM]: '0xdc301622e621166BD8E82f2cA0A26c13Ad0BE355',\r\n  [ChainId.BSC]: '0x90C97F71E18723b0Cf0dfa30ee176Ab653E89F40',\r\n  [ChainId.ARBITRUM]: '0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F',\r\n  [ChainId.AVALANCHE]: '0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64',\r\n  [ChainId.MATIC]: '0x45c32fA6DF82ead1e2EF74d17b76547EDdFaFF89',\r\n  [ChainId.MOONRIVER]: '0x1A93B23281CC1CDE4C4741353F3064709A16197d',\r\n  [ChainId.MOONBEAM]: '0x322E86852e492a7Ee17f28a78c663da38FB33bfb',\r\n  [ChainId.HARMONY]: '0xFa7191D292d5633f702B0bd7E3E3BcCC0e633200',\r\n}\r\n\r\nexport const FACTORY_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac',\r\n  [ChainId.ROPSTEN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.SEPOLIA]: '0x7E0987E5b3a30e3f2828572Bb659A548460a3003',\r\n  [ChainId.RINKEBY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RAIL_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.RAIL]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.GÖRLI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KOVAN]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MATIC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.XDAI]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BSC_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0x2Ce3F07dD4c62b56a502E223A7cBE38b1d77A1b5',\r\n  [ChainId.AVALANCHE]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xd00ae08403B9bbb9124bB305C09058E32C39A48c',\r\n  [ChainId.HECO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HECO_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.HARMONY_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.OKEX_TESTNET]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.CELO]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.FUSE]: '0x43eA90e2b786728520e4f930d2A71a477BF2737C',\r\n  [ChainId.TELOS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.MOONBEAM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.ARBITRUM_NOVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.BOBA_AVAX]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n}\r\n\r\nexport const ROUTER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F',\r\n  [ChainId.RINKEBY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.SEPOLIA]: '0xC532a74256D3Db42D0Bf7a0400fEFDbad7694008',\r\n  [ChainId.ROPSTEN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.GÖRLI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.RAIL_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.RAIL]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.KOVAN]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FANTOM_TESTNET]: '',\r\n  [ChainId.MATIC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MATIC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.XDAI]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BSC_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_TESTNET]: '',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xeB5c2BB5E83B51d83F3534Ae21E84336B8B376ef',\r\n  [ChainId.AVALANCHE]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.AVALANCHE_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HECO_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.HARMONY_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.OKEX_TESTNET]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.CELO]: '0x1421bDe4B10e8dd459b3BCb598810B1337D56842',\r\n  [ChainId.PALM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.FUSE]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.TELOS]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.MOONBEAM]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.ARBITRUM_NOVA]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n  [ChainId.BOBA_AVAX]: '0x1b02dA8Cb0d097eB8D57A175b88c7D8b47997506',\r\n}\r\n\r\nexport const MASTERCHEF_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\r\n  [ChainId.ROPSTEN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.RINKEBY]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.GÖRLI]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.KOVAN]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n}\r\n\r\nexport const BAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272',\r\n  [ChainId.ROPSTEN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.RINKEBY]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.GÖRLI]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n  [ChainId.KOVAN]: '0x1be211D8DA40BC0ae8719c6663307Bfc987b1d6c',\r\n}\r\n\r\nexport const MAKER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xE11fc0B43ab98Eb91e9836129d1ee7c3Bc95df50',\r\n  [ChainId.ROPSTEN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.RINKEBY]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.GÖRLI]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n  [ChainId.KOVAN]: '0x1b9d177CcdeA3c79B6c8F40761fc8Dc9d0500EAa',\r\n}\r\n\r\nexport const TIMELOCK_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x9a8541Ddf3a932a9A922B607e9CF7301f1d47bD1',\r\n}\r\n\r\nexport const BENTOBOX_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ROPSTEN]: '0x6BdD85290001C8Aef74f35A7606065FA15aD5ACF',\r\n  [ChainId.RINKEBY]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.GÖRLI]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.KOVAN]: '0xc381a85ed7C7448Da073b7d6C9d4cBf1Cbf576f0',\r\n  [ChainId.FANTOM]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.MATIC]: '0x0319000133d3AdA02600f0875d2cf03D442C3367',\r\n  [ChainId.MATIC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.XDAI]: '0xE2d7F5dd869Fc7c126D21b13a9080e75a4bDb324',\r\n  [ChainId.BSC]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.BSC_TESTNET]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.ARBITRUM]: '0x74c764D41B77DBbb4fe771daB1939B00b146894A',\r\n  [ChainId.AVALANCHE]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HECO]: '0xF5BCE5077908a1b7370B9ae04AdC565EBd643966',\r\n  [ChainId.CELO]: '0x0711B6026068f736bae6B213031fCE978D48E026',\r\n  [ChainId.HARMONY]: '0xA28cfF72b04f83A7E3f912e6ad34d5537708a2C2',\r\n  [ChainId.MOONBEAM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.MOONRIVER]: '0x145d82bCa93cCa2AE057D1c6f26245d1b9522E6F',\r\n  [ChainId.OPTIMISM]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.KAVA]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n  [ChainId.METIS]: '0xc35DADB65012eC5796536bD9864eD8773aBc74C4',\r\n}\r\n\r\nexport const KASHI_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.KOVAN]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.MATIC]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.XDAI]: '0x7a6DA9903d0a481F40b8336c1463487BC8C0407e',\r\n  [ChainId.BSC]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n  [ChainId.ARBITRUM]: '0xa010eE0226cd071BeBd8919A1F675cAE1f1f5D3e',\r\n  [ChainId.AVALANCHE]: '0x513037395FA0C9c35E41f89189ceDfE3bD42fAdb',\r\n  [ChainId.AVALANCHE_TESTNET]: '',\r\n  [ChainId.HECO]: '0x2cBA6Ab6574646Badc84F0544d05059e57a5dc42',\r\n}\r\n\r\nexport const SUSHISWAP_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.MATIC]: '0xe9589382130Ded5DF2397E2fD7A3E9b41DD2701D',\r\n  [ChainId.XDAI]: '0xE02BDb31C353CE95A1D74F81C93eEa70Bf7371B9',\r\n  [ChainId.BSC]: '0x1766733112408b95239aD1951925567CB1203084',\r\n  [ChainId.ARBITRUM]: '0x0bFcD5dD76218bF9e3BE8A1055f9e6D27E5745eb',\r\n  [ChainId.AVALANCHE]: '0x062eee8B38ab5E8ee3bc58CE505939db53E63785',\r\n  [ChainId.HECO]: '0x1766733112408b95239aD1951925567CB1203084',\r\n}\r\n\r\nexport const SUSHISWAP_MULTISWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x545820d5Cc05248da112419fEfb18522c63C8e12',\r\n  [ChainId.KOVAN]: '0xc0c1649b2c67f1a9f5ff1dd618188165e2555bcf',\r\n  [ChainId.MATIC]: '0x73BE093B84c773fe8eE0f76DDc0829E45c215415',\r\n  [ChainId.XDAI]: '0x735f0FbEb3b6389986BcaAf073Af07D2F8be2b93',\r\n  [ChainId.BSC]: '0x86c655cAc122e9A2fd9Ae1f79Df27b30E357968c',\r\n  [ChainId.ARBITRUM]: '0xbe7D5968296843756109D42946D01195320922EF',\r\n  [ChainId.AVALANCHE]: '0xB7C8b5BFcd7212f034Be42a2aAb08b8773B76920',\r\n}\r\n\r\nexport const SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xB527C5295c4Bc348cBb3a2E96B2494fD292075a7',\r\n  [ChainId.KOVAN]: '0x75AE0Aa596D39b20addC921DeB5EE3c96279dABE',\r\n  [ChainId.MATIC]: '0xDB6C4EDd9545d3b815dA85E6429B699c418886f9',\r\n  [ChainId.XDAI]: '0x07b6e34EeCF38B02e83b6B4702699717e298967E',\r\n  [ChainId.BSC]: '0x1B16149Edaf1EFa6ADE6aEEF33e63C6e08c9bB1B',\r\n  [ChainId.ARBITRUM]: '0x860D841bfD1cfEf72A14B2b734005799F07dC7ED',\r\n  [ChainId.AVALANCHE]: '0x2c46217Fae90D302d1Fb5467ADA504bC2A84f448',\r\n}\r\n\r\nexport const PEGGED_ORACLE_ADDRESS = '0x6cbfbB38498Df0E1e7A4506593cDB02db9001564'\r\n\r\nexport const SUSHISWAP_TWAP_0_ORACLE_ADDRESS = '0x66F03B0d30838A3fee971928627ea6F59B236065'\r\n\r\nexport const SUSHISWAP_TWAP_1_ORACLE_ADDRESS = '0x0D51b575591F8f74a2763Ade75D3CDCf6789266f'\r\n\r\nexport const CHAINLINK_ORACLE_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.MATIC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.XDAI]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.BSC]: '0x00632CFe43d8F9f8E6cD0d39Ffa3D4fa7ec73CFB',\r\n  [ChainId.ARBITRUM]: '0xB2B5C26B6868be10fF77e4E233fD231ceB90162a',\r\n  [ChainId.AVALANCHE]: '0x43198B6fA5d89B88D2E072fA4841724571De5A59',\r\n}\r\n\r\nexport const BORING_HELPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.KOVAN]: '0x5bd6e4eFA335192FDA5D6B42a344ccA3d45894B8',\r\n  [ChainId.MATIC]: '0xA77a7fD5a16237B85E0FAd02C51f459D18AE93Cd',\r\n  [ChainId.XDAI]: '0x97e4a0fb71243A83A6FbaEF7Cf73617594e4cF2F',\r\n  [ChainId.BSC]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n  [ChainId.ARBITRUM]: '0x9AF28d4f7Fa007686958c306BD4c8c52c2b615b8',\r\n  [ChainId.AVALANCHE]: '0xD18cA07a599bf5eBb9B7327871ad682F0b660748',\r\n  [ChainId.HECO]: '0x11Ca5375AdAfd6205E41131A4409f182677996E6',\r\n}\r\n\r\nexport const MINICHEF_ADDRESS: AddressMap = {\r\n  [ChainId.MATIC]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.XDAI]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.ARBITRUM]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.CELO]: '0x8084936982D089130e001b470eDf58faCA445008',\r\n  [ChainId.MOONRIVER]: '0x3dB01570D97631f69bbb0ba39796865456Cf89A5',\r\n  [ChainId.FUSE]: '0x182CD0C6F1FaEc0aED2eA83cd0e160c8Bd4cb063',\r\n  [ChainId.FANTOM]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.MOONBEAM]: '0x011E52E4E40CF9498c79273329E8827b21E2e581',\r\n  [ChainId.KAVA]: '0xf731202A3cf7EfA9368C2d7bD613926f7A144dB5',\r\n  [ChainId.METIS]: '0x1334c8e873E1cae8467156e2A81d1C8b566B2da1',\r\n}\r\n\r\nexport const MASTERCHEF_V2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xEF0881eC094552b2e128Cf945EF17a6752B4Ec5d',\r\n}\r\n\r\nexport const ENS_REGISTRAR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.GÖRLI]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.ROPSTEN]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n  [ChainId.RINKEBY]: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\r\n}\r\n\r\nexport const ZAPPER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n  [ChainId.ROPSTEN]: '0xcff6eF0B9916682B37D80c19cFF8949bc1886bC2',\r\n}\r\n\r\nexport const MERKLE_DISTRIBUTOR_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0xcBE6B83e77cdc011Cc18F6f0Df8444E5783ed982',\r\n  [ChainId.ROPSTEN]: '0x84d1f7202e0e7dac211617017ca72a2cb5e2b955',\r\n}\r\n\r\nexport const MULTICALL2_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ROPSTEN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.RINKEBY]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.GÖRLI]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.KOVAN]: '0x5BA1e12693Dc8F9c48aAD8770482f4739bEeD696',\r\n  [ChainId.ARBITRUM]: '0x80C7DD17B01855a6D2347444a0FCC36136a314de',\r\n  [ChainId.ARBITRUM_TESTNET]: '0xa501c031958F579dB7676fF1CE78AD305794d579',\r\n  [ChainId.CELO]: '0x9aac9048fC8139667D6a2597B902865bfdc225d3',\r\n  [ChainId.FANTOM]: '0x22D4cF72C45F8198CfbF4B568dBdB5A85e8DC0B5',\r\n  [ChainId.MATIC]: '0x02817C1e3543c2d908a590F5dB6bc97f933dB4BD',\r\n  [ChainId.XDAI]: '0x67dA5f2FfaDDfF067AB9d5F025F8810634d84287',\r\n  [ChainId.BSC]: '0xa9193376D09C7f31283C54e56D013fCF370Cd9D9',\r\n  [ChainId.AVALANCHE]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HECO]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.HARMONY]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.OKEX]: '0xF4d73326C13a4Fc5FD7A064217e12780e9Bd62c3',\r\n  [ChainId.PALM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.MOONRIVER]: '0x270f2F35bED92B7A59eA5F08F6B3fd34c8D9D9b5',\r\n  [ChainId.FUSE]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n  [ChainId.TELOS]: '0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3',\r\n  [ChainId.MOONBEAM]: '0x0769fd68dFb93167989C6f7254cd0D766Fb2841F',\r\n}\r\n\r\nexport const BALANCE_FETCHER_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x386a4B75578C7843A6082EFe181D5d629236C047',\r\n  [ChainId.MATIC]: '0x06a846BA430Ed005bE60f8598B4C563dbaa6feF0',\r\n  [ChainId.AVALANCHE]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.XDAI]: '0x26DC4e2f63bad22BCdF99087E40bd5B6c456e69d',\r\n  [ChainId.BSC]: '0x9d6c13Bc5269E553C4697767b4c267FB33Dd8d1A',\r\n  [ChainId.ARBITRUM]: '0x0e9b6C08Fe70Aac8fd08a74a076c2B1C9f7c7d14',\r\n  [ChainId.HECO]: '0x4d4A0D45a98AE8EC25b359D93A088A87BC9eF70b',\r\n  [ChainId.KOVAN]: '0x980bE39AC44E5500f0f16bA692084A6E44e6549A',\r\n}\r\n\r\nexport const MULTISIG_ADDRESS: AddressMap = {\r\n  [ChainId.ETHEREUM]: '0x19B3Eb3Af5D93b77a5619b047De0EED7115A19e7',\r\n  // [ChainId.ROPSTEN]: '',\r\n  // [ChainId.RINKEBY]: '',\r\n  // [ChainId.GÖRLI]: '',\r\n  // [ChainId.KOVAN]: '',\r\n  [ChainId.FANTOM]: '0xF9E7d4c6d36ca311566f46c81E572102A2DC9F52',\r\n  [ChainId.MATIC]: '0x850a57630A2012B2494779fBc86bBc24F2a7baeF',\r\n  [ChainId.XDAI]: '0xc375411C6597F692Add6a7a3AD5b3C38626B0F26',\r\n  [ChainId.BSC]: '0xc6fD91aD4919Fd91e2c84077ba648092cB499638',\r\n  [ChainId.ARBITRUM]: '0x978982772b8e4055B921bf9295c0d74eB36Bc54e',\r\n  [ChainId.AVALANCHE]: '0x09842Ce338647906B686aBB3B648A6457fbB25DA',\r\n  // [ChainId.HECO]: '',\r\n  [ChainId.HARMONY]: '0x30af69A3f4a6f266961313Ce0943719dF4A8AA10',\r\n  // [ChainId.OKEX]: '',\r\n  // [ChainId.OKEX_TESTNET]: '',\r\n  // [ChainId.PALM]: '',\r\n  // [ChainId.PALM_TESTNET]: '',\r\n  [ChainId.MOONRIVER]: '0x939f7E76cc515cc296dD3ce362D9a52e148A7D5f',\r\n  [ChainId.CELO]: '0x751b01Fa14fD9640a1DF9014e2D0f3a03A198b81',\r\n  // [ChainId.TELOS]: '',\r\n  [ChainId.FUSE]: '0x33b6beb37837459Ee84a1Ffed2C6a4ca22e5F316',\r\n}\r\n","import { ChainId } from '../enums'\r\nimport { ChainKey } from '../enums'\r\n\r\nexport const CHAIN_KEY: { [chainId: number]: ChainKey } = {\r\n  [ChainId.ETHEREUM]: ChainKey.ETHEREUM,\r\n  [ChainId.ROPSTEN]: ChainKey.ROPSTEN,\r\n  [ChainId.RINKEBY]: ChainKey.RINKEBY,\r\n  [ChainId.GÖRLI]: ChainKey.GÖRLI,\r\n  [ChainId.KOVAN]: ChainKey.KOVAN,\r\n  [ChainId.MATIC]: ChainKey.MATIC,\r\n  [ChainId.MATIC_TESTNET]: ChainKey.MATIC_TESTNET,\r\n  [ChainId.FANTOM]: ChainKey.FANTOM,\r\n  [ChainId.FANTOM_TESTNET]: ChainKey.FANTOM_TESTNET,\r\n  [ChainId.XDAI]: ChainKey.XDAI,\r\n  [ChainId.BSC]: ChainKey.RAIL,\r\n  [ChainId.RAIL]: ChainKey.RAIL_TESTNET,\r\n  [ChainId.RAIL_TESTNET]: ChainKey.BSC,\r\n  [ChainId.BSC_TESTNET]: ChainKey.BSC_TESTNET,\r\n  [ChainId.ARBITRUM]: ChainKey.ARBITRUM,\r\n  [ChainId.ARBITRUM_TESTNET]: ChainKey.ARBITRUM_TESTNET,\r\n  [ChainId.MOONBEAM_TESTNET]: ChainKey.MOONBEAM_TESTNET,\r\n  [ChainId.AVALANCHE]: ChainKey.AVALANCHE,\r\n  [ChainId.AVALANCHE_TESTNET]: ChainKey.AVALANCHE_TESTNET,\r\n  [ChainId.HECO]: ChainKey.HECO,\r\n  [ChainId.HECO_TESTNET]: ChainKey.HECO_TESTNET,\r\n  [ChainId.HARMONY]: ChainKey.HARMONY,\r\n  [ChainId.HARMONY_TESTNET]: ChainKey.HARMONY_TESTNET,\r\n  [ChainId.OKEX]: ChainKey.OKEX,\r\n  [ChainId.OKEX_TESTNET]: ChainKey.OKEX_TESTNET,\r\n  [ChainId.CELO]: ChainKey.CELO,\r\n  [ChainId.PALM]: ChainKey.PALM,\r\n  [ChainId.PALM_TESTNET]: ChainKey.PALM_TESTNET,\r\n  [ChainId.MOONRIVER]: ChainKey.MOONRIVER,\r\n  [ChainId.FUSE]: ChainKey.FUSE,\r\n  [ChainId.TELOS]: ChainKey.TELOS,\r\n  [ChainId.MOONBEAM]: ChainKey.MOONBEAM,\r\n  [ChainId.OPTIMISM]: ChainKey.OPTIMISM,\r\n  [ChainId.KAVA]: ChainKey.KAVA,\r\n  [ChainId.METIS]: ChainKey.METIS,\r\n  [ChainId.ARBITRUM_NOVA]: ChainKey.ARBITRUM_NOVA,\r\n  [ChainId.BOBA_AVAX]: ChainKey.BOBA_AVAX,\r\n}\r\n","import { ChainId } from '../enums/ChainId'\r\n\r\nexport const INIT_CODE_HASH: { [chainId: number]: string } = {\r\n  [ChainId.ETHEREUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ROPSTEN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RINKEBY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.SEPOLIA]: '0x4156ccc01dad273e6c65c4335c428a2ff4a4b0c95a9a228f6bfed45a069d3fe7',\r\n  [ChainId.GÖRLI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.KOVAN]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FANTOM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MATIC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.XDAI]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BSC_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RAIL]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.RAIL_TESTNET]: '0x68621122d5a2d88173b4685b8a130c8edf6af1711c629d20fc360e4512b3a347',\r\n  [ChainId.ARBITRUM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONBEAM_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.AVALANCHE_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HECO_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.HARMONY_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.OKEX_TESTNET]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.CELO]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.PALM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONRIVER]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.FUSE]: '0x1901958ef8b470f2c0a3875a79ee0bd303866d85102c0f1ea820d317024d50b5',\r\n  [ChainId.TELOS]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.MOONBEAM]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.ARBITRUM_NOVA]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n  [ChainId.BOBA_AVAX]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303',\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\r\nexport abstract class AbstractCurrency {\r\n  /**\r\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\r\n   */\r\n  public abstract readonly isNative: boolean\r\n  /**\r\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\r\n   */\r\n  public abstract readonly isToken: boolean\r\n\r\n  /**\r\n   * The chain ID on which this currency resides\r\n   */\r\n  public readonly chainId: number\r\n  /**\r\n   * The decimals used in representing currency amounts\r\n   */\r\n  public readonly decimals: number\r\n  /**\r\n   * The symbol of the currency, i.e. a short textual non-unique identifier\r\n   */\r\n  public readonly symbol?: string\r\n  /**\r\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\r\n   */\r\n  public readonly name?: string\r\n\r\n  /**\r\n   * Constructs an instance of the base class `BaseCurrency`.\r\n   * @param chainId the chain ID on which this currency resides\r\n   * @param decimals decimals of the currency\r\n   * @param symbol symbol of the currency\r\n   * @param name of the currency\r\n   */\r\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\r\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\r\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\r\n\r\n    this.chainId = chainId\r\n    this.decimals = decimals\r\n    this.symbol = symbol\r\n    this.name = name\r\n  }\r\n\r\n  /**\r\n   * Returns whether this currency is functionally equivalent to the other currency\r\n   * @param other the other currency\r\n   */\r\n  public abstract equals(other: Currency): boolean\r\n\r\n  /**\r\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\r\n   * implement this to be used in Uniswap\r\n   */\r\n  public abstract get wrapped(): Token\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\n\r\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\r\nexport abstract class NativeCurrency extends AbstractCurrency {\r\n  public readonly isNative: true = true\r\n  public readonly isToken: false = false\r\n}\r\n","import { getAddress } from '@ethersproject/address'\r\nimport invariant from 'tiny-invariant'\r\nimport warning from 'tiny-warning'\r\n\r\n// warns if addresses are not checksummed\r\nexport function validateAndParseAddress(address: string): string {\r\n  try {\r\n    const checksummedAddress = getAddress(address)\r\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\r\n    return checksummedAddress\r\n  } catch (error) {\r\n    invariant(false, `${address} is not a valid address.`)\r\n  }\r\n}\r\n","import { AbstractCurrency } from './AbstractCurrency'\r\nimport { Currency } from './Currency'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from '../functions/validateAndParseAddress'\r\n\r\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\r\nexport class Token extends AbstractCurrency {\r\n  public readonly chainId: number\r\n  public readonly address: string\r\n\r\n  public readonly isNative: false = false\r\n  public readonly isToken: true = true\r\n\r\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\r\n    super(chainId, decimals, symbol, name)\r\n    this.chainId = chainId\r\n    this.address = validateAndParseAddress(address)\r\n  }\r\n\r\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\r\n  public equals(other: Currency): boolean {\r\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\r\n  }\r\n\r\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\r\n  public sortsBefore(other: Token): boolean {\r\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\r\n    invariant(this.address !== other.address, 'ADDRESSES')\r\n    return this.address.toLowerCase() < other.address.toLowerCase()\r\n  }\r\n\r\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\r\n  public get wrapped(): Token {\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Return logo\r\n   */\r\n  // public get logo(): string | null {\r\n  //   return this.chainId in CHAIN_KEY ? `https://raw.githubusercontent.com/sushiswap/logos/main/network/${CHAIN_KEY[this.chainId]}/.jpg` : undefined\r\n  // }\r\n}\r\n\r\n/**\r\n * Compares two currencies for equality\r\n */\r\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\r\n  if (currencyA instanceof Token && currencyB instanceof Token) {\r\n    return currencyA.equals(currencyB)\r\n  } else if (currencyA instanceof Token) {\r\n    return false\r\n  } else if (currencyB instanceof Token) {\r\n    return false\r\n  } else {\r\n    return currencyA === currencyB\r\n  }\r\n}\r\n","import { ChainTokenMap, TokenMap } from '../types'\r\nimport { SUSHI_ADDRESS, USDC_ADDRESS, USD_ADDRESS, WETH9_ADDRESS, WNATIVE_ADDRESS } from './addresses'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { Token } from '../entities/Token'\r\n\r\nexport const USDC: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, USDC_ADDRESS[ChainId.ETHEREUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, USDC_ADDRESS[ChainId.ROPSTEN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, USDC_ADDRESS[ChainId.KOVAN], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.RAIL]: new Token(ChainId.RAIL, USDC_ADDRESS[ChainId.RAIL], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.RAIL_TESTNET]: new Token(ChainId.RAIL_TESTNET, USDC_ADDRESS[ChainId.RAIL_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, USDC_ADDRESS[ChainId.MATIC], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MATIC_TESTNET]: new Token(ChainId.MATIC_TESTNET, USDC_ADDRESS[ChainId.MATIC_TESTNET], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, USDC_ADDRESS[ChainId.FANTOM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, USDC_ADDRESS[ChainId.BSC], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, USDC_ADDRESS[ChainId.HARMONY], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, USDC_ADDRESS[ChainId.HECO], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, USDC_ADDRESS[ChainId.OKEX], 18, 'USDC', 'USD Coin'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, USDC_ADDRESS[ChainId.XDAI], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, USDC_ADDRESS[ChainId.ARBITRUM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, USDC_ADDRESS[ChainId.MOONRIVER], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, USDC_ADDRESS[ChainId.AVALANCHE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, USDC_ADDRESS[ChainId.FUSE], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, USDC_ADDRESS[ChainId.TELOS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, USDC_ADDRESS[ChainId.MOONBEAM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, USDC_ADDRESS[ChainId.OPTIMISM], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, USDC_ADDRESS[ChainId.KAVA], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, USDC_ADDRESS[ChainId.METIS], 6, 'USDC', 'USD Coin'),\r\n  [ChainId.ARBITRUM_NOVA]: new Token(ChainId.ARBITRUM_NOVA, USDC_ADDRESS[ChainId.ARBITRUM_NOVA], 6, 'USDC', 'USD Coin'),\r\n}\r\n\r\nexport const USD: TokenMap = {\r\n  ...USDC,\r\n  [ChainId.CELO]: new Token(ChainId.CELO, USD_ADDRESS[ChainId.CELO], 18, 'cUSD', 'Celo Dollar'),\r\n}\r\n\r\nexport const WETH9: TokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, WETH9_ADDRESS[ChainId.ETHEREUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, WETH9_ADDRESS[ChainId.ROPSTEN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.RAIL]: new Token(ChainId.RAIL, WETH9_ADDRESS[ChainId.RAIL], 18, 'WSTMX', 'Wrapped STMX'),\r\n  [ChainId.RAIL_TESTNET]: new Token(ChainId.RAIL_TESTNET, WETH9_ADDRESS[ChainId.RAIL_TESTNET], 18, 'WSTMX', 'Wrapped STMX'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, WETH9_ADDRESS[ChainId.RINKEBY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, WETH9_ADDRESS[ChainId.GÖRLI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, WETH9_ADDRESS[ChainId.KOVAN], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, WETH9_ADDRESS[ChainId.ARBITRUM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_TESTNET]: new Token(\r\n    ChainId.ARBITRUM_TESTNET,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WETH9_ADDRESS[ChainId.BSC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WETH9_ADDRESS[ChainId.FANTOM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WETH9_ADDRESS[ChainId.MATIC], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WETH9_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WETH9_ADDRESS[ChainId.OKEX], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WETH9_ADDRESS[ChainId.HECO], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WETH9_ADDRESS[ChainId.HARMONY], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WETH9_ADDRESS[ChainId.XDAI], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WETH9_ADDRESS[ChainId.AVALANCHE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WETH9_ADDRESS[ChainId.PALM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WETH9_ADDRESS[ChainId.TELOS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WETH9_ADDRESS[ChainId.FUSE], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WETH9_ADDRESS[ChainId.MOONBEAM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.OPTIMISM]: new Token(ChainId.OPTIMISM, WETH9_ADDRESS[ChainId.OPTIMISM], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WETH9_ADDRESS[ChainId.KAVA], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WETH9_ADDRESS[ChainId.METIS], 18, 'WETH', 'Wrapped Ether'),\r\n  [ChainId.ARBITRUM_NOVA]: new Token(\r\n    ChainId.ARBITRUM_NOVA,\r\n    WETH9_ADDRESS[ChainId.ARBITRUM_NOVA],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n}\r\n\r\nexport const WNATIVE: TokenMap = {\r\n  [ChainId.ETHEREUM]: WETH9[ChainId.ETHEREUM],\r\n  [ChainId.ROPSTEN]: WETH9[ChainId.ROPSTEN],\r\n  [ChainId.RINKEBY]: WETH9[ChainId.RINKEBY],\r\n  [ChainId.GÖRLI]: WETH9[ChainId.GÖRLI],\r\n  [ChainId.KOVAN]: WETH9[ChainId.KOVAN],\r\n  [ChainId.RAIL_TESTNET]: WETH9[ChainId.RAIL_TESTNET],\r\n  [ChainId.OPTIMISM]: WETH9[ChainId.OPTIMISM],\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, WNATIVE_ADDRESS[ChainId.FANTOM], 18, 'WFTM', 'Wrapped FTM'),\r\n  [ChainId.FANTOM_TESTNET]: new Token(\r\n    ChainId.FANTOM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.FANTOM_TESTNET],\r\n    18,\r\n    'FTM',\r\n    'Wrapped FTM'\r\n  ),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, WNATIVE_ADDRESS[ChainId.MATIC], 18, 'WMATIC', 'Wrapped Matic'),\r\n  [ChainId.MATIC_TESTNET]: new Token(\r\n    ChainId.MATIC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MATIC_TESTNET],\r\n    18,\r\n    'WMATIC',\r\n    'Wrapped Matic'\r\n  ),\r\n  [ChainId.RAIL]: new Token(\r\n    ChainId.RAIL,\r\n    WNATIVE_ADDRESS[ChainId.RAIL],\r\n    18,\r\n    'WSTMX',\r\n    'Wrapped STMX'\r\n  ),\r\n\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, WNATIVE_ADDRESS[ChainId.XDAI], 18, 'WXDAI', 'Wrapped xDai'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, WNATIVE_ADDRESS[ChainId.BSC], 18, 'WBNB', 'Wrapped BNB'),\r\n  [ChainId.BSC_TESTNET]: new Token(\r\n    ChainId.BSC_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.BSC_TESTNET],\r\n    18,\r\n    'WBNB',\r\n    'Wrapped BNB'\r\n  ),\r\n  [ChainId.ARBITRUM]: WETH9[ChainId.ARBITRUM],\r\n  [ChainId.ARBITRUM_TESTNET]: WETH9[ChainId.ARBITRUM_TESTNET],\r\n  [ChainId.MOONBEAM_TESTNET]: new Token(\r\n    ChainId.MOONBEAM_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.MOONBEAM_TESTNET],\r\n    18,\r\n    'WETH',\r\n    'Wrapped Ether'\r\n  ),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, WNATIVE_ADDRESS[ChainId.AVALANCHE], 18, 'WAVAX', 'Wrapped AVAX'),\r\n  [ChainId.AVALANCHE_TESTNET]: new Token(\r\n    ChainId.AVALANCHE_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.AVALANCHE_TESTNET],\r\n    18,\r\n    'WAVAX',\r\n    'Wrapped AVAX'\r\n  ),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, WNATIVE_ADDRESS[ChainId.HECO], 18, 'WHT', 'Wrapped HT'),\r\n  [ChainId.HECO_TESTNET]: new Token(\r\n    ChainId.HECO_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HECO_TESTNET],\r\n    18,\r\n    'WHT',\r\n    'Wrapped HT'\r\n  ),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, WNATIVE_ADDRESS[ChainId.HARMONY], 18, 'WONE', 'Wrapped ONE'),\r\n  [ChainId.HARMONY_TESTNET]: new Token(\r\n    ChainId.HARMONY_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.HARMONY_TESTNET],\r\n    18,\r\n    'WONE',\r\n    'Wrapped ONE'\r\n  ),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, WNATIVE_ADDRESS[ChainId.OKEX], 18, 'WOKT', 'Wrapped OKExChain'),\r\n  [ChainId.OKEX_TESTNET]: new Token(\r\n    ChainId.OKEX_TESTNET,\r\n    WNATIVE_ADDRESS[ChainId.OKEX_TESTNET],\r\n    18,\r\n    'WOKT',\r\n    'Wrapped OKExChain'\r\n  ),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, WNATIVE_ADDRESS[ChainId.CELO], 18, 'CELO', 'Celo'),\r\n  [ChainId.PALM]: new Token(ChainId.PALM, WNATIVE_ADDRESS[ChainId.PALM], 18, 'WPALM', 'Wrapped Palm'),\r\n  [ChainId.MOONRIVER]: new Token(\r\n    ChainId.MOONRIVER,\r\n    WNATIVE_ADDRESS[ChainId.MOONRIVER],\r\n    18,\r\n    'WMOVR',\r\n    'Wrapped Moonriver'\r\n  ),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, WNATIVE_ADDRESS[ChainId.FUSE], 18, 'WFUSE', 'Wrapped Fuse'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, WNATIVE_ADDRESS[ChainId.TELOS], 18, 'WTLOS', 'Wrapped Telos'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, WNATIVE_ADDRESS[ChainId.MOONBEAM], 18, 'WGLMR', 'Wrapped Glimmer'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, WNATIVE_ADDRESS[ChainId.KAVA], 18, 'WKAVA', 'Wrapped Kava'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, WNATIVE_ADDRESS[ChainId.METIS], 18, 'WMETIS', 'Wrapped Metis'),\r\n  [ChainId.ARBITRUM_NOVA]: WETH9[ChainId.ARBITRUM_NOVA],\r\n  [ChainId.BOBA_AVAX]: new Token(ChainId.BOBA_AVAX, WNATIVE_ADDRESS[ChainId.BOBA_AVAX], 18, 'WBOBA', 'Wrapped Boba'),\r\n}\r\n\r\nexport const SUSHI: ChainTokenMap = {\r\n  [ChainId.ETHEREUM]: new Token(ChainId.ETHEREUM, SUSHI_ADDRESS[ChainId.ETHEREUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ROPSTEN]: new Token(ChainId.ROPSTEN, SUSHI_ADDRESS[ChainId.ROPSTEN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.RINKEBY]: new Token(ChainId.RINKEBY, SUSHI_ADDRESS[ChainId.RINKEBY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, SUSHI_ADDRESS[ChainId.GÖRLI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, SUSHI_ADDRESS[ChainId.KOVAN], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MATIC]: new Token(ChainId.MATIC, SUSHI_ADDRESS[ChainId.MATIC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FANTOM]: new Token(ChainId.FANTOM, SUSHI_ADDRESS[ChainId.FANTOM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.XDAI]: new Token(ChainId.XDAI, SUSHI_ADDRESS[ChainId.XDAI], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.BSC]: new Token(ChainId.BSC, SUSHI_ADDRESS[ChainId.BSC], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.ARBITRUM]: new Token(ChainId.ARBITRUM, SUSHI_ADDRESS[ChainId.ARBITRUM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.AVALANCHE]: new Token(ChainId.AVALANCHE, SUSHI_ADDRESS[ChainId.AVALANCHE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.OKEX]: new Token(ChainId.OKEX, SUSHI_ADDRESS[ChainId.OKEX], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HARMONY]: new Token(ChainId.HARMONY, SUSHI_ADDRESS[ChainId.HARMONY], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.HECO]: new Token(ChainId.HECO, SUSHI_ADDRESS[ChainId.HECO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.CELO]: new Token(ChainId.CELO, SUSHI_ADDRESS[ChainId.CELO], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONRIVER]: new Token(ChainId.MOONRIVER, SUSHI_ADDRESS[ChainId.MOONRIVER], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.FUSE]: new Token(ChainId.FUSE, SUSHI_ADDRESS[ChainId.FUSE], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.TELOS]: new Token(ChainId.TELOS, SUSHI_ADDRESS[ChainId.TELOS], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.MOONBEAM]: new Token(ChainId.MOONBEAM, SUSHI_ADDRESS[ChainId.MOONBEAM], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.KAVA]: new Token(ChainId.KAVA, SUSHI_ADDRESS[ChainId.KAVA], 18, 'SUSHI', 'SushiToken'),\r\n  [ChainId.METIS]: new Token(ChainId.METIS, SUSHI_ADDRESS[ChainId.METIS], 18, 'SUSHI', 'SushiToken'),\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Avalanche extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'AVAX', 'Avalanche')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Avalanche } = {}\r\n\r\n  public static onChain(chainId: number): Avalanche {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Avalanche(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Binance extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BNB', 'Binance Coin')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Binance } = {}\r\n\r\n  public static onChain(chainId: number): Binance {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Binance(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Celo extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'CELO', 'Celo')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Celo } = {}\r\n\r\n  public static onChain(chainId: number): Celo {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Celo(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WETH9 } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\r\nexport class Ether extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ETH', 'Ether')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const weth9 = WETH9[this.chainId]\r\n    invariant(!!weth9, 'WRAPPED')\r\n    return weth9\r\n  }\r\n\r\n  private static _etherCache: { [chainId: number]: Ether } = {}\r\n\r\n  public static onChain(chainId: number): Ether {\r\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fantom extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FTM', 'Fantom')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fantom } = {}\r\n\r\n  public static onChain(chainId: number): Fantom {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fantom(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Harmony extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'ONE', 'Harmony')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Harmony } = {}\r\n\r\n  public static onChain(chainId: number): Harmony {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Harmony(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Heco extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'HT', 'Huobi Token')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Heco } = {}\r\n\r\n  public static onChain(chainId: number): Heco {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Heco(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Matic extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MATIC', 'Matic')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Matic } = {}\r\n\r\n  public static onChain(chainId: number): Matic {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Matic(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Movr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'MOVR', 'Moonriver')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Movr } = {}\r\n\r\n  public static onChain(chainId: number): Movr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Movr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Okex extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'OKT', 'OKExChain')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Okex } = {}\r\n\r\n  public static onChain(chainId: number): Okex {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Okex(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class xDai extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'XDAI', 'xDai')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: xDai } = {}\r\n\r\n  public static onChain(chainId: number): xDai {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new xDai(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Rails extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'STMX', 'STMX')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wrails = WNATIVE[this.chainId]\r\n    invariant(!!wrails, 'WRAPPED')\r\n    return wrails\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Rails } = {}\r\n\r\n  public static onChain(chainId: number): Rails {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Rails(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Palm extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'PALM', 'Palm')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Palm } = {}\r\n\r\n  public static onChain(chainId: number): Palm {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Palm(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Fuse extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'FUSE', 'Fuse')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Fuse } = {}\r\n\r\n  public static onChain(chainId: number): Fuse {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Fuse(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Telos extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'TLOS', 'Telos')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Telos } = {}\r\n\r\n  public static onChain(chainId: number): Telos {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Telos(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Glmr extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'GLMR', 'Glimmer')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Glmr } = {}\r\n\r\n  public static onChain(chainId: number): Glmr {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Glmr(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Kava extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'KAVA', 'Kava')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Kava } = {}\r\n\r\n  public static onChain(chainId: number): Kava {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Kava(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Metis extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'METIS', 'Metis')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wnative = WNATIVE[this.chainId]\r\n    invariant(!!wnative, 'WRAPPED')\r\n    return wnative\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Metis } = {}\r\n\r\n  public static onChain(chainId: number): Metis {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Metis(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","import { Currency } from '../Currency'\r\nimport { NativeCurrency } from '../NativeCurrency'\r\nimport { Token } from '../Token'\r\nimport { WNATIVE } from '../../constants/tokens'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Boba extends NativeCurrency {\r\n  protected constructor(chainId: number) {\r\n    super(chainId, 18, 'BOBA', 'Boba')\r\n  }\r\n\r\n  public get wrapped(): Token {\r\n    const wcelo = WNATIVE[this.chainId]\r\n    invariant(!!wcelo, 'WRAPPED')\r\n    return wcelo\r\n  }\r\n\r\n  private static _cache: { [chainId: number]: Boba } = {}\r\n\r\n  public static onChain(chainId: number): Boba {\r\n    return this._cache[chainId] ?? (this._cache[chainId] = new Boba(chainId))\r\n  }\r\n\r\n  public equals(other: Currency): boolean {\r\n    return other.isNative && other.chainId === this.chainId\r\n  }\r\n}\r\n","// import { Rails } from 'src/entities/Native/Rails'\r\nimport {\r\n  Avalanche,\r\n  Binance,\r\n  Celo,\r\n  Ether,\r\n  Fantom,\r\n  Fuse,\r\n  Glmr,\r\n  Harmony,\r\n  Heco,\r\n  Kava,\r\n  Matic,\r\n  Movr,\r\n  Okex,\r\n  Rails,\r\n  Palm,\r\n  Telos,\r\n  xDai,\r\n  Metis,\r\n  Boba,\r\n} from '../entities/Native'\r\n\r\nimport { ChainId } from '../enums'\r\nimport { NativeMap } from '../types'\r\n\r\nexport const NATIVE: NativeMap = {\r\n  [ChainId.ETHEREUM]: Ether.onChain(ChainId.ETHEREUM),\r\n  [ChainId.ROPSTEN]: Ether.onChain(ChainId.ROPSTEN),\r\n  [ChainId.RINKEBY]: Ether.onChain(ChainId.RINKEBY),\r\n  [ChainId.GÖRLI]: Ether.onChain(ChainId.GÖRLI),\r\n  [ChainId.KOVAN]: Ether.onChain(ChainId.KOVAN),\r\n  [ChainId.FANTOM]: Fantom.onChain(ChainId.FANTOM),\r\n  [ChainId.FANTOM_TESTNET]: Fantom.onChain(ChainId.FANTOM_TESTNET),\r\n  [ChainId.MATIC]: Matic.onChain(ChainId.MATIC),\r\n  [ChainId.MATIC_TESTNET]: Matic.onChain(ChainId.MATIC_TESTNET),\r\n  [ChainId.XDAI]: xDai.onChain(ChainId.XDAI),\r\n  [ChainId.BSC]: Binance.onChain(ChainId.BSC),\r\n  [ChainId.BSC_TESTNET]: Binance.onChain(ChainId.BSC_TESTNET),\r\n  // [ChainId.MOONBEAM_TESTNET]: Currency.GLMR,\r\n  [ChainId.ARBITRUM]: Ether.onChain(ChainId.ARBITRUM),\r\n  [ChainId.ARBITRUM_TESTNET]: Ether.onChain(ChainId.ARBITRUM_TESTNET),\r\n  [ChainId.AVALANCHE]: Avalanche.onChain(ChainId.AVALANCHE),\r\n  [ChainId.AVALANCHE_TESTNET]: Avalanche.onChain(ChainId.AVALANCHE_TESTNET),\r\n  [ChainId.HECO]: Heco.onChain(ChainId.HECO),\r\n  [ChainId.HECO_TESTNET]: Heco.onChain(ChainId.HECO_TESTNET),\r\n  [ChainId.HARMONY]: Harmony.onChain(ChainId.HARMONY),\r\n  [ChainId.HARMONY_TESTNET]: Harmony.onChain(ChainId.HARMONY_TESTNET),\r\n  [ChainId.OKEX]: Okex.onChain(ChainId.OKEX),\r\n  [ChainId.OKEX_TESTNET]: Okex.onChain(ChainId.OKEX_TESTNET),\r\n  [ChainId.CELO]: Celo.onChain(ChainId.CELO),\r\n  [ChainId.RAIL]: Rails.onChain(ChainId.RAIL),\r\n  [ChainId.RAIL_TESTNET]: Rails.onChain(ChainId.RAIL_TESTNET),\r\n  [ChainId.PALM]: Palm.onChain(ChainId.PALM),\r\n  [ChainId.MOONRIVER]: Movr.onChain(ChainId.MOONRIVER),\r\n  [ChainId.FUSE]: Fuse.onChain(ChainId.FUSE),\r\n  [ChainId.TELOS]: Telos.onChain(ChainId.TELOS),\r\n  [ChainId.MOONBEAM]: Glmr.onChain(ChainId.MOONBEAM),\r\n  [ChainId.OPTIMISM]: Ether.onChain(ChainId.OPTIMISM),\r\n  [ChainId.KAVA]: Kava.onChain(ChainId.KAVA),\r\n  [ChainId.METIS]: Metis.onChain(ChainId.METIS),\r\n  [ChainId.ARBITRUM_NOVA]: Ether.onChain(ChainId.ARBITRUM_NOVA),\r\n  [ChainId.BOBA_AVAX]: Boba.onChain(ChainId.BOBA_AVAX),\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\r\n\r\n// exports for internal consumption\r\nexport const ZERO = JSBI.BigInt(0)\r\nexport const ONE = JSBI.BigInt(1)\r\nexport const TWO = JSBI.BigInt(2)\r\nexport const THREE = JSBI.BigInt(3)\r\nexport const FIVE = JSBI.BigInt(5)\r\nexport const TEN = JSBI.BigInt(10)\r\nexport const _100 = JSBI.BigInt(100)\r\nexport const _997 = JSBI.BigInt(997)\r\nexport const _1000 = JSBI.BigInt(1000)\r\n\r\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)","import JSBI from 'jsbi'\r\nimport { SolidityType } from \"../enums/SolidityType\";\r\n\r\nexport const SOLIDITY_TYPE_MAXIMA = {\r\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\r\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),\r\n}","// see https://stackoverflow.com/a/41102306\r\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\r\n\r\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\r\nexport class InsufficientReservesError extends Error {\r\n  public readonly isInsufficientReservesError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\r\nexport class InsufficientInputAmountError extends Error {\r\n  public readonly isInsufficientInputAmountError: true = true\r\n\r\n  public constructor() {\r\n    super()\r\n    this.name = this.constructor.name\r\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\r\n  }\r\n}\r\n","import _Big from 'big.js'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport _Decimal from 'decimal.js-light'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Decimal = toFormat(_Decimal)\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nconst toSignificantRounding = {\r\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\r\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\r\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP,\r\n}\r\n\r\nconst toFixedRounding = {\r\n  //@ts-ignore\r\n  [Rounding.ROUND_DOWN]: Rounding.RoundDown,\r\n  //@ts-ignore\r\n  [Rounding.ROUND_HALF_UP]: Rounding.RoundHalfUp,\r\n  //@ts-ignore\r\n\r\n  [Rounding.ROUND_UP]: Rounding.RoundUp,\r\n}\r\n\r\nexport class Fraction {\r\n  public readonly numerator: JSBI\r\n  public readonly denominator: JSBI\r\n\r\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\r\n    this.numerator = JSBI.BigInt(numerator)\r\n    this.denominator = JSBI.BigInt(denominator)\r\n  }\r\n\r\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\r\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\r\n      return new Fraction(fractionish)\r\n\r\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\r\n    throw new Error('Could not parse fraction')\r\n  }\r\n\r\n  // performs floor division\r\n  public get quotient(): JSBI {\r\n    return JSBI.divide(this.numerator, this.denominator)\r\n  }\r\n\r\n  // remainder after floor division\r\n  public get remainder(): Fraction {\r\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\r\n  }\r\n\r\n  public invert(): Fraction {\r\n    return new Fraction(this.denominator, this.numerator)\r\n  }\r\n\r\n  public add(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.add(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public subtract(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\r\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\r\n    }\r\n    return new Fraction(\r\n      JSBI.subtract(\r\n        JSBI.multiply(this.numerator, otherParsed.denominator),\r\n        JSBI.multiply(otherParsed.numerator, this.denominator)\r\n      ),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public lessThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.lessThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public equalTo(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.equal(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public greaterThan(other: Fraction | BigintIsh): boolean {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return JSBI.greaterThan(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(otherParsed.numerator, this.denominator)\r\n    )\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.numerator),\r\n      JSBI.multiply(this.denominator, otherParsed.denominator)\r\n    )\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): Fraction {\r\n    const otherParsed = Fraction.tryParseFraction(other)\r\n    return new Fraction(\r\n      JSBI.multiply(this.numerator, otherParsed.denominator),\r\n      JSBI.multiply(this.denominator, otherParsed.numerator)\r\n    )\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\r\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\r\n\r\n    Decimal.set({\r\n      precision: significantDigits + 1,\r\n      rounding: toSignificantRounding[rounding],\r\n    })\r\n    const quotient = new Decimal(this.numerator.toString())\r\n      .div(this.denominator.toString())\r\n      .toSignificantDigits(significantDigits)\r\n    return quotient.toFormat(quotient.decimalPlaces(), format)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number,\r\n    format: object = { groupSeparator: '' },\r\n    rounding: Rounding = Rounding.ROUND_HALF_UP\r\n  ): string {\r\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\r\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\r\n\r\n    Big.DP = decimalPlaces\r\n    Big.RM = toFixedRounding[rounding]\r\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\r\n  }\r\n\r\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\r\n  public get asFraction(): Fraction {\r\n    return new Fraction(this.numerator, this.denominator)\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { MaxUint256 } from '../constants'\r\nimport { Rounding } from '../enums'\r\nimport { Token } from './Token'\r\nimport _Big from 'big.js'\r\nimport invariant from 'tiny-invariant'\r\nimport toFormat from 'toformat'\r\n\r\nconst Big = toFormat(_Big)\r\n\r\nBig.strict = true\r\n\r\nexport class CurrencyAmount<T extends Currency> extends Fraction {\r\n  public readonly currency: T\r\n  public readonly decimalScale: JSBI\r\n\r\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\r\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, rawAmount)\r\n  }\r\n\r\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\r\n  public static fromFractionalAmount<T extends Currency>(\r\n    currency: T,\r\n    numerator: BigintIsh,\r\n    denominator: BigintIsh\r\n  ): CurrencyAmount<T> {\r\n    return new CurrencyAmount(currency, numerator, denominator)\r\n  }\r\n\r\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\r\n    super(numerator, denominator)\r\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\r\n    this.currency = currency\r\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\r\n  }\r\n\r\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const added = super.add(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\r\n  }\r\n\r\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\r\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\r\n    const subtracted = super.subtract(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\r\n  }\r\n\r\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const multiplied = super.multiply(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\r\n  }\r\n\r\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\r\n    const divided = super.divide(other)\r\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\r\n  }\r\n\r\n  public toSignificant(\r\n    significantDigits: number = 6,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(\r\n    decimalPlaces: number = this.currency.decimals,\r\n    format?: object,\r\n    rounding: Rounding = Rounding.ROUND_DOWN\r\n  ): string {\r\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\r\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n\r\n  public toExact(format: object = { groupSeparator: '' }): string {\r\n    Big.DP = this.currency.decimals\r\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\r\n  }\r\n\r\n  public get wrapped(): CurrencyAmount<Token> {\r\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\r\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the address and currency amount.\r\n   * Useful in cases where a dependency is needed to detect changes (e.g. useEffect).\r\n   * @return string [0x6B3595068778DD592e39A122f4f5a5cF09C90fE2 - 1323.94]\r\n   */\r\n  public serialize(): string {\r\n    return `[${this.currency.wrapped.address} - ${this.toExact()}]`\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\r\n  public readonly baseCurrency: TBase // input i.e. denominator\r\n  public readonly quoteCurrency: TQuote // output i.e. numerator\r\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\r\n\r\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\r\n  public constructor(\r\n    ...args:\r\n      | [TBase, TQuote, BigintIsh, BigintIsh]\r\n      | [\r\n          {\r\n            baseAmount: CurrencyAmount<TBase>\r\n            quoteAmount: CurrencyAmount<TQuote>\r\n          }\r\n        ]\r\n  ) {\r\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\r\n\r\n    if (args.length === 4) {\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\r\n    } else {\r\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\r\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\r\n        args[0].baseAmount.currency,\r\n        args[0].quoteAmount.currency,\r\n        result.denominator,\r\n        result.numerator,\r\n      ]\r\n    }\r\n    super(numerator, denominator)\r\n\r\n    this.baseCurrency = baseCurrency\r\n    this.quoteCurrency = quoteCurrency\r\n    this.scalar = new Fraction(\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\r\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\r\n  public invert(): Price<TQuote, TBase> {\r\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\r\n  }\r\n\r\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\r\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\r\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\r\n    const fraction = super.multiply(other)\r\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\r\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\r\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\r\n    const result = super.multiply(currencyAmount)\r\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\r\n  }\r\n\r\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\r\n  private get adjustedForDecimals(): Fraction {\r\n    return super.multiply(this.scalar)\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\r\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { keccak256, pack } from '@ethersproject/solidity'\r\n\r\nimport { INIT_CODE_HASH } from '../constants'\r\nimport { Token } from '../entities/Token'\r\nimport { getCreate2Address } from '@ethersproject/address'\r\n\r\nexport const computePairAddress = ({\r\n  factoryAddress,\r\n  tokenA,\r\n  tokenB,\r\n}: {\r\n  factoryAddress: string\r\n  tokenA: Token\r\n  tokenB: Token\r\n}): string => {\r\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\r\n  return getCreate2Address(\r\n    factoryAddress,\r\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\r\n    INIT_CODE_HASH[token0.chainId]\r\n  )\r\n}\r\n","import { ONE, TWO, ZERO } from '../constants/numbers'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\r\n\r\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\r\nexport function sqrt(value: JSBI): JSBI {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\r\n\r\n  // rely on built in sqrt if possible\r\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\r\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\r\n  }\r\n\r\n  let z: JSBI\r\n  let x: JSBI\r\n  z = value\r\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\r\n  while (JSBI.lessThan(x, z)) {\r\n    z = x\r\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\r\n  }\r\n  return z\r\n}\r\n\r\n/**\r\n * Returns the smallest member of the array\r\n * @param values the values from which the smallest gets returned\r\n * @returns the smallest memmber of the array\r\n */\r\nexport function minimum(...values: JSBI[]): JSBI {\r\n  let lowest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.LT(value, lowest)) {\r\n      lowest = value\r\n    }\r\n  }\r\n  return lowest\r\n}\r\n\r\n/**\r\n * Returns the biggest member of the array\r\n * @param values the values from which the biggest gets returned\r\n * @returns the biggest memmber of the array\r\n */\r\nexport function maximum(...values: JSBI[]): JSBI {\r\n  let highest = values[0]\r\n  for (let i = 1; i < values.length; i++) {\r\n    const value = values[i]\r\n    if (JSBI.GT(value, highest)) {\r\n      highest = value\r\n    }\r\n  }\r\n  return highest\r\n}\r\n\r\nexport function difference(a: JSBI, b: JSBI): JSBI {\r\n  if (JSBI.greaterThan(a, b)) {\r\n    return JSBI.subtract(a, b)\r\n  }\r\n  return JSBI.subtract(b, a)\r\n}\r\n","import { FACTORY_ADDRESS, FIVE, MINIMUM_LIQUIDITY, ONE, ZERO, _1000, _997 } from '../constants'\r\nimport { InsufficientInputAmountError, InsufficientReservesError } from '../errors'\r\n\r\nimport { BigintIsh } from '../types'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport JSBI from 'jsbi'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport { computePairAddress } from '../functions/computePairAddress'\r\nimport invariant from 'tiny-invariant'\r\nimport { sqrt } from '../functions/math'\r\n\r\nexport class Pair {\r\n  public readonly liquidityToken: Token\r\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n\r\n  public static getAddress(tokenA: Token, tokenB: Token): string {\r\n    return computePairAddress({\r\n      factoryAddress: FACTORY_ADDRESS[tokenA.chainId],\r\n      tokenA,\r\n      tokenB,\r\n    })\r\n  }\r\n\r\n  public constructor(currencyAmountA: CurrencyAmount<Token>, currencyAmountB: CurrencyAmount<Token>) {\r\n    const currencyAmounts = currencyAmountA.currency.sortsBefore(currencyAmountB.currency) // does safety checks\r\n      ? [currencyAmountA, currencyAmountB]\r\n      : [currencyAmountB, currencyAmountA]\r\n    this.liquidityToken = new Token(\r\n      currencyAmounts[0].currency.chainId,\r\n      Pair.getAddress(currencyAmounts[0].currency, currencyAmounts[1].currency),\r\n      18,\r\n      'UNI-V2',\r\n      'Uniswap V2'\r\n    )\r\n    this.tokenAmounts = currencyAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\r\n  }\r\n\r\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\r\n  public involvesToken(token: Token): boolean {\r\n    return token.equals(this.token0) || token.equals(this.token1)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\r\n  public get token0Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\r\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n   */\r\n  public get token1Price(): Price<Token, Token> {\r\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\r\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\r\n  }\r\n\r\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\r\n  public priceOf(token: Token): Price<Token, Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\r\n  }\r\n\r\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\r\n  public get chainId(): number {\r\n    return this.token0.chainId\r\n  }\r\n\r\n  public get token0(): Token {\r\n    return this.tokenAmounts[0].currency\r\n  }\r\n\r\n  public get token1(): Token {\r\n    return this.tokenAmounts[1].currency\r\n  }\r\n\r\n  public get reserve0(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[0]\r\n  }\r\n\r\n  public get reserve1(): CurrencyAmount<Token> {\r\n    return this.tokenAmounts[1]\r\n  }\r\n\r\n  public reserveOf(token: Token): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\r\n  }\r\n\r\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\r\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n    const inputReserve = this.reserveOf(inputAmount.currency)\r\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\r\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\r\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\r\n    const outputAmount = CurrencyAmount.fromRawAmount(\r\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.divide(numerator, denominator)\r\n    )\r\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\r\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\r\n    if (\r\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\r\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\r\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\r\n    ) {\r\n      throw new InsufficientReservesError()\r\n    }\r\n\r\n    const outputReserve = this.reserveOf(outputAmount.currency)\r\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\r\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\r\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\r\n    const inputAmount = CurrencyAmount.fromRawAmount(\r\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\r\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\r\n    )\r\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\r\n  }\r\n\r\n  public getLiquidityMinted(\r\n    totalSupply: CurrencyAmount<Token>,\r\n    tokenAmountA: CurrencyAmount<Token>,\r\n    tokenAmountB: CurrencyAmount<Token>\r\n  ): CurrencyAmount<Token> {\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\r\n      ? [tokenAmountA, tokenAmountB]\r\n      : [tokenAmountB, tokenAmountA]\r\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\r\n\r\n    let liquidity: JSBI\r\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\r\n      liquidity = JSBI.subtract(\r\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\r\n        MINIMUM_LIQUIDITY\r\n      )\r\n    } else {\r\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\r\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\r\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\r\n\r\n      console.log({\r\n        amount0: amount0.toString(),\r\n        amount1: amount1.toString(),\r\n        liquidity: liquidity.toString(),\r\n        totalSupply: totalSupply.quotient.toString(),\r\n        kLast: sqrt(JSBI.multiply(this.tokenAmounts[0].quotient, this.tokenAmounts[1].quotient)),\r\n      })\r\n    }\r\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\r\n      throw new InsufficientInputAmountError()\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\r\n  }\r\n\r\n  public getLiquidityValue(\r\n    token: Token,\r\n    totalSupply: CurrencyAmount<Token>,\r\n    liquidity: CurrencyAmount<Token>,\r\n    feeOn: boolean = false,\r\n    kLast?: BigintIsh\r\n  ): CurrencyAmount<Token> {\r\n    invariant(this.involvesToken(token), 'TOKEN')\r\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\r\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\r\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\r\n\r\n    let totalSupplyAdjusted: CurrencyAmount<Token>\r\n    if (!feeOn) {\r\n      totalSupplyAdjusted = totalSupply\r\n    } else {\r\n      invariant(!!kLast, 'K_LAST')\r\n      const kLastParsed = JSBI.BigInt(kLast)\r\n      if (!JSBI.equal(kLastParsed, ZERO)) {\r\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\r\n        const rootKLast = sqrt(kLastParsed)\r\n        if (JSBI.greaterThan(rootK, rootKLast)) {\r\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\r\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\r\n          const feeLiquidity = JSBI.divide(numerator, denominator)\r\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\r\n        } else {\r\n          totalSupplyAdjusted = totalSupply\r\n        }\r\n      } else {\r\n        totalSupplyAdjusted = totalSupply\r\n      }\r\n    }\r\n\r\n    return CurrencyAmount.fromRawAmount(\r\n      token,\r\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\r\n    )\r\n  }\r\n}\r\n","import { BigintIsh } from '../types'\r\nimport { Fraction } from './Fraction'\r\nimport JSBI from 'jsbi'\r\nimport { Rounding } from '../enums'\r\n\r\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\r\n\r\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\r\nfunction toPercent(fraction: Fraction): Percent {\r\n  return new Percent(fraction.numerator, fraction.denominator)\r\n}\r\n\r\nexport class Percent extends Fraction {\r\n  /**\r\n   * This boolean prevents a fraction from being interpreted as a Percent\r\n   */\r\n  public readonly isPercent: true = true\r\n\r\n  add(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.add(other))\r\n  }\r\n\r\n  subtract(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.subtract(other))\r\n  }\r\n\r\n  multiply(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.multiply(other))\r\n  }\r\n\r\n  divide(other: Fraction | BigintIsh): Percent {\r\n    return toPercent(super.divide(other))\r\n  }\r\n\r\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\r\n  }\r\n\r\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\r\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\r\n  }\r\n}\r\n","import { Currency } from './Currency'\r\nimport { Pair } from './Pair'\r\nimport { Price } from './Price'\r\nimport { Token } from './Token'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport class Route<TInput extends Currency, TOutput extends Currency> {\r\n  public readonly pairs: Pair[]\r\n  public readonly path: Token[]\r\n  public readonly input: TInput\r\n  public readonly output: TOutput\r\n\r\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    const chainId: number = pairs[0].chainId\r\n    invariant(\r\n      pairs.every((pair) => pair.chainId === chainId),\r\n      'CHAIN_IDS'\r\n    )\r\n\r\n    const wrappedInput = input.wrapped\r\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\r\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\r\n\r\n    const path: Token[] = [wrappedInput]\r\n    for (const [i, pair] of pairs.entries()) {\r\n      const currentInput = path[i]\r\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\r\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\r\n      path.push(output)\r\n    }\r\n\r\n    this.pairs = pairs\r\n    this.path = path\r\n    this.input = input\r\n    this.output = output\r\n  }\r\n\r\n  private _midPrice: Price<TInput, TOutput> | null = null\r\n\r\n  public get midPrice(): Price<TInput, TOutput> {\r\n    if (this._midPrice !== null) return this._midPrice\r\n    const prices: Price<Currency, Currency>[] = []\r\n    for (const [i, pair] of this.pairs.entries()) {\r\n      prices.push(\r\n        this.path[i].equals(pair.token0)\r\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\r\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\r\n      )\r\n    }\r\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\r\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\r\n  }\r\n\r\n  public get chainId(): number {\r\n    return this.pairs[0].chainId\r\n  }\r\n}\r\n","import { Currency } from '../entities/Currency'\r\nimport { CurrencyAmount } from '../entities/CurrencyAmount'\r\nimport { Percent } from '../entities/Percent'\r\nimport { Price } from '../entities/Price'\r\n\r\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\r\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\r\n  midPrice: Price<TBase, TQuote>,\r\n  inputAmount: CurrencyAmount<TBase>,\r\n  outputAmount: CurrencyAmount<TQuote>\r\n): Percent {\r\n  const quotedOutputAmount = midPrice.quote(inputAmount)\r\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\r\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\r\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\r\n}\r\n","import invariant from 'tiny-invariant'\r\n\r\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\r\n// `maxSize` by removing the last item\r\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\r\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\r\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\r\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\r\n\r\n  // short circuit first item add\r\n  if (items.length === 0) {\r\n    items.push(add)\r\n    return null\r\n  } else {\r\n    const isFull = items.length === maxSize\r\n    // short circuit if full and the additional item does not come before the last item\r\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\r\n      return add\r\n    }\r\n\r\n    let lo = 0,\r\n      hi = items.length\r\n\r\n    while (lo < hi) {\r\n      const mid = (lo + hi) >>> 1\r\n      if (comparator(items[mid], add) <= 0) {\r\n        lo = mid + 1\r\n      } else {\r\n        hi = mid\r\n      }\r\n    }\r\n    items.splice(lo, 0, add)\r\n    return isFull ? items.pop()! : null\r\n  }\r\n}\r\n","import { ONE, ZERO } from '../constants'\r\n\r\nimport { Currency } from './Currency'\r\nimport { CurrencyAmount } from './CurrencyAmount'\r\nimport { Fraction } from './Fraction'\r\nimport { Pair } from './Pair'\r\nimport { Percent } from './Percent'\r\nimport { Price } from './Price'\r\nimport { Route } from './Route'\r\nimport { Token } from './Token'\r\nimport { TradeType } from '../enums/TradeType'\r\nimport { computePriceImpact } from '../functions/computePriceImpact'\r\nimport invariant from 'tiny-invariant'\r\nimport { sortedInsert } from '../functions/sortedInsert'\r\n\r\n// minimal interface so the input output comparator may be shared across types\r\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\r\n  readonly inputAmount: CurrencyAmount<TInput>\r\n  readonly outputAmount: CurrencyAmount<TOutput>\r\n}\r\n\r\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\r\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\r\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\r\n  a: InputOutput<TInput, TOutput>,\r\n  b: InputOutput<TInput, TOutput>\r\n): number {\r\n  // must have same input and output token for comparison\r\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\r\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\r\n  if (a.outputAmount.equalTo(b.outputAmount)) {\r\n    if (a.inputAmount.equalTo(b.inputAmount)) {\r\n      return 0\r\n    }\r\n    // trade A requires less input than trade B, so A should come first\r\n    if (a.inputAmount.lessThan(b.inputAmount)) {\r\n      return -1\r\n    } else {\r\n      return 1\r\n    }\r\n  } else {\r\n    // tradeA has less output than trade B, so should come second\r\n    if (a.outputAmount.lessThan(b.outputAmount)) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  }\r\n}\r\n\r\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\r\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\r\n  a: Trade<TInput, TOutput, TTradeType>,\r\n  b: Trade<TInput, TOutput, TTradeType>\r\n) {\r\n  const ioComp = inputOutputComparator(a, b)\r\n  if (ioComp !== 0) {\r\n    return ioComp\r\n  }\r\n\r\n  // consider lowest slippage next, since these are less likely to fail\r\n  if (a.priceImpact.lessThan(b.priceImpact)) {\r\n    return -1\r\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\r\n    return 1\r\n  }\r\n\r\n  // finally consider the number of hops since each hop costs gas\r\n  return a.route.path.length - b.route.path.length\r\n}\r\n\r\nexport interface BestTradeOptions {\r\n  // how many results to return\r\n  maxNumResults?: number\r\n  // the maximum number of hops a trade should contain\r\n  maxHops?: number\r\n}\r\n\r\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\r\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\r\n  /**\r\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\r\n   */\r\n  public readonly route: Route<TInput, TOutput>\r\n  /**\r\n   * The type of the trade, either exact in or exact out.\r\n   */\r\n  public readonly tradeType: TTradeType\r\n  /**\r\n   * The input amount for the trade assuming no slippage.\r\n   */\r\n  public readonly inputAmount: CurrencyAmount<TInput>\r\n  /**\r\n   * The output amount for the trade assuming no slippage.\r\n   */\r\n  public readonly outputAmount: CurrencyAmount<TOutput>\r\n  /**\r\n   * The price expressed in terms of output amount/input amount.\r\n   */\r\n  public readonly executionPrice: Price<TInput, TOutput>\r\n  /**\r\n   * The percent difference between the mid price before the trade and the trade execution price.\r\n   */\r\n  public readonly priceImpact: Percent\r\n\r\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\r\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountIn: CurrencyAmount<TInput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\r\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\r\n  }\r\n\r\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\r\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\r\n    route: Route<TInput, TOutput>,\r\n    amountOut: CurrencyAmount<TOutput>\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\r\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\r\n  }\r\n\r\n  public constructor(\r\n    route: Route<TInput, TOutput>,\r\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\r\n    tradeType: TTradeType\r\n  ) {\r\n    this.route = route\r\n    this.tradeType = tradeType\r\n\r\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\r\n    if (tradeType === TradeType.EXACT_INPUT) {\r\n      invariant(amount.currency.equals(route.input), 'INPUT')\r\n      tokenAmounts[0] = amount.wrapped\r\n      for (let i = 0; i < route.path.length - 1; i++) {\r\n        const pair = route.pairs[i]\r\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\r\n        tokenAmounts[i + 1] = outputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.output,\r\n        tokenAmounts[tokenAmounts.length - 1].numerator,\r\n        tokenAmounts[tokenAmounts.length - 1].denominator\r\n      )\r\n    } else {\r\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\r\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\r\n      for (let i = route.path.length - 1; i > 0; i--) {\r\n        const pair = route.pairs[i - 1]\r\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\r\n        tokenAmounts[i - 1] = inputAmount\r\n      }\r\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\r\n        route.input,\r\n        tokenAmounts[0].numerator,\r\n        tokenAmounts[0].denominator\r\n      )\r\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\r\n    }\r\n    this.executionPrice = new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.inputAmount.quotient,\r\n      this.outputAmount.quotient\r\n    )\r\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\r\n  }\r\n\r\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\r\n      return this.outputAmount\r\n    } else {\r\n      const slippageAdjustedAmountOut = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .invert()\r\n        .multiply(this.outputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\r\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\r\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\r\n    if (this.tradeType === TradeType.EXACT_INPUT) {\r\n      return this.inputAmount\r\n    } else {\r\n      const slippageAdjustedAmountIn = new Fraction(ONE)\r\n        .add(slippageTolerance)\r\n        .multiply(this.inputAmount.quotient).quotient\r\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyAmountIn: CurrencyAmount<TInput>,\r\n    currencyOut: TOutput,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountIn = nextAmountIn.wrapped\r\n    const tokenOut = currencyOut.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountOut: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountOut] = pair.getOutputAmount(amountIn)\r\n      } catch (error) {\r\n        // input too low\r\n        if (error.isInsufficientInputAmountError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the output token, so this is the final trade of one of the paths\r\n      if (amountOut.currency.equals(tokenOut)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\r\n            currencyAmountIn,\r\n            TradeType.EXACT_INPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactIn(\r\n          pairsExcludingThisPair,\r\n          currencyAmountIn,\r\n          currencyOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [...currentPairs, pair],\r\n          amountOut,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n\r\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\r\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\r\n    return new Price(\r\n      this.inputAmount.currency,\r\n      this.outputAmount.currency,\r\n      this.maximumAmountIn(slippageTolerance).quotient,\r\n      this.minimumAmountOut(slippageTolerance).quotient\r\n    )\r\n  }\r\n\r\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\r\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\r\n    pairs: Pair[],\r\n    currencyIn: TInput,\r\n    currencyAmountOut: CurrencyAmount<TOutput>,\r\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\r\n    // used in recursion.\r\n    currentPairs: Pair[] = [],\r\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\r\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\r\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\r\n    invariant(pairs.length > 0, 'PAIRS')\r\n    invariant(maxHops > 0, 'MAX_HOPS')\r\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\r\n\r\n    const amountOut = nextAmountOut.wrapped\r\n    const tokenIn = currencyIn.wrapped\r\n    for (let i = 0; i < pairs.length; i++) {\r\n      const pair = pairs[i]\r\n      // pair irrelevant\r\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\r\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\r\n\r\n      let amountIn: CurrencyAmount<Token>\r\n      try {\r\n        ;[amountIn] = pair.getInputAmount(amountOut)\r\n      } catch (error) {\r\n        // not enough liquidity in this pair\r\n        if (error.isInsufficientReservesError) {\r\n          continue\r\n        }\r\n        throw error\r\n      }\r\n      // we have arrived at the input token, so this is the first trade of one of the paths\r\n      if (amountIn.currency.equals(tokenIn)) {\r\n        sortedInsert(\r\n          bestTrades,\r\n          new Trade(\r\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\r\n            currencyAmountOut,\r\n            TradeType.EXACT_OUTPUT\r\n          ),\r\n          maxNumResults,\r\n          tradeComparator\r\n        )\r\n      } else if (maxHops > 1 && pairs.length > 1) {\r\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\r\n\r\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\r\n        Trade.bestTradeExactOut(\r\n          pairsExcludingThisPair,\r\n          currencyIn,\r\n          currencyAmountOut,\r\n          {\r\n            maxNumResults,\r\n            maxHops: maxHops - 1,\r\n          },\r\n          [pair, ...currentPairs],\r\n          amountIn,\r\n          bestTrades\r\n        )\r\n      }\r\n    }\r\n\r\n    return bestTrades\r\n  }\r\n}\r\n","import { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\r\n\r\n// account is not optional\r\nexport function getSigner(library: Web3Provider, account: string): JsonRpcSigner {\r\n  return library.getSigner(account).connectUnchecked()\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library: Web3Provider, account?: string): Web3Provider | JsonRpcSigner {\r\n  return account ? getSigner(library, account) : library\r\n}\r\n","import JSBI from 'jsbi'\r\n\r\nimport { ONE, ZERO } from '../constants'\r\nimport { Rebase } from '../interfaces'\r\n\r\nexport function rebase(value: JSBI, from: JSBI, to: JSBI): JSBI {\r\n  return from ? JSBI.divide(JSBI.multiply(value, to), from) : ZERO\r\n}\r\n\r\nexport function toElastic(total: Rebase, base: JSBI, roundUp: boolean): JSBI {\r\n  let elastic: JSBI\r\n  if (JSBI.equal(total.base, ZERO)) {\r\n    elastic = base\r\n  } else {\r\n    elastic = JSBI.divide(JSBI.multiply(base, total.elastic), total.base)\r\n    if (roundUp && JSBI.lessThan(JSBI.divide(JSBI.multiply(elastic, total.base), total.elastic), base)) {\r\n      elastic = JSBI.add(elastic, ONE)\r\n    }\r\n  }\r\n\r\n  return elastic\r\n}\r\n","import { SOLIDITY_TYPE_MAXIMA, ZERO } from '../constants'\r\nimport { SolidityType } from '../enums'\r\n\r\nimport JSBI from 'jsbi'\r\nimport invariant from 'tiny-invariant'\r\n\r\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\r\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\r\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\r\n}\r\n","import { Currency } from './entities/Currency'\r\nimport { CurrencyAmount } from './entities/CurrencyAmount'\r\nimport { Percent } from './entities/Percent'\r\nimport { Token } from './entities/Token'\r\nimport { Trade } from './entities/Trade'\r\nimport { TradeType } from './enums/TradeType'\r\nimport invariant from 'tiny-invariant'\r\nimport { validateAndParseAddress } from './functions/validateAndParseAddress'\r\n\r\n/**\r\n * Options for producing the arguments to send call to the router.\r\n */\r\nexport interface TradeOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  allowedSlippage: Percent\r\n  /**\r\n   * How long the swap is valid until it expires, in seconds.\r\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\r\n   * are generated.\r\n   */\r\n  ttl: number\r\n  /**\r\n   * The account that should receive the output of the swap.\r\n   */\r\n  recipient: string\r\n\r\n  /**\r\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\r\n   */\r\n  feeOnTransfer?: boolean\r\n}\r\n\r\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\r\n  /**\r\n   * When the transaction expires.\r\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\r\n   */\r\n  deadline: number\r\n}\r\n\r\n/**\r\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\r\n */\r\nexport interface SwapParameters {\r\n  /**\r\n   * The method to call on the Uniswap V2 Router.\r\n   */\r\n  methodName: string\r\n  /**\r\n   * The arguments to pass to the method, all hex encoded.\r\n   */\r\n  args: (string | string[])[]\r\n  /**\r\n   * The amount of wei to send in hex.\r\n   */\r\n  value: string\r\n}\r\n\r\nexport function toHex(currencyAmount: CurrencyAmount<Currency>) {\r\n  return `0x${currencyAmount.quotient.toString(16)}`\r\n}\r\n\r\nconst ZERO_HEX = '0x0'\r\n\r\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\r\nexport abstract class Router {\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trade: Trade<Currency, Currency, TradeType>,\r\n    options: TradeOptions | TradeOptionsDeadline\r\n  ): SwapParameters {\r\n    const etherIn = trade.inputAmount.currency.isNative\r\n    const etherOut = trade.outputAmount.currency.isNative\r\n    // the router does not support both ether in and out\r\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\r\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\r\n\r\n    const to: string = validateAndParseAddress(options.recipient)\r\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\r\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\r\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\r\n    const deadline =\r\n      'ttl' in options\r\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\r\n        : `0x${options.deadline.toString(16)}`\r\n\r\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\r\n\r\n    let methodName: string\r\n    let args: (string | string[])[]\r\n    let value: string\r\n    switch (trade.tradeType) {\r\n      case TradeType.EXACT_INPUT:\r\n        if (etherIn) {\r\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\r\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = useFeeOnTransfer\r\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\r\n            : 'swapExactTokensForTokens'\r\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n          args = [amountIn, amountOut, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n      case TradeType.EXACT_OUTPUT:\r\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\r\n        if (etherIn) {\r\n          methodName = 'swapETHForExactTokens'\r\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, path, to, deadline]\r\n          value = amountIn\r\n        } else if (etherOut) {\r\n          methodName = 'swapTokensForExactETH'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        } else {\r\n          methodName = 'swapTokensForExactTokens'\r\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n          args = [amountOut, amountIn, path, to, deadline]\r\n          value = ZERO_HEX\r\n        }\r\n        break\r\n    }\r\n    return {\r\n      methodName,\r\n      args,\r\n      value,\r\n    }\r\n  }\r\n}\r\n"],"names":["ChainId","ChainKey","Rounding","SolidityType","TradeType","TradeVersion","SUSHI_ADDRESS","_SUSHI_ADDRESS","ETHEREUM","ROPSTEN","RINKEBY","GÖRLI","KOVAN","FANTOM","MATIC","XDAI","BSC","ARBITRUM","AVALANCHE","HECO","HARMONY","OKEX","OKEX_TESTNET","PALM","PALM_TESTNET","MOONRIVER","CELO","TELOS","FUSE","MOONBEAM","KAVA","METIS","USDC_ADDRESS","_USDC_ADDRESS","SEPOLIA","MATIC_TESTNET","RAIL","RAIL_TESTNET","OPTIMISM","ARBITRUM_NOVA","USD_ADDRESS","_USD_ADDRESS","WETH9_ADDRESS","_WETH9_ADDRESS","ARBITRUM_TESTNET","WNATIVE_ADDRESS","_WNATIVE_ADDRESS","FANTOM_TESTNET","BSC_TESTNET","MOONBEAM_TESTNET","AVALANCHE_TESTNET","HECO_TESTNET","HARMONY_TESTNET","BOBA_AVAX","DAI_ADDRESS","_DAI_ADDRESS","USDT_ADDRESS","_USDT_ADDRESS","MIM_ADDRESS","_MIM_ADDRESS","FRAX_ADDRESS","_FRAX_ADDRESS","FACTORY_ADDRESS","_FACTORY_ADDRESS","ROUTER_ADDRESS","_ROUTER_ADDRESS","MASTERCHEF_ADDRESS","_MASTERCHEF_ADDRESS","BAR_ADDRESS","_BAR_ADDRESS","MAKER_ADDRESS","_MAKER_ADDRESS","TIMELOCK_ADDRESS","_TIMELOCK_ADDRESS","BENTOBOX_ADDRESS","_BENTOBOX_ADDRESS","KASHI_ADDRESS","_KASHI_ADDRESS","SUSHISWAP_SWAPPER_ADDRESS","_SUSHISWAP_SWAPPER_AD","SUSHISWAP_MULTISWAPPER_ADDRESS","_SUSHISWAP_MULTISWAPP","SUSHISWAP_MULTI_EXACT_SWAPPER_ADDRESS","_SUSHISWAP_MULTI_EXAC","PEGGED_ORACLE_ADDRESS","SUSHISWAP_TWAP_0_ORACLE_ADDRESS","SUSHISWAP_TWAP_1_ORACLE_ADDRESS","CHAINLINK_ORACLE_ADDRESS","_CHAINLINK_ORACLE_ADD","BORING_HELPER_ADDRESS","_BORING_HELPER_ADDRES","MINICHEF_ADDRESS","_MINICHEF_ADDRESS","MASTERCHEF_V2_ADDRESS","_MASTERCHEF_V2_ADDRES","ENS_REGISTRAR_ADDRESS","_ENS_REGISTRAR_ADDRES","ZAPPER_ADDRESS","_ZAPPER_ADDRESS","MERKLE_DISTRIBUTOR_ADDRESS","_MERKLE_DISTRIBUTOR_A","MULTICALL2_ADDRESS","_MULTICALL2_ADDRESS","BALANCE_FETCHER_ADDRESS","_BALANCE_FETCHER_ADDR","MULTISIG_ADDRESS","_MULTISIG_ADDRESS","CHAIN_KEY","_CHAIN_KEY","INIT_CODE_HASH","_INIT_CODE_HASH","AbstractCurrency","chainId","decimals","symbol","name","Number","isSafeInteger","process","env","NODE_ENV","invariant","isInteger","NativeCurrency","_AbstractCurrency","_inheritsLoose","_this","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","Token","call","_proto","prototype","equals","other","isToken","sortsBefore","toLowerCase","_createClass","key","get","currencyEquals","currencyA","currencyB","USDC","_USDC","USD","_extends","_extends2","WETH9","_WETH","WNATIVE","_WNATIVE","SUSHI","_SUSHI","Avalanche","_NativeCurrency","onChain","_this$_cache$chainId","_cache","isNative","wnative","Binance","Celo","wcelo","Ether","_this$_etherCache$cha","_etherCache","weth9","Fantom","Harmony","Heco","Matic","Movr","Okex","xDai","Rails","wrails","Palm","Fuse","Telos","Glmr","Kava","Metis","Boba","NATIVE","_NATIVE","MaxUint256","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","MINIMUM_LIQUIDITY","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","constructor","setPrototypeOf","_assertThisInitialized","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","Decimal","toFormat","_Decimal","Big","_Big","strict","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","RoundDown","RoundHalfUp","RoundUp","Fraction","numerator","denominator","tryParseFraction","fractionish","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","_Fraction","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","serialize","wrapped","Price","baseCurrency","quoteCurrency","_len","arguments","length","args","Array","_key","result","quoteAmount","baseAmount","_ref","scalar","fraction","quote","currencyAmount","adjustedForDecimals","computePairAddress","factoryAddress","tokenA","tokenB","_ref2","token0","token1","getCreate2Address","keccak256","pack","MAX_SAFE_INTEGER","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","minimum","lowest","undefined","i","LT","maximum","highest","GT","difference","a","b","Pair","currencyAmountA","currencyAmountB","currencyAmounts","liquidityToken","tokenAmounts","involvesToken","token","priceOf","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","tokenAmountA","tokenAmountB","liquidity","amount0","amount1","console","log","kLast","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","ONE_HUNDRED","toPercent","Percent","Route","pairs","input","output","every","pair","wrappedInput","path","_iterator","_createForOfIteratorHelperLoose","entries","_step","done","_step$value","currentInput","push","_midPrice","prices","_iterator2","_step2","_step2$value","reduced","slice","reduce","accumulator","currentValue","computePriceImpact","midPrice","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","splice","pop","inputOutputComparator","tradeComparator","ioComp","route","Trade","amount","tradeType","EXACT_INPUT","_pair$getOutputAmount","_pair$getInputAmount","executionPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","nextAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","_pair$getOutputAmount2","isInsufficientInputAmountError","concat","pairsExcludingThisPair","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","nextAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","_pair$getInputAmount2","isInsufficientReservesError","getSigner","library","account","connectUnchecked","getProviderOrSigner","rebase","from","to","toElastic","total","base","roundUp","elastic","validateSolidityTypeInstance","solidityType","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","recipient","allowedSlippage","map","deadline","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName"],"mappings":";;;;;;;;;;IAAYA;AAAZ,WAAYA,OAAO;EACjBA,6CAAY;EACZA,kDAAkB;EAClBA,wCAAW;EACXA,yDAAoB;EACpBA,2CAAW;EACXA,2CAAW;EACXA,6CAAS;EACTA,wCAAU;EACVA,yCAAW;EACXA,2DAAqB;EACrBA,2CAAY;EACZA,4DAAqB;EACrBA,uCAAU;EACVA,oCAAQ;EACRA,oDAAgB;EAChBA,iDAAgB;EAChBA,0EAAiC;EACjCA,gEAAuB;EACvBA,mDAAiB;EACjBA,mEAAyB;EACzBA,uCAAU;EACVA,uDAAkB;EAClBA,oDAAoB;EACpBA,oEAA4B;EAC5BA,sCAAS;EACTA,sDAAiB;EACjBA,yCAAY;EACZA,+CAAkB;EAClBA,+DAA0B;EAC1BA,kDAAgB;EAChBA,uCAAU;EACVA,wCAAU;EACVA,+CAAe;EACfA,gDAAe;EACfA,8CAAa;EACbA,wCAAW;EACXA,0CAAY;EACZA,2DAAqB;EACrBA,mDAAiB;AACnB,CAAC,EAxCWA,OAAO,KAAPA,OAAO;;ICAPC,QAsCX;AAtCD,WAAYA,QAAQ;EAClBA,iCAAqB;EACrBA,iDAAqC;EACrCA,mCAAuB;EACvBA,kDAAsC;EACtCA,uBAAW;EACXA,uCAA2B;EAC3BA,yBAAa;EACbA,kCAAsB;EACtBA,kCAAsB;EACtBA,iCAAqB;EACrBA,6BAAiB;EACjBA,6CAAiC;EACjCA,yBAAa;EACbA,+BAAgB;EAChBA,+BAAmB;EACnBA,+CAAmC;EACnCA,yBAAa;EACbA,yCAA6B;EAC7BA,2BAAe;EACfA,+BAAmB;EACnBA,6BAAiB;EACjBA,2CAA+B;EAC/BA,iDAAqC;EACrCA,mCAAuB;EACvBA,yBAAa;EACbA,yCAA6B;EAC7BA,yBAAa;EACbA,yCAA6B;EAC7BA,+BAAmB;EACnBA,2BAAe;EACfA,yBAAa;EACbA,iCAAqB;EACrBA,iCAAqB;EACrBA,yBAAa;EACbA,2BAAe;EACfA,2CAA+B;EAC/BA,mCAAuB;AACzB,CAAC,EAtCWA,QAAQ,KAARA,QAAQ;;ICARC,QAIX;AAJD,WAAYA,QAAQ;EAClBA,mDAAc;EACdA,yDAAiB;EACjBA,+CAAY;AACd,CAAC,EAJWA,QAAQ,KAARA,QAAQ;;ICARC,YAGX;AAHD,WAAYA,YAAY;EACpBA,+BAAe;EACfA,mCAAmB;AACvB,CAAC,EAHWA,YAAY,KAAZA,YAAY;;ICAZC,SAGX;AAHD,WAAYA,SAAS;EACnBA,uDAAW;EACXA,yDAAY;AACd,CAAC,EAHWA,SAAS,KAATA,SAAS;;ICATC,YAGX;AAHD,WAAYA,YAAY;EACtBA,qDAAO;EACPA,qDAAO;AACT,CAAC,EAHWA,YAAY,KAAZA,YAAY;;;ACCxB,IAEaC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvBP,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAD,cAAA,CAC/DP,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAF,cAAA,CAC9DP,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAH,cAAA,CAC9DP,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAJ,cAAA,CAC5DP,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAL,cAAA,CAC5DP,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAN,cAAA,CAC7DP,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAP,cAAA,CAC5DP,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAR,cAAA,CAC3DP,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAT,cAAA,CAC1DP,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAV,cAAA,CAC/DP,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAX,cAAA,CAChEP,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAZ,cAAA,CAC3DP,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAb,cAAA,CAC9DP,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAd,cAAA,CAC3DP,OAAO,CAACsB,YAAY,IAAG,EAAE,EAAAf,cAAA,CACzBP,OAAO,CAACuB,IAAI,IAAG,EAAE,EAAAhB,cAAA,CACjBP,OAAO,CAACwB,YAAY,IAAG,EAAE,EAAAjB,cAAA,CACzBP,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAlB,cAAA,CAChEP,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAnB,cAAA,CAC3DP,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAApB,cAAA,CAC5DP,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAArB,cAAA,CAC3DP,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAtB,cAAA,CAC/DP,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAAvB,cAAA,CAC3DP,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAAxB,cAAA,CAC9D;AAED,IAAayB,YAAY,IAAAC,aAAA,OAAAA,aAAA,CACtBjC,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAyB,aAAA,CAC/DjC,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAwB,aAAA,CAC9DjC,OAAO,CAACkC,OAAO,IAAG,4CAA4C,EAAAD,aAAA,CAC9DjC,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAqB,aAAA,CAC5DjC,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAmB,aAAA,CAC5DjC,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAAF,aAAA,CACpEjC,OAAO,CAACoC,IAAI,IAAG,4CAA4C,EAAAH,aAAA,CAC3DjC,OAAO,CAACqC,YAAY,IAAG,4CAA4C,EAAAJ,aAAA,CACnEjC,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAoB,aAAA,CAC7DjC,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAiB,aAAA,CAC1DjC,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAa,aAAA,CAC9DjC,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAc,aAAA,CAC3DjC,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAY,aAAA,CAC3DjC,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAkB,aAAA,CAC3DjC,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAgB,aAAA,CAC/DjC,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAe,aAAA,CAChEjC,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAQ,aAAA,CAChEjC,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAO,aAAA,CAC3DjC,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAAM,aAAA,CAC5DjC,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAK,aAAA,CAC3DjC,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAI,aAAA,CAC/DjC,OAAO,CAACsC,QAAQ,IAAG,4CAA4C,EAAAL,aAAA,CAC/DjC,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAAG,aAAA,CAC3DjC,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAAE,aAAA,CAC5DjC,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAAN,aAAA,CACtE;AAED,IAAaO,WAAW,IAAAC,YAAA,OAAAA,YAAA,CACrBzC,OAAO,CAACQ,QAAQ,IAAGwB,YAAY,CAAChC,OAAO,CAACQ,QAAQ,CAAC,EAAAiC,YAAA,CACjDzC,OAAO,CAACS,OAAO,IAAGuB,YAAY,CAAChC,OAAO,CAACS,OAAO,CAAC,EAAAgC,YAAA,CAC/CzC,OAAO,CAACY,KAAK,IAAGoB,YAAY,CAAChC,OAAO,CAACY,KAAK,CAAC,EAAA6B,YAAA,CAC3CzC,OAAO,CAACc,KAAK,IAAGkB,YAAY,CAAChC,OAAO,CAACc,KAAK,CAAC,EAAA2B,YAAA,CAC3CzC,OAAO,CAACmC,aAAa,IAAGH,YAAY,CAAChC,OAAO,CAACmC,aAAa,CAAC,EAAAM,YAAA,CAC3DzC,OAAO,CAACa,MAAM,IAAGmB,YAAY,CAAChC,OAAO,CAACa,MAAM,CAAC,EAAA4B,YAAA,CAC7CzC,OAAO,CAACgB,GAAG,IAAGgB,YAAY,CAAChC,OAAO,CAACgB,GAAG,CAAC,EAAAyB,YAAA,CACvCzC,OAAO,CAACoB,OAAO,IAAGY,YAAY,CAAChC,OAAO,CAACoB,OAAO,CAAC,EAAAqB,YAAA,CAC/CzC,OAAO,CAACmB,IAAI,IAAGa,YAAY,CAAChC,OAAO,CAACmB,IAAI,CAAC,EAAAsB,YAAA,CACzCzC,OAAO,CAACqB,IAAI,IAAGW,YAAY,CAAChC,OAAO,CAACqB,IAAI,CAAC,EAAAoB,YAAA,CACzCzC,OAAO,CAACe,IAAI,IAAGiB,YAAY,CAAChC,OAAO,CAACe,IAAI,CAAC,EAAA0B,YAAA,CACzCzC,OAAO,CAACiB,QAAQ,IAAGe,YAAY,CAAChC,OAAO,CAACiB,QAAQ,CAAC,EAAAwB,YAAA,CACjDzC,OAAO,CAACkB,SAAS,IAAGc,YAAY,CAAChC,OAAO,CAACkB,SAAS,CAAC,EAAAuB,YAAA,CACnDzC,OAAO,CAACyB,SAAS,IAAGO,YAAY,CAAChC,OAAO,CAACyB,SAAS,CAAC,EAAAgB,YAAA,CACnDzC,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAe,YAAA,CAC3DzC,OAAO,CAAC2B,KAAK,IAAGK,YAAY,CAAChC,OAAO,CAAC2B,KAAK,CAAC,EAAAc,YAAA,CAC3CzC,OAAO,CAAC4B,IAAI,IAAGI,YAAY,CAAChC,OAAO,CAAC4B,IAAI,CAAC,EAAAa,YAAA,CACzCzC,OAAO,CAAC6B,QAAQ,IAAGG,YAAY,CAAChC,OAAO,CAAC6B,QAAQ,CAAC,EAAAY,YAAA,CACjDzC,OAAO,CAACsC,QAAQ,IAAGN,YAAY,CAAChC,OAAO,CAACsC,QAAQ,CAAC,EAAAG,YAAA,CACjDzC,OAAO,CAAC8B,IAAI,IAAGE,YAAY,CAAChC,OAAO,CAAC8B,IAAI,CAAC,EAAAW,YAAA,CACzCzC,OAAO,CAAC+B,KAAK,IAAGC,YAAY,CAAChC,OAAO,CAAC+B,KAAK,CAAC,EAAAU,YAAA,CAC3CzC,OAAO,CAACuC,aAAa,IAAGP,YAAY,CAAChC,OAAO,CAACuC,aAAa,CAAC,EAAAE,YAAA,CAC7D;AAED,IAAaC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvB3C,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAmC,cAAA,CAC/D3C,OAAO,CAACkC,OAAO,IAAG,4CAA4C,EAAAS,cAAA,CAC9D3C,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAkC,cAAA,CAC9D3C,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAiC,cAAA,CAC9D3C,OAAO,CAACoC,IAAI,IAAG,4CAA4C,EAAAO,cAAA,CAC3D3C,OAAO,CAACqC,YAAY,IAAG,4CAA4C,EAAAM,cAAA,CACnE3C,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAgC,cAAA,CAC5D3C,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA+B,cAAA,CAC5D3C,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA0B,cAAA,CAC/D3C,OAAO,CAAC4C,gBAAgB,IAAG,4CAA4C,EAAAD,cAAA,CACvE3C,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA2B,cAAA,CAC1D3C,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA8B,cAAA,CAC7D3C,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA6B,cAAA,CAC5D3C,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAAQ,cAAA,CACpE3C,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAsB,cAAA,CAC3D3C,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAwB,cAAA,CAC3D3C,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAuB,cAAA,CAC9D3C,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA4B,cAAA,CAC3D3C,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAyB,cAAA,CAChE3C,OAAO,CAACuB,IAAI,IAAG,4CAA4C,EAAAoB,cAAA,CAC3D3C,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAiB,cAAA,CAC3D3C,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAkB,cAAA,CAChE3C,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAAgB,cAAA,CAC5D3C,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAe,cAAA,CAC3D3C,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAc,cAAA,CAC/D3C,OAAO,CAACsC,QAAQ,IAAG,4CAA4C,EAAAK,cAAA,CAC/D3C,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAAa,cAAA,CAC3D3C,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAAY,cAAA,CAC5D3C,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAAI,cAAA,CACtE;AAED,IAAaE,eAAe,IAAAC,gBAAA,OAAAA,gBAAA,CACzB9C,OAAO,CAACQ,QAAQ,IAAGkC,aAAa,CAAC1C,OAAO,CAACQ,QAAQ,CAAC,EAAAsC,gBAAA,CAClD9C,OAAO,CAACS,OAAO,IAAGiC,aAAa,CAAC1C,OAAO,CAACS,OAAO,CAAC,EAAAqC,gBAAA,CAChD9C,OAAO,CAACU,OAAO,IAAGgC,aAAa,CAAC1C,OAAO,CAACU,OAAO,CAAC,EAAAoC,gBAAA,CAChD9C,OAAO,CAACkC,OAAO,IAAGQ,aAAa,CAAC1C,OAAO,CAACkC,OAAO,CAAC,EAAAY,gBAAA,CAChD9C,OAAO,CAACW,KAAK,IAAG+B,aAAa,CAAC1C,OAAO,CAACW,KAAK,CAAC,EAAAmC,gBAAA,CAC5C9C,OAAO,CAACoC,IAAI,IAAGM,aAAa,CAAC1C,OAAO,CAACoC,IAAI,CAAC,EAAAU,gBAAA,CAC1C9C,OAAO,CAACqC,YAAY,IAAGK,aAAa,CAAC1C,OAAO,CAACqC,YAAY,CAAC,EAAAS,gBAAA,CAC1D9C,OAAO,CAACY,KAAK,IAAG8B,aAAa,CAAC1C,OAAO,CAACY,KAAK,CAAC,EAAAkC,gBAAA,CAC5C9C,OAAO,CAACsC,QAAQ,IAAGI,aAAa,CAAC1C,OAAO,CAACsC,QAAQ,CAAC,EAAAQ,gBAAA,CAClD9C,OAAO,CAACiB,QAAQ,IAAGyB,aAAa,CAAC1C,OAAO,CAACiB,QAAQ,CAAC,EAAA6B,gBAAA,CAClD9C,OAAO,CAAC4C,gBAAgB,IAAGF,aAAa,CAAC1C,OAAO,CAAC4C,gBAAgB,CAAC,EAAAE,gBAAA,CAClE9C,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAiC,gBAAA,CAC7D9C,OAAO,CAAC+C,cAAc,IAAG,4CAA4C,EAAAD,gBAAA,CACrE9C,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAgC,gBAAA,CAC5D9C,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAAW,gBAAA,CACpE9C,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA+B,gBAAA,CAC3D9C,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA8B,gBAAA,CAC1D9C,OAAO,CAACgD,WAAW,IAAG,4CAA4C,EAAAF,gBAAA,CAClE9C,OAAO,CAACiD,gBAAgB,IAAG,4CAA4C,EAAAH,gBAAA,CACvE9C,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA4B,gBAAA,CAChE9C,OAAO,CAACkD,iBAAiB,IAAG,4CAA4C,EAAAJ,gBAAA,CACxE9C,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAA2B,gBAAA,CAC3D9C,OAAO,CAACmD,YAAY,IAAG,4CAA4C,EAAAL,gBAAA,CACnE9C,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAA0B,gBAAA,CAC9D9C,OAAO,CAACoD,eAAe,IAAG,4CAA4C,EAAAN,gBAAA,CACtE9C,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAyB,gBAAA,CAC3D9C,OAAO,CAACsB,YAAY,IAAG,4CAA4C,EAAAwB,gBAAA,CACnE9C,OAAO,CAACuB,IAAI,IAAG,4CAA4C,EAAAuB,gBAAA,CAC3D9C,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAoB,gBAAA,CAC3D9C,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAqB,gBAAA,CAChE9C,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAkB,gBAAA,CAC3D9C,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAAmB,gBAAA,CAC5D9C,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAiB,gBAAA,CAC/D9C,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAAgB,gBAAA,CAC3D9C,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAAe,gBAAA,CAC5D9C,OAAO,CAACuC,aAAa,IAAGG,aAAa,CAAC1C,OAAO,CAACuC,aAAa,CAAC,EAAAO,gBAAA,CAC5D9C,OAAO,CAACqD,SAAS,IAAG,4CAA4C,EAAAP,gBAAA,CAClE;AAED,IAAaQ,WAAW,IAAAC,YAAA,OAAAA,YAAA,CACrBvD,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA+C,YAAA,CAC/DvD,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA8C,YAAA,CAC9DvD,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA2C,YAAA,CAC5DvD,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAyC,YAAA,CAC5DvD,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA0C,YAAA,CAC7DvD,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAuC,YAAA,CAC1DvD,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAmC,YAAA,CAC9DvD,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAoC,YAAA,CAC3DvD,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAkC,YAAA,CAC3DvD,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAwC,YAAA,CAC3DvD,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAsC,YAAA,CAC/DvD,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAqC,YAAA,CAChEvD,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAA6B,YAAA,CAC3DvD,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAA8B,YAAA,CAEhEvD,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAA2B,YAAA,CAC3DvD,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAA0B,YAAA,CAC/DvD,OAAO,CAACsC,QAAQ,IAAG,4CAA4C,EAAAiB,YAAA,CAC/DvD,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAAyB,YAAA,CAC3DvD,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAAwB,YAAA,CAC5DvD,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAAgB,YAAA,CACtE;AAED,IAAaC,YAAY,IAAAC,aAAA,OAAAA,aAAA,CACtBzD,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAiD,aAAA,CAC/DzD,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAgD,aAAA,CAC9DzD,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA6C,aAAA,CAC5DzD,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA2C,aAAA,CAC5DzD,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA4C,aAAA,CAC7DzD,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAyC,aAAA,CAC1DzD,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAqC,aAAA,CAC9DzD,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAsC,aAAA,CAC3DzD,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAoC,aAAA,CAC3DzD,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA0C,aAAA,CAC3DzD,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAwC,aAAA,CAC/DzD,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAuC,aAAA,CAChEzD,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAA+B,aAAA,CAC3DzD,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAgC,aAAA,CAChEzD,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAA8B,aAAA,CAC5DzD,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAA6B,aAAA,CAC3DzD,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAA4B,aAAA,CAC/DzD,OAAO,CAACsC,QAAQ,IAAG,4CAA4C,EAAAmB,aAAA,CAC/DzD,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAA2B,aAAA,CAC3DzD,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAA0B,aAAA,CAC5DzD,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAAkB,aAAA,CACtE;AAED,IAAaC,WAAW,IAAAC,YAAA,OAAAA,YAAA,CACrB3D,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAmD,YAAA,CAC/D3D,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA8C,YAAA,CAC7D3D,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA2C,YAAA,CAC1D3D,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA0C,YAAA,CAC/D3D,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAyC,YAAA,CAChE3D,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA6C,YAAA,CAC5D3D,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAkC,YAAA,CAClE;AAED,IAAaC,YAAY,IAAAC,aAAA,OAAAA,aAAA,CACtB7D,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAqD,aAAA,CAC/D7D,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAgD,aAAA,CAC7D7D,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA6C,aAAA,CAC1D7D,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA4C,aAAA,CAC/D7D,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA2C,aAAA,CAChE7D,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA+C,aAAA,CAC5D7D,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAoC,aAAA,CAChE7D,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAgC,aAAA,CAC/D7D,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAyC,aAAA,CAChE;AAED,IAAaC,eAAe,IAAAC,gBAAA,OAAAA,gBAAA,CACzB/D,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAuD,gBAAA,CAC/D/D,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAsD,gBAAA,CAC9D/D,OAAO,CAACkC,OAAO,IAAG,4CAA4C,EAAA6B,gBAAA,CAC9D/D,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAqD,gBAAA,CAC9D/D,OAAO,CAACqC,YAAY,IAAG,4CAA4C,EAAA0B,gBAAA,CACnE/D,OAAO,CAACoC,IAAI,IAAG,4CAA4C,EAAA2B,gBAAA,CAC3D/D,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAoD,gBAAA,CAC5D/D,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAmD,gBAAA,CAC5D/D,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAkD,gBAAA,CAC7D/D,OAAO,CAAC+C,cAAc,IAAG,EAAE,EAAAgB,gBAAA,CAC3B/D,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAiD,gBAAA,CAC5D/D,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAA4B,gBAAA,CACpE/D,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAgD,gBAAA,CAC3D/D,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA+C,gBAAA,CAC1D/D,OAAO,CAACgD,WAAW,IAAG,4CAA4C,EAAAe,gBAAA,CAClE/D,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA8C,gBAAA,CAC/D/D,OAAO,CAAC4C,gBAAgB,IAAG,EAAE,EAAAmB,gBAAA,CAC7B/D,OAAO,CAACiD,gBAAgB,IAAG,4CAA4C,EAAAc,gBAAA,CACvE/D,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA6C,gBAAA,CAChE/D,OAAO,CAACkD,iBAAiB,IAAG,4CAA4C,EAAAa,gBAAA,CACxE/D,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAA4C,gBAAA,CAC3D/D,OAAO,CAACmD,YAAY,IAAG,4CAA4C,EAAAY,gBAAA,CACnE/D,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAA2C,gBAAA,CAC9D/D,OAAO,CAACoD,eAAe,IAAG,4CAA4C,EAAAW,gBAAA,CACtE/D,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAA0C,gBAAA,CAC3D/D,OAAO,CAACsB,YAAY,IAAG,4CAA4C,EAAAyC,gBAAA,CACnE/D,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAqC,gBAAA,CAC3D/D,OAAO,CAACuB,IAAI,IAAG,4CAA4C,EAAAwC,gBAAA,CAC3D/D,OAAO,CAACwB,YAAY,IAAG,EAAE,EAAAuC,gBAAA,CACzB/D,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAsC,gBAAA,CAChE/D,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAmC,gBAAA,CAC3D/D,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAAoC,gBAAA,CAC5D/D,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAkC,gBAAA,CAC/D/D,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAAwB,gBAAA,CACpE/D,OAAO,CAACqD,SAAS,IAAG,4CAA4C,EAAAU,gBAAA,CAClE;AAED,IAAaC,cAAc,IAAAC,eAAA,OAAAA,eAAA,CACxBjE,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAyD,eAAA,CAC/DjE,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAuD,eAAA,CAC9DjE,OAAO,CAACkC,OAAO,IAAG,4CAA4C,EAAA+B,eAAA,CAC9DjE,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAwD,eAAA,CAC9DjE,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAsD,eAAA,CAC5DjE,OAAO,CAACqC,YAAY,IAAG,4CAA4C,EAAA4B,eAAA,CACnEjE,OAAO,CAACoC,IAAI,IAAG,4CAA4C,EAAA6B,eAAA,CAC3DjE,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAqD,eAAA,CAC5DjE,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAoD,eAAA,CAC7DjE,OAAO,CAAC+C,cAAc,IAAG,EAAE,EAAAkB,eAAA,CAC3BjE,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAmD,eAAA,CAC5DjE,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAA8B,eAAA,CACpEjE,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAkD,eAAA,CAC3DjE,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAiD,eAAA,CAC1DjE,OAAO,CAACgD,WAAW,IAAG,4CAA4C,EAAAiB,eAAA,CAClEjE,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAgD,eAAA,CAC/DjE,OAAO,CAAC4C,gBAAgB,IAAG,EAAE,EAAAqB,eAAA,CAC7BjE,OAAO,CAACiD,gBAAgB,IAAG,4CAA4C,EAAAgB,eAAA,CACvEjE,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA+C,eAAA,CAChEjE,OAAO,CAACkD,iBAAiB,IAAG,4CAA4C,EAAAe,eAAA,CACxEjE,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAA8C,eAAA,CAC3DjE,OAAO,CAACmD,YAAY,IAAG,4CAA4C,EAAAc,eAAA,CACnEjE,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAA6C,eAAA,CAC9DjE,OAAO,CAACoD,eAAe,IAAG,4CAA4C,EAAAa,eAAA,CACtEjE,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAA4C,eAAA,CAC3DjE,OAAO,CAACsB,YAAY,IAAG,4CAA4C,EAAA2C,eAAA,CACnEjE,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAuC,eAAA,CAC3DjE,OAAO,CAACuB,IAAI,IAAG,4CAA4C,EAAA0C,eAAA,CAC3DjE,OAAO,CAACwB,YAAY,IAAG,EAAE,EAAAyC,eAAA,CACzBjE,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAwC,eAAA,CAChEjE,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAqC,eAAA,CAC3DjE,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAAsC,eAAA,CAC5DjE,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAoC,eAAA,CAC/DjE,OAAO,CAACuC,aAAa,IAAG,4CAA4C,EAAA0B,eAAA,CACpEjE,OAAO,CAACqD,SAAS,IAAG,4CAA4C,EAAAY,eAAA,CAClE;AAED,IAAaC,kBAAkB,IAAAC,mBAAA,OAAAA,mBAAA,CAC5BnE,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA2D,mBAAA,CAC/DnE,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA0D,mBAAA,CAC9DnE,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAyD,mBAAA,CAC9DnE,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAwD,mBAAA,CAC5DnE,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAuD,mBAAA,CAC9D;AAED,IAAaC,WAAW,IAAAC,YAAA,OAAAA,YAAA,CACrBrE,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA6D,YAAA,CAC/DrE,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA4D,YAAA,CAC9DrE,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAA2D,YAAA,CAC9DrE,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAA0D,YAAA,CAC5DrE,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAyD,YAAA,CAC9D;AAED,IAAaC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvBvE,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA+D,cAAA,CAC/DvE,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA8D,cAAA,CAC9DvE,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAA6D,cAAA,CAC9DvE,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAA4D,cAAA,CAC5DvE,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA2D,cAAA,CAC9D;AAED,IAAaC,gBAAgB,IAAAC,iBAAA,OAAAA,iBAAA,CAC1BzE,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAiE,iBAAA,CACjE;AAED,IAAaC,gBAAgB,IAAAC,iBAAA,OAAAA,iBAAA,CAC1B3E,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAmE,iBAAA,CAC/D3E,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAkE,iBAAA,CAC9D3E,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAiE,iBAAA,CAC9D3E,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAgE,iBAAA,CAC5D3E,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA+D,iBAAA,CAC5D3E,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA8D,iBAAA,CAC7D3E,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA6D,iBAAA,CAC5D3E,OAAO,CAACmC,aAAa,IAAG,4CAA4C,EAAAwC,iBAAA,CACpE3E,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA4D,iBAAA,CAC3D3E,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA2D,iBAAA,CAC1D3E,OAAO,CAACgD,WAAW,IAAG,4CAA4C,EAAA2B,iBAAA,CAClE3E,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA0D,iBAAA,CAC/D3E,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAyD,iBAAA,CAChE3E,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAwD,iBAAA,CAC3D3E,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAiD,iBAAA,CAC3D3E,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAuD,iBAAA,CAC9D3E,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAA8C,iBAAA,CAC/D3E,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAkD,iBAAA,CAChE3E,OAAO,CAACsC,QAAQ,IAAG,4CAA4C,EAAAqC,iBAAA,CAC/D3E,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAA6C,iBAAA,CAC3D3E,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAA4C,iBAAA,CAC9D;AAED,IAAaC,aAAa,IAAAC,cAAA,OAAAA,cAAA,CACvB7E,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAqE,cAAA,CAC/D7E,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAiE,cAAA,CAC5D7E,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA+D,cAAA,CAC5D7E,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA8D,cAAA,CAC3D7E,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA6D,cAAA,CAC1D7E,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA4D,cAAA,CAC/D7E,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA2D,cAAA,CAChE7E,OAAO,CAACkD,iBAAiB,IAAG,EAAE,EAAA2B,cAAA,CAC9B7E,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAA0D,cAAA,CAC7D;AAED,IAAaC,yBAAyB,IAAAC,qBAAA,OAAAA,qBAAA,CACnC/E,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAuE,qBAAA,CAC/D/E,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAiE,qBAAA,CAC5D/E,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAgE,qBAAA,CAC3D/E,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA+D,qBAAA,CAC1D/E,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA8D,qBAAA,CAC/D/E,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA6D,qBAAA,CAChE/E,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAA4D,qBAAA,CAC7D;AAED,IAAaC,8BAA8B,IAAAC,qBAAA,OAAAA,qBAAA,CACxCjF,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAyE,qBAAA,CAC/DjF,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAqE,qBAAA,CAC5DjF,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAmE,qBAAA,CAC5DjF,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAkE,qBAAA,CAC3DjF,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAiE,qBAAA,CAC1DjF,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAgE,qBAAA,CAC/DjF,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAA+D,qBAAA,CAClE;AAED,IAAaC,qCAAqC,IAAAC,qBAAA,OAAAA,qBAAA,CAC/CnF,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA2E,qBAAA,CAC/DnF,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAAuE,qBAAA,CAC5DnF,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAqE,qBAAA,CAC5DnF,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAoE,qBAAA,CAC3DnF,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAmE,qBAAA,CAC1DnF,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAkE,qBAAA,CAC/DnF,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAiE,qBAAA,CAClE;AAED,IAAaC,qBAAqB,GAAG,4CAA4C;AAEjF,IAAaC,+BAA+B,GAAG,4CAA4C;AAE3F,IAAaC,+BAA+B,GAAG,4CAA4C;AAE3F,IAAaC,wBAAwB,IAAAC,qBAAA,OAAAA,qBAAA,CAClCxF,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAgF,qBAAA,CAC/DxF,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA0E,qBAAA,CAC5DxF,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAyE,qBAAA,CAC3DxF,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAwE,qBAAA,CAC1DxF,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAuE,qBAAA,CAC/DxF,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAsE,qBAAA,CAClE;AAED,IAAaC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CAC/B1F,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAkF,qBAAA,CAC/D1F,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA8E,qBAAA,CAC5D1F,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA4E,qBAAA,CAC5D1F,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA2E,qBAAA,CAC3D1F,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA0E,qBAAA,CAC1D1F,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAyE,qBAAA,CAC/D1F,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAwE,qBAAA,CAChE1F,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAuE,qBAAA,CAC7D;AAED,IAAaC,gBAAgB,IAAAC,iBAAA,OAAAA,iBAAA,CAC1B5F,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA8E,iBAAA,CAC5D5F,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA6E,iBAAA,CAC3D5F,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAwE,iBAAA,CAC9D5F,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAA2E,iBAAA,CAC/D5F,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAkE,iBAAA,CAC3D5F,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAmE,iBAAA,CAChE5F,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAAgE,iBAAA,CAC3D5F,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA+E,iBAAA,CAC7D5F,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAA+D,iBAAA,CAC/D5F,OAAO,CAAC8B,IAAI,IAAG,4CAA4C,EAAA8D,iBAAA,CAC3D5F,OAAO,CAAC+B,KAAK,IAAG,4CAA4C,EAAA6D,iBAAA,CAC9D;AAED,IAAaC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CAC/B9F,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAsF,qBAAA,CACjE;AAED,IAAaC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CAC/BhG,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAwF,qBAAA,CAC/DhG,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAAqF,qBAAA,CAC5DhG,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAuF,qBAAA,CAC9DhG,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAAsF,qBAAA,CAChE;AAED,IAAaC,cAAc,IAAAC,eAAA,OAAAA,eAAA,CACxBlG,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA0F,eAAA,CAC/DlG,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAAyF,eAAA,CAChE;AAED,IAAaC,0BAA0B,IAAAC,qBAAA,OAAAA,qBAAA,CACpCpG,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA4F,qBAAA,CAC/DpG,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA2F,qBAAA,CAChE;AAED,IAAaC,kBAAkB,IAAAC,mBAAA,OAAAA,mBAAA,CAC5BtG,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAA8F,mBAAA,CAC/DtG,OAAO,CAACS,OAAO,IAAG,4CAA4C,EAAA6F,mBAAA,CAC9DtG,OAAO,CAACU,OAAO,IAAG,4CAA4C,EAAA4F,mBAAA,CAC9DtG,OAAO,CAACW,KAAK,IAAG,4CAA4C,EAAA2F,mBAAA,CAC5DtG,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA0F,mBAAA,CAC5DtG,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAqF,mBAAA,CAC/DtG,OAAO,CAAC4C,gBAAgB,IAAG,4CAA4C,EAAA0D,mBAAA,CACvEtG,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAA4E,mBAAA,CAC3DtG,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAAyF,mBAAA,CAC7DtG,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAAwF,mBAAA,CAC5DtG,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAuF,mBAAA,CAC3DtG,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAsF,mBAAA,CAC1DtG,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAoF,mBAAA,CAChEtG,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAmF,mBAAA,CAC3DtG,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAkF,mBAAA,CAC9DtG,OAAO,CAACqB,IAAI,IAAG,4CAA4C,EAAAiF,mBAAA,CAC3DtG,OAAO,CAACuB,IAAI,IAAG,4CAA4C,EAAA+E,mBAAA,CAC3DtG,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAA6E,mBAAA,CAChEtG,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAA0E,mBAAA,CAC3DtG,OAAO,CAAC2B,KAAK,IAAG,4CAA4C,EAAA2E,mBAAA,CAC5DtG,OAAO,CAAC6B,QAAQ,IAAG,4CAA4C,EAAAyE,mBAAA,CACjE;AAED,IAAaC,uBAAuB,IAAAC,qBAAA,OAAAA,qBAAA,CACjCxG,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAgG,qBAAA,CAC/DxG,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA0F,qBAAA,CAC5DxG,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAsF,qBAAA,CAChExG,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAAyF,qBAAA,CAC3DxG,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAAwF,qBAAA,CAC1DxG,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAuF,qBAAA,CAC/DxG,OAAO,CAACmB,IAAI,IAAG,4CAA4C,EAAAqF,qBAAA,CAC3DxG,OAAO,CAACY,KAAK,IAAG,4CAA4C,EAAA4F,qBAAA,CAC9D;AAED,IAAaC,gBAAgB,IAAAC,iBAAA,OAAAA,iBAAA,CAC1B1G,OAAO,CAACQ,QAAQ,IAAG,4CAA4C,EAAAkG,iBAAA,CAK/D1G,OAAO,CAACa,MAAM,IAAG,4CAA4C,EAAA6F,iBAAA,CAC7D1G,OAAO,CAACc,KAAK,IAAG,4CAA4C,EAAA4F,iBAAA,CAC5D1G,OAAO,CAACe,IAAI,IAAG,4CAA4C,EAAA2F,iBAAA,CAC3D1G,OAAO,CAACgB,GAAG,IAAG,4CAA4C,EAAA0F,iBAAA,CAC1D1G,OAAO,CAACiB,QAAQ,IAAG,4CAA4C,EAAAyF,iBAAA,CAC/D1G,OAAO,CAACkB,SAAS,IAAG,4CAA4C,EAAAwF,iBAAA,CAEhE1G,OAAO,CAACoB,OAAO,IAAG,4CAA4C,EAAAsF,iBAAA,CAK9D1G,OAAO,CAACyB,SAAS,IAAG,4CAA4C,EAAAiF,iBAAA,CAChE1G,OAAO,CAAC0B,IAAI,IAAG,4CAA4C,EAAAgF,iBAAA,CAE3D1G,OAAO,CAAC4B,IAAI,IAAG,4CAA4C,EAAA8E,iBAAA,CAC7D;;;ACjgBD,IAGaC,SAAS,IAAAC,UAAA,OAAAA,UAAA,CACnB5G,OAAO,CAACQ,QAAQ,IAAGP,QAAQ,CAACO,QAAQ,EAAAoG,UAAA,CACpC5G,OAAO,CAACS,OAAO,IAAGR,QAAQ,CAACQ,OAAO,EAAAmG,UAAA,CAClC5G,OAAO,CAACU,OAAO,IAAGT,QAAQ,CAACS,OAAO,EAAAkG,UAAA,CAClC5G,OAAO,CAACW,KAAK,IAAGV,QAAQ,CAACU,KAAK,EAAAiG,UAAA,CAC9B5G,OAAO,CAACY,KAAK,IAAGX,QAAQ,CAACW,KAAK,EAAAgG,UAAA,CAC9B5G,OAAO,CAACc,KAAK,IAAGb,QAAQ,CAACa,KAAK,EAAA8F,UAAA,CAC9B5G,OAAO,CAACmC,aAAa,IAAGlC,QAAQ,CAACkC,aAAa,EAAAyE,UAAA,CAC9C5G,OAAO,CAACa,MAAM,IAAGZ,QAAQ,CAACY,MAAM,EAAA+F,UAAA,CAChC5G,OAAO,CAAC+C,cAAc,IAAG9C,QAAQ,CAAC8C,cAAc,EAAA6D,UAAA,CAChD5G,OAAO,CAACe,IAAI,IAAGd,QAAQ,CAACc,IAAI,EAAA6F,UAAA,CAC5B5G,OAAO,CAACgB,GAAG,IAAGf,QAAQ,CAACmC,IAAI,EAAAwE,UAAA,CAC3B5G,OAAO,CAACoC,IAAI,IAAGnC,QAAQ,CAACoC,YAAY,EAAAuE,UAAA,CACpC5G,OAAO,CAACqC,YAAY,IAAGpC,QAAQ,CAACe,GAAG,EAAA4F,UAAA,CACnC5G,OAAO,CAACgD,WAAW,IAAG/C,QAAQ,CAAC+C,WAAW,EAAA4D,UAAA,CAC1C5G,OAAO,CAACiB,QAAQ,IAAGhB,QAAQ,CAACgB,QAAQ,EAAA2F,UAAA,CACpC5G,OAAO,CAAC4C,gBAAgB,IAAG3C,QAAQ,CAAC2C,gBAAgB,EAAAgE,UAAA,CACpD5G,OAAO,CAACiD,gBAAgB,IAAGhD,QAAQ,CAACgD,gBAAgB,EAAA2D,UAAA,CACpD5G,OAAO,CAACkB,SAAS,IAAGjB,QAAQ,CAACiB,SAAS,EAAA0F,UAAA,CACtC5G,OAAO,CAACkD,iBAAiB,IAAGjD,QAAQ,CAACiD,iBAAiB,EAAA0D,UAAA,CACtD5G,OAAO,CAACmB,IAAI,IAAGlB,QAAQ,CAACkB,IAAI,EAAAyF,UAAA,CAC5B5G,OAAO,CAACmD,YAAY,IAAGlD,QAAQ,CAACkD,YAAY,EAAAyD,UAAA,CAC5C5G,OAAO,CAACoB,OAAO,IAAGnB,QAAQ,CAACmB,OAAO,EAAAwF,UAAA,CAClC5G,OAAO,CAACoD,eAAe,IAAGnD,QAAQ,CAACmD,eAAe,EAAAwD,UAAA,CAClD5G,OAAO,CAACqB,IAAI,IAAGpB,QAAQ,CAACoB,IAAI,EAAAuF,UAAA,CAC5B5G,OAAO,CAACsB,YAAY,IAAGrB,QAAQ,CAACqB,YAAY,EAAAsF,UAAA,CAC5C5G,OAAO,CAAC0B,IAAI,IAAGzB,QAAQ,CAACyB,IAAI,EAAAkF,UAAA,CAC5B5G,OAAO,CAACuB,IAAI,IAAGtB,QAAQ,CAACsB,IAAI,EAAAqF,UAAA,CAC5B5G,OAAO,CAACwB,YAAY,IAAGvB,QAAQ,CAACuB,YAAY,EAAAoF,UAAA,CAC5C5G,OAAO,CAACyB,SAAS,IAAGxB,QAAQ,CAACwB,SAAS,EAAAmF,UAAA,CACtC5G,OAAO,CAAC4B,IAAI,IAAG3B,QAAQ,CAAC2B,IAAI,EAAAgF,UAAA,CAC5B5G,OAAO,CAAC2B,KAAK,IAAG1B,QAAQ,CAAC0B,KAAK,EAAAiF,UAAA,CAC9B5G,OAAO,CAAC6B,QAAQ,IAAG5B,QAAQ,CAAC4B,QAAQ,EAAA+E,UAAA,CACpC5G,OAAO,CAACsC,QAAQ,IAAGrC,QAAQ,CAACqC,QAAQ,EAAAsE,UAAA,CACpC5G,OAAO,CAAC8B,IAAI,IAAG7B,QAAQ,CAAC6B,IAAI,EAAA8E,UAAA,CAC5B5G,OAAO,CAAC+B,KAAK,IAAG9B,QAAQ,CAAC8B,KAAK,EAAA6E,UAAA,CAC9B5G,OAAO,CAACuC,aAAa,IAAGtC,QAAQ,CAACsC,aAAa,EAAAqE,UAAA,CAC9C5G,OAAO,CAACqD,SAAS,IAAGpD,QAAQ,CAACoD,SAAS,EAAAuD,UAAA,CACxC;;;ACzCD,IAEaC,cAAc,IAAAC,eAAA,OAAAA,eAAA,CACxB9G,OAAO,CAACQ,QAAQ,IAAG,oEAAoE,EAAAsG,eAAA,CACvF9G,OAAO,CAACS,OAAO,IAAG,oEAAoE,EAAAqG,eAAA,CACtF9G,OAAO,CAACU,OAAO,IAAG,oEAAoE,EAAAoG,eAAA,CACtF9G,OAAO,CAACkC,OAAO,IAAG,oEAAoE,EAAA4E,eAAA,CACtF9G,OAAO,CAACW,KAAK,IAAG,oEAAoE,EAAAmG,eAAA,CACpF9G,OAAO,CAACY,KAAK,IAAG,oEAAoE,EAAAkG,eAAA,CACpF9G,OAAO,CAACa,MAAM,IAAG,oEAAoE,EAAAiG,eAAA,CACrF9G,OAAO,CAACc,KAAK,IAAG,oEAAoE,EAAAgG,eAAA,CACpF9G,OAAO,CAACmC,aAAa,IAAG,oEAAoE,EAAA2E,eAAA,CAC5F9G,OAAO,CAACe,IAAI,IAAG,oEAAoE,EAAA+F,eAAA,CACnF9G,OAAO,CAACgB,GAAG,IAAG,oEAAoE,EAAA8F,eAAA,CAClF9G,OAAO,CAACgD,WAAW,IAAG,oEAAoE,EAAA8D,eAAA,CAC1F9G,OAAO,CAACoC,IAAI,IAAG,oEAAoE,EAAA0E,eAAA,CACnF9G,OAAO,CAACqC,YAAY,IAAG,oEAAoE,EAAAyE,eAAA,CAC3F9G,OAAO,CAACiB,QAAQ,IAAG,oEAAoE,EAAA6F,eAAA,CACvF9G,OAAO,CAACiD,gBAAgB,IAAG,oEAAoE,EAAA6D,eAAA,CAC/F9G,OAAO,CAACkB,SAAS,IAAG,oEAAoE,EAAA4F,eAAA,CACxF9G,OAAO,CAACkD,iBAAiB,IAAG,oEAAoE,EAAA4D,eAAA,CAChG9G,OAAO,CAACmB,IAAI,IAAG,oEAAoE,EAAA2F,eAAA,CACnF9G,OAAO,CAACmD,YAAY,IAAG,oEAAoE,EAAA2D,eAAA,CAC3F9G,OAAO,CAACoB,OAAO,IAAG,oEAAoE,EAAA0F,eAAA,CACtF9G,OAAO,CAACoD,eAAe,IAAG,oEAAoE,EAAA0D,eAAA,CAC9F9G,OAAO,CAACqB,IAAI,IAAG,oEAAoE,EAAAyF,eAAA,CACnF9G,OAAO,CAACsB,YAAY,IAAG,oEAAoE,EAAAwF,eAAA,CAC3F9G,OAAO,CAAC0B,IAAI,IAAG,oEAAoE,EAAAoF,eAAA,CACnF9G,OAAO,CAACuB,IAAI,IAAG,oEAAoE,EAAAuF,eAAA,CACnF9G,OAAO,CAACyB,SAAS,IAAG,oEAAoE,EAAAqF,eAAA,CACxF9G,OAAO,CAAC4B,IAAI,IAAG,oEAAoE,EAAAkF,eAAA,CACnF9G,OAAO,CAAC2B,KAAK,IAAG,oEAAoE,EAAAmF,eAAA,CACpF9G,OAAO,CAAC6B,QAAQ,IAAG,oEAAoE,EAAAiF,eAAA,CACvF9G,OAAO,CAACuC,aAAa,IAAG,oEAAoE,EAAAuE,eAAA,CAC5F9G,OAAO,CAACqD,SAAS,IAAG,oEAAoE,EAAAyD,eAAA,CAC1F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BD;;;AAGA,IAAsBC,gBAAgB;AA2BpC;;;;;;;AAOA,SAAAA,iBAAsBC,OAAe,EAAEC,QAAgB,EAAEC,MAAe,EAAEC,IAAa;EACrF,CAAUC,MAAM,CAACC,aAAa,CAACL,OAAO,CAAC,GAAAM,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvCC,SAAS,QAAgC,UAAU,IAAnDA,SAAS;EACT,EAAUR,QAAQ,IAAI,CAAC,IAAIA,QAAQ,GAAG,GAAG,IAAIG,MAAM,CAACM,SAAS,CAACT,QAAQ,CAAC,IAAAK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvEC,SAAS,QAAgE,UAAU,IAAnFA,SAAS;EAET,IAAI,CAACT,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;AAClB,CAAC;;AC/CH;;;AAGA,IAAsBQ,cAAe,0BAAAC,iBAAA;EAAAC,cAAA,CAAAF,cAAA,EAAAC,iBAAA;EAArC,SAAAD;;;IACkBG,KAAA,SAAQ,GAAS,IAAI;IACrBA,KAAA,QAAO,GAAU,KAAK;IAAA,OAAAA,KAAA;;EACvC,OAAAH,cAAA;AAAA,EAH4CZ,gBAAgB;;ACD7D;AACA,SAAgBgB,uBAAuBA,CAACC,OAAe;EACrD,IAAI;IACF,IAAMC,kBAAkB,GAAGC,UAAU,CAACF,OAAO,CAAC;IAC9CV,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAAW,OAAO,CAACH,OAAO,KAAKC,kBAAkB,EAAKD,OAAO,yBAAsB,CAAC;IACzE,OAAOC,kBAAkB;GAC1B,CAAC,OAAOG,KAAK,EAAE;IACd,CAAed,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAfC,SAAS,QAAWO,OAAO,iCAA3BP,SAAS;;AAEb;;ACRA;;;AAGA,IAAaY,KAAM,0BAAAT,iBAAA;EAAAC,cAAA,CAAAQ,KAAA,EAAAT,iBAAA;EAOjB,SAAAS,MAAmBrB,OAAe,EAAEgB,OAAe,EAAEf,QAAgB,EAAEC,MAAe,EAAEC,IAAa;;IACnGW,KAAA,GAAAF,iBAAA,CAAAU,IAAA,OAAMtB,OAAO,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,CAAC;IAJxBW,KAAA,SAAQ,GAAU,KAAK;IACvBA,KAAA,QAAO,GAAS,IAAI;IAIlCA,KAAA,CAAKd,OAAO,GAAGA,OAAO;IACtBc,KAAA,CAAKE,OAAO,GAAGD,uBAAuB,CAACC,OAAO,CAAC;IAAA,OAAAF,KAAA;;;;;;EAGjD,IAAAS,MAAA,GAAAF,KAAA,CAAAG,SAAA;EAAAD,MAAA,CAIOE,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAACC,OAAO,IAAI,IAAI,CAAC3B,OAAO,KAAK0B,KAAK,CAAC1B,OAAO,IAAI,IAAI,CAACgB,OAAO,KAAKU,KAAK,CAACV,OAAO;;;;;;;;EAG1FO,MAAA,CAMOK,WAAW,GAAX,SAAAA,YAAYF,KAAY;IAC7B,EAAU,IAAI,CAAC1B,OAAO,KAAK0B,KAAK,CAAC1B,OAAO,IAAAM,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxCC,SAAS,QAAiC,WAAW,IAArDA,SAAS;IACT,EAAU,IAAI,CAACO,OAAO,KAAKU,KAAK,CAACV,OAAO,IAAAV,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxCC,SAAS,QAAiC,WAAW,IAArDA,SAAS;IACT,OAAO,IAAI,CAACO,OAAO,CAACa,WAAW,EAAE,GAAGH,KAAK,CAACV,OAAO,CAACa,WAAW,EAAE;;;;;EAGjEC,YAAA,CAAAT,KAAA;IAAAU,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,OAAO,IAAI;;;EACZ,OAAAX,KAAA;AAAA,EAtCwBtB,gBAAgB;AAgD3C;;;AAGA,SAAgBkC,cAAcA,CAACC,SAAmB,EAAEC,SAAmB;EACrE,IAAID,SAAS,YAAYb,KAAK,IAAIc,SAAS,YAAYd,KAAK,EAAE;IAC5D,OAAOa,SAAS,CAACT,MAAM,CAACU,SAAS,CAAC;GACnC,MAAM,IAAID,SAAS,YAAYb,KAAK,EAAE;IACrC,OAAO,KAAK;GACb,MAAM,IAAIc,SAAS,YAAYd,KAAK,EAAE;IACrC,OAAO,KAAK;GACb,MAAM;IACL,OAAOa,SAAS,KAAKC,SAAS;;AAElC;;;ACpEA,IAKaC,IAAI,IAAAC,KAAA,OAAAA,KAAA,CACdrJ,OAAO,CAACQ,QAAQ,iBAAG,IAAI6H,KAAK,CAACrI,OAAO,CAACQ,QAAQ,EAAEwB,YAAY,CAAChC,OAAO,CAACQ,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA6I,KAAA,CACrGrJ,OAAO,CAACS,OAAO,iBAAG,IAAI4H,KAAK,CAACrI,OAAO,CAACS,OAAO,EAAEuB,YAAY,CAAChC,OAAO,CAACS,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA4I,KAAA,CAClGrJ,OAAO,CAACY,KAAK,iBAAG,IAAIyH,KAAK,CAACrI,OAAO,CAACY,KAAK,EAAEoB,YAAY,CAAChC,OAAO,CAACY,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAyI,KAAA,CAC5FrJ,OAAO,CAACoC,IAAI,iBAAG,IAAIiG,KAAK,CAACrI,OAAO,CAACoC,IAAI,EAAEJ,YAAY,CAAChC,OAAO,CAACoC,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAiH,KAAA,CACzFrJ,OAAO,CAACqC,YAAY,iBAAG,IAAIgG,KAAK,CAACrI,OAAO,CAACqC,YAAY,EAAEL,YAAY,CAAChC,OAAO,CAACqC,YAAY,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAgH,KAAA,CACjHrJ,OAAO,CAACc,KAAK,iBAAG,IAAIuH,KAAK,CAACrI,OAAO,CAACc,KAAK,EAAEkB,YAAY,CAAChC,OAAO,CAACc,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAuI,KAAA,CAC5FrJ,OAAO,CAACmC,aAAa,iBAAG,IAAIkG,KAAK,CAACrI,OAAO,CAACmC,aAAa,EAAEH,YAAY,CAAChC,OAAO,CAACmC,aAAa,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAkH,KAAA,CACpHrJ,OAAO,CAACa,MAAM,iBAAG,IAAIwH,KAAK,CAACrI,OAAO,CAACa,MAAM,EAAEmB,YAAY,CAAChC,OAAO,CAACa,MAAM,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAwI,KAAA,CAC/FrJ,OAAO,CAACgB,GAAG,iBAAG,IAAIqH,KAAK,CAACrI,OAAO,CAACgB,GAAG,EAAEgB,YAAY,CAAChC,OAAO,CAACgB,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAqI,KAAA,CACvFrJ,OAAO,CAACoB,OAAO,iBAAG,IAAIiH,KAAK,CAACrI,OAAO,CAACoB,OAAO,EAAEY,YAAY,CAAChC,OAAO,CAACoB,OAAO,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAiI,KAAA,CAClGrJ,OAAO,CAACmB,IAAI,iBAAG,IAAIkH,KAAK,CAACrI,OAAO,CAACmB,IAAI,EAAEa,YAAY,CAAChC,OAAO,CAACmB,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAkI,KAAA,CACzFrJ,OAAO,CAACqB,IAAI,iBAAG,IAAIgH,KAAK,CAACrI,OAAO,CAACqB,IAAI,EAAEW,YAAY,CAAChC,OAAO,CAACqB,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAgI,KAAA,CAC1FrJ,OAAO,CAACe,IAAI,iBAAG,IAAIsH,KAAK,CAACrI,OAAO,CAACe,IAAI,EAAEiB,YAAY,CAAChC,OAAO,CAACe,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAsI,KAAA,CACzFrJ,OAAO,CAACiB,QAAQ,iBAAG,IAAIoH,KAAK,CAACrI,OAAO,CAACiB,QAAQ,EAAEe,YAAY,CAAChC,OAAO,CAACiB,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAoI,KAAA,CACrGrJ,OAAO,CAACyB,SAAS,iBAAG,IAAI4G,KAAK,CAACrI,OAAO,CAACyB,SAAS,EAAEO,YAAY,CAAChC,OAAO,CAACyB,SAAS,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA4H,KAAA,CACxGrJ,OAAO,CAACkB,SAAS,iBAAG,IAAImH,KAAK,CAACrI,OAAO,CAACkB,SAAS,EAAEc,YAAY,CAAChC,OAAO,CAACkB,SAAS,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAmI,KAAA,CACxGrJ,OAAO,CAAC4B,IAAI,iBAAG,IAAIyG,KAAK,CAACrI,OAAO,CAAC4B,IAAI,EAAEI,YAAY,CAAChC,OAAO,CAAC4B,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAyH,KAAA,CACzFrJ,OAAO,CAAC2B,KAAK,iBAAG,IAAI0G,KAAK,CAACrI,OAAO,CAAC2B,KAAK,EAAEK,YAAY,CAAChC,OAAO,CAAC2B,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA0H,KAAA,CAC5FrJ,OAAO,CAAC6B,QAAQ,iBAAG,IAAIwG,KAAK,CAACrI,OAAO,CAAC6B,QAAQ,EAAEG,YAAY,CAAChC,OAAO,CAAC6B,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAwH,KAAA,CACrGrJ,OAAO,CAACsC,QAAQ,iBAAG,IAAI+F,KAAK,CAACrI,OAAO,CAACsC,QAAQ,EAAEN,YAAY,CAAChC,OAAO,CAACsC,QAAQ,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA+G,KAAA,CACrGrJ,OAAO,CAAC8B,IAAI,iBAAG,IAAIuG,KAAK,CAACrI,OAAO,CAAC8B,IAAI,EAAEE,YAAY,CAAChC,OAAO,CAAC8B,IAAI,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAuH,KAAA,CACzFrJ,OAAO,CAAC+B,KAAK,iBAAG,IAAIsG,KAAK,CAACrI,OAAO,CAAC+B,KAAK,EAAEC,YAAY,CAAChC,OAAO,CAAC+B,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAAsH,KAAA,CAC5FrJ,OAAO,CAACuC,aAAa,iBAAG,IAAI8F,KAAK,CAACrI,OAAO,CAACuC,aAAa,EAAEP,YAAY,CAAChC,OAAO,CAACuC,aAAa,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAA8G,KAAA,CACtH;AAED,IAAaC,GAAG,gBAAAC,QAAA,KACXH,IAAI,GAAAI,SAAA,OAAAA,SAAA,CACNxJ,OAAO,CAAC0B,IAAI,iBAAG,IAAI2G,KAAK,CAACrI,OAAO,CAAC0B,IAAI,EAAEc,WAAW,CAACxC,OAAO,CAAC0B,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,EAAA8H,SAAA,EAC9F;AAED,IAAaC,KAAK,IAAAC,KAAA,OAAAA,KAAA,CACf1J,OAAO,CAACQ,QAAQ,iBAAG,IAAI6H,KAAK,CAACrI,OAAO,CAACQ,QAAQ,EAAEkC,aAAa,CAAC1C,OAAO,CAACQ,QAAQ,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAkJ,KAAA,CAC5G1J,OAAO,CAACS,OAAO,iBAAG,IAAI4H,KAAK,CAACrI,OAAO,CAACS,OAAO,EAAEiC,aAAa,CAAC1C,OAAO,CAACS,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAiJ,KAAA,CACzG1J,OAAO,CAACoC,IAAI,iBAAG,IAAIiG,KAAK,CAACrI,OAAO,CAACoC,IAAI,EAAEM,aAAa,CAAC1C,OAAO,CAACoC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAAsH,KAAA,CAChG1J,OAAO,CAACqC,YAAY,iBAAG,IAAIgG,KAAK,CAACrI,OAAO,CAACqC,YAAY,EAAEK,aAAa,CAAC1C,OAAO,CAACqC,YAAY,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAAqH,KAAA,CACxH1J,OAAO,CAACU,OAAO,iBAAG,IAAI2H,KAAK,CAACrI,OAAO,CAACU,OAAO,EAAEgC,aAAa,CAAC1C,OAAO,CAACU,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAgJ,KAAA,CACzG1J,OAAO,CAACW,KAAK,iBAAG,IAAI0H,KAAK,CAACrI,OAAO,CAACW,KAAK,EAAE+B,aAAa,CAAC1C,OAAO,CAACW,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA+I,KAAA,CACnG1J,OAAO,CAACY,KAAK,iBAAG,IAAIyH,KAAK,CAACrI,OAAO,CAACY,KAAK,EAAE8B,aAAa,CAAC1C,OAAO,CAACY,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA8I,KAAA,CACnG1J,OAAO,CAACiB,QAAQ,iBAAG,IAAIoH,KAAK,CAACrI,OAAO,CAACiB,QAAQ,EAAEyB,aAAa,CAAC1C,OAAO,CAACiB,QAAQ,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAyI,KAAA,CAC5G1J,OAAO,CAAC4C,gBAAgB,iBAAG,IAAIyF,KAAK,CACnCrI,OAAO,CAAC4C,gBAAgB,EACxBF,aAAa,CAAC1C,OAAO,CAAC4C,gBAAgB,CAAC,EACvC,EAAE,EACF,MAAM,EACN,eAAe,CAChB,EAAA8G,KAAA,CACA1J,OAAO,CAACgB,GAAG,iBAAG,IAAIqH,KAAK,CAACrI,OAAO,CAACgB,GAAG,EAAE0B,aAAa,CAAC1C,OAAO,CAACgB,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA0I,KAAA,CAC7F1J,OAAO,CAACa,MAAM,iBAAG,IAAIwH,KAAK,CAACrI,OAAO,CAACa,MAAM,EAAE6B,aAAa,CAAC1C,OAAO,CAACa,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA6I,KAAA,CACtG1J,OAAO,CAACc,KAAK,iBAAG,IAAIuH,KAAK,CAACrI,OAAO,CAACc,KAAK,EAAE4B,aAAa,CAAC1C,OAAO,CAACc,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA4I,KAAA,CACnG1J,OAAO,CAACmC,aAAa,iBAAG,IAAIkG,KAAK,CAChCrI,OAAO,CAACmC,aAAa,EACrBO,aAAa,CAAC1C,OAAO,CAACmC,aAAa,CAAC,EACpC,EAAE,EACF,MAAM,EACN,eAAe,CAChB,EAAAuH,KAAA,CACA1J,OAAO,CAACqB,IAAI,iBAAG,IAAIgH,KAAK,CAACrI,OAAO,CAACqB,IAAI,EAAEqB,aAAa,CAAC1C,OAAO,CAACqB,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAqI,KAAA,CAChG1J,OAAO,CAACmB,IAAI,iBAAG,IAAIkH,KAAK,CAACrI,OAAO,CAACmB,IAAI,EAAEuB,aAAa,CAAC1C,OAAO,CAACmB,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAuI,KAAA,CAChG1J,OAAO,CAACoB,OAAO,iBAAG,IAAIiH,KAAK,CAACrI,OAAO,CAACoB,OAAO,EAAEsB,aAAa,CAAC1C,OAAO,CAACoB,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAsI,KAAA,CACzG1J,OAAO,CAACe,IAAI,iBAAG,IAAIsH,KAAK,CAACrI,OAAO,CAACe,IAAI,EAAE2B,aAAa,CAAC1C,OAAO,CAACe,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA2I,KAAA,CAChG1J,OAAO,CAACkB,SAAS,iBAAG,IAAImH,KAAK,CAACrI,OAAO,CAACkB,SAAS,EAAEwB,aAAa,CAAC1C,OAAO,CAACkB,SAAS,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAwI,KAAA,CAC/G1J,OAAO,CAACuB,IAAI,iBAAG,IAAI8G,KAAK,CAACrI,OAAO,CAACuB,IAAI,EAAEmB,aAAa,CAAC1C,OAAO,CAACuB,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAmI,KAAA,CAChG1J,OAAO,CAAC2B,KAAK,iBAAG,IAAI0G,KAAK,CAACrI,OAAO,CAAC2B,KAAK,EAAEe,aAAa,CAAC1C,OAAO,CAAC2B,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA+H,KAAA,CACnG1J,OAAO,CAAC4B,IAAI,iBAAG,IAAIyG,KAAK,CAACrI,OAAO,CAAC4B,IAAI,EAAEc,aAAa,CAAC1C,OAAO,CAAC4B,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA8H,KAAA,CAChG1J,OAAO,CAAC6B,QAAQ,iBAAG,IAAIwG,KAAK,CAACrI,OAAO,CAAC6B,QAAQ,EAAEa,aAAa,CAAC1C,OAAO,CAAC6B,QAAQ,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA6H,KAAA,CAC5G1J,OAAO,CAACsC,QAAQ,iBAAG,IAAI+F,KAAK,CAACrI,OAAO,CAACsC,QAAQ,EAAEI,aAAa,CAAC1C,OAAO,CAACsC,QAAQ,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAAoH,KAAA,CAC5G1J,OAAO,CAAC8B,IAAI,iBAAG,IAAIuG,KAAK,CAACrI,OAAO,CAAC8B,IAAI,EAAEY,aAAa,CAAC1C,OAAO,CAAC8B,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA4H,KAAA,CAChG1J,OAAO,CAAC+B,KAAK,iBAAG,IAAIsG,KAAK,CAACrI,OAAO,CAAC+B,KAAK,EAAEW,aAAa,CAAC1C,OAAO,CAAC+B,KAAK,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,EAAA2H,KAAA,CACnG1J,OAAO,CAACuC,aAAa,iBAAG,IAAI8F,KAAK,CAChCrI,OAAO,CAACuC,aAAa,EACrBG,aAAa,CAAC1C,OAAO,CAACuC,aAAa,CAAC,EACpC,EAAE,EACF,MAAM,EACN,eAAe,CAChB,EAAAmH,KAAA,CACF;AAED,IAAaC,OAAO,IAAAC,QAAA,OAAAA,QAAA,CACjB5J,OAAO,CAACQ,QAAQ,IAAGiJ,KAAK,CAACzJ,OAAO,CAACQ,QAAQ,CAAC,EAAAoJ,QAAA,CAC1C5J,OAAO,CAACS,OAAO,IAAGgJ,KAAK,CAACzJ,OAAO,CAACS,OAAO,CAAC,EAAAmJ,QAAA,CACxC5J,OAAO,CAACU,OAAO,IAAG+I,KAAK,CAACzJ,OAAO,CAACU,OAAO,CAAC,EAAAkJ,QAAA,CACxC5J,OAAO,CAACW,KAAK,IAAG8I,KAAK,CAACzJ,OAAO,CAACW,KAAK,CAAC,EAAAiJ,QAAA,CACpC5J,OAAO,CAACY,KAAK,IAAG6I,KAAK,CAACzJ,OAAO,CAACY,KAAK,CAAC,EAAAgJ,QAAA,CACpC5J,OAAO,CAACqC,YAAY,IAAGoH,KAAK,CAACzJ,OAAO,CAACqC,YAAY,CAAC,EAAAuH,QAAA,CAClD5J,OAAO,CAACsC,QAAQ,IAAGmH,KAAK,CAACzJ,OAAO,CAACsC,QAAQ,CAAC,EAAAsH,QAAA,CAC1C5J,OAAO,CAACa,MAAM,iBAAG,IAAIwH,KAAK,CAACrI,OAAO,CAACa,MAAM,EAAEgC,eAAe,CAAC7C,OAAO,CAACa,MAAM,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,EAAA+I,QAAA,CACtG5J,OAAO,CAAC+C,cAAc,iBAAG,IAAIsF,KAAK,CACjCrI,OAAO,CAAC+C,cAAc,EACtBF,eAAe,CAAC7C,OAAO,CAAC+C,cAAc,CAAC,EACvC,EAAE,EACF,KAAK,EACL,aAAa,CACd,EAAA6G,QAAA,CACA5J,OAAO,CAACc,KAAK,iBAAG,IAAIuH,KAAK,CAACrI,OAAO,CAACc,KAAK,EAAE+B,eAAe,CAAC7C,OAAO,CAACc,KAAK,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,eAAe,CAAC,EAAA8I,QAAA,CACvG5J,OAAO,CAACmC,aAAa,iBAAG,IAAIkG,KAAK,CAChCrI,OAAO,CAACmC,aAAa,EACrBU,eAAe,CAAC7C,OAAO,CAACmC,aAAa,CAAC,EACtC,EAAE,EACF,QAAQ,EACR,eAAe,CAChB,EAAAyH,QAAA,CACA5J,OAAO,CAACoC,IAAI,iBAAG,IAAIiG,KAAK,CACvBrI,OAAO,CAACoC,IAAI,EACZS,eAAe,CAAC7C,OAAO,CAACoC,IAAI,CAAC,EAC7B,EAAE,EACF,OAAO,EACP,cAAc,CACf,EAAAwH,QAAA,CAEA5J,OAAO,CAACe,IAAI,iBAAG,IAAIsH,KAAK,CAACrI,OAAO,CAACe,IAAI,EAAE8B,eAAe,CAAC7C,OAAO,CAACe,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAA6I,QAAA,CAClG5J,OAAO,CAACgB,GAAG,iBAAG,IAAIqH,KAAK,CAACrI,OAAO,CAACgB,GAAG,EAAE6B,eAAe,CAAC7C,OAAO,CAACgB,GAAG,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,EAAA4I,QAAA,CAC7F5J,OAAO,CAACgD,WAAW,iBAAG,IAAIqF,KAAK,CAC9BrI,OAAO,CAACgD,WAAW,EACnBH,eAAe,CAAC7C,OAAO,CAACgD,WAAW,CAAC,EACpC,EAAE,EACF,MAAM,EACN,aAAa,CACd,EAAA4G,QAAA,CACA5J,OAAO,CAACiB,QAAQ,IAAGwI,KAAK,CAACzJ,OAAO,CAACiB,QAAQ,CAAC,EAAA2I,QAAA,CAC1C5J,OAAO,CAAC4C,gBAAgB,IAAG6G,KAAK,CAACzJ,OAAO,CAAC4C,gBAAgB,CAAC,EAAAgH,QAAA,CAC1D5J,OAAO,CAACiD,gBAAgB,iBAAG,IAAIoF,KAAK,CACnCrI,OAAO,CAACiD,gBAAgB,EACxBJ,eAAe,CAAC7C,OAAO,CAACiD,gBAAgB,CAAC,EACzC,EAAE,EACF,MAAM,EACN,eAAe,CAChB,EAAA2G,QAAA,CACA5J,OAAO,CAACkB,SAAS,iBAAG,IAAImH,KAAK,CAACrI,OAAO,CAACkB,SAAS,EAAE2B,eAAe,CAAC7C,OAAO,CAACkB,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAA0I,QAAA,CACjH5J,OAAO,CAACkD,iBAAiB,iBAAG,IAAImF,KAAK,CACpCrI,OAAO,CAACkD,iBAAiB,EACzBL,eAAe,CAAC7C,OAAO,CAACkD,iBAAiB,CAAC,EAC1C,EAAE,EACF,OAAO,EACP,cAAc,CACf,EAAA0G,QAAA,CACA5J,OAAO,CAACmB,IAAI,iBAAG,IAAIkH,KAAK,CAACrI,OAAO,CAACmB,IAAI,EAAE0B,eAAe,CAAC7C,OAAO,CAACmB,IAAI,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,YAAY,CAAC,EAAAyI,QAAA,CAC9F5J,OAAO,CAACmD,YAAY,iBAAG,IAAIkF,KAAK,CAC/BrI,OAAO,CAACmD,YAAY,EACpBN,eAAe,CAAC7C,OAAO,CAACmD,YAAY,CAAC,EACrC,EAAE,EACF,KAAK,EACL,YAAY,CACb,EAAAyG,QAAA,CACA5J,OAAO,CAACoB,OAAO,iBAAG,IAAIiH,KAAK,CAACrI,OAAO,CAACoB,OAAO,EAAEyB,eAAe,CAAC7C,OAAO,CAACoB,OAAO,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,aAAa,CAAC,EAAAwI,QAAA,CACzG5J,OAAO,CAACoD,eAAe,iBAAG,IAAIiF,KAAK,CAClCrI,OAAO,CAACoD,eAAe,EACvBP,eAAe,CAAC7C,OAAO,CAACoD,eAAe,CAAC,EACxC,EAAE,EACF,MAAM,EACN,aAAa,CACd,EAAAwG,QAAA,CACA5J,OAAO,CAACqB,IAAI,iBAAG,IAAIgH,KAAK,CAACrI,OAAO,CAACqB,IAAI,EAAEwB,eAAe,CAAC7C,OAAO,CAACqB,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,mBAAmB,CAAC,EAAAuI,QAAA,CACtG5J,OAAO,CAACsB,YAAY,iBAAG,IAAI+G,KAAK,CAC/BrI,OAAO,CAACsB,YAAY,EACpBuB,eAAe,CAAC7C,OAAO,CAACsB,YAAY,CAAC,EACrC,EAAE,EACF,MAAM,EACN,mBAAmB,CACpB,EAAAsI,QAAA,CACA5J,OAAO,CAAC0B,IAAI,iBAAG,IAAI2G,KAAK,CAACrI,OAAO,CAAC0B,IAAI,EAAEmB,eAAe,CAAC7C,OAAO,CAAC0B,IAAI,CAAC,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,EAAAkI,QAAA,CACzF5J,OAAO,CAACuB,IAAI,iBAAG,IAAI8G,KAAK,CAACrI,OAAO,CAACuB,IAAI,EAAEsB,eAAe,CAAC7C,OAAO,CAACuB,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAAqI,QAAA,CAClG5J,OAAO,CAACyB,SAAS,iBAAG,IAAI4G,KAAK,CAC5BrI,OAAO,CAACyB,SAAS,EACjBoB,eAAe,CAAC7C,OAAO,CAACyB,SAAS,CAAC,EAClC,EAAE,EACF,OAAO,EACP,mBAAmB,CACpB,EAAAmI,QAAA,CACA5J,OAAO,CAAC4B,IAAI,iBAAG,IAAIyG,KAAK,CAACrI,OAAO,CAAC4B,IAAI,EAAEiB,eAAe,CAAC7C,OAAO,CAAC4B,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAAgI,QAAA,CAClG5J,OAAO,CAAC2B,KAAK,iBAAG,IAAI0G,KAAK,CAACrI,OAAO,CAAC2B,KAAK,EAAEkB,eAAe,CAAC7C,OAAO,CAAC2B,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,eAAe,CAAC,EAAAiI,QAAA,CACtG5J,OAAO,CAAC6B,QAAQ,iBAAG,IAAIwG,KAAK,CAACrI,OAAO,CAAC6B,QAAQ,EAAEgB,eAAe,CAAC7C,OAAO,CAAC6B,QAAQ,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,iBAAiB,CAAC,EAAA+H,QAAA,CACjH5J,OAAO,CAAC8B,IAAI,iBAAG,IAAIuG,KAAK,CAACrI,OAAO,CAAC8B,IAAI,EAAEe,eAAe,CAAC7C,OAAO,CAAC8B,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAA8H,QAAA,CAClG5J,OAAO,CAAC+B,KAAK,iBAAG,IAAIsG,KAAK,CAACrI,OAAO,CAAC+B,KAAK,EAAEc,eAAe,CAAC7C,OAAO,CAAC+B,KAAK,CAAC,EAAE,EAAE,EAAE,QAAQ,EAAE,eAAe,CAAC,EAAA6H,QAAA,CACvG5J,OAAO,CAACuC,aAAa,IAAGkH,KAAK,CAACzJ,OAAO,CAACuC,aAAa,CAAC,EAAAqH,QAAA,CACpD5J,OAAO,CAACqD,SAAS,iBAAG,IAAIgF,KAAK,CAACrI,OAAO,CAACqD,SAAS,EAAER,eAAe,CAAC7C,OAAO,CAACqD,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,CAAC,EAAAuG,QAAA,CACnH;AAED,IAAaC,KAAK,IAAAC,MAAA,OAAAA,MAAA,CACf9J,OAAO,CAACQ,QAAQ,iBAAG,IAAI6H,KAAK,CAACrI,OAAO,CAACQ,QAAQ,EAAEF,aAAa,CAACN,OAAO,CAACQ,QAAQ,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAsJ,MAAA,CAC1G9J,OAAO,CAACS,OAAO,iBAAG,IAAI4H,KAAK,CAACrI,OAAO,CAACS,OAAO,EAAEH,aAAa,CAACN,OAAO,CAACS,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAqJ,MAAA,CACvG9J,OAAO,CAACU,OAAO,iBAAG,IAAI2H,KAAK,CAACrI,OAAO,CAACU,OAAO,EAAEJ,aAAa,CAACN,OAAO,CAACU,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAoJ,MAAA,CACvG9J,OAAO,CAACW,KAAK,iBAAG,IAAI0H,KAAK,CAACrI,OAAO,CAACW,KAAK,EAAEL,aAAa,CAACN,OAAO,CAACW,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAmJ,MAAA,CACjG9J,OAAO,CAACY,KAAK,iBAAG,IAAIyH,KAAK,CAACrI,OAAO,CAACY,KAAK,EAAEN,aAAa,CAACN,OAAO,CAACY,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAkJ,MAAA,CACjG9J,OAAO,CAACc,KAAK,iBAAG,IAAIuH,KAAK,CAACrI,OAAO,CAACc,KAAK,EAAER,aAAa,CAACN,OAAO,CAACc,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAgJ,MAAA,CACjG9J,OAAO,CAACa,MAAM,iBAAG,IAAIwH,KAAK,CAACrI,OAAO,CAACa,MAAM,EAAEP,aAAa,CAACN,OAAO,CAACa,MAAM,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAiJ,MAAA,CACpG9J,OAAO,CAACe,IAAI,iBAAG,IAAIsH,KAAK,CAACrI,OAAO,CAACe,IAAI,EAAET,aAAa,CAACN,OAAO,CAACe,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA+I,MAAA,CAC9F9J,OAAO,CAACgB,GAAG,iBAAG,IAAIqH,KAAK,CAACrI,OAAO,CAACgB,GAAG,EAAEV,aAAa,CAACN,OAAO,CAACgB,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA8I,MAAA,CAC3F9J,OAAO,CAACiB,QAAQ,iBAAG,IAAIoH,KAAK,CAACrI,OAAO,CAACiB,QAAQ,EAAEX,aAAa,CAACN,OAAO,CAACiB,QAAQ,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA6I,MAAA,CAC1G9J,OAAO,CAACkB,SAAS,iBAAG,IAAImH,KAAK,CAACrI,OAAO,CAACkB,SAAS,EAAEZ,aAAa,CAACN,OAAO,CAACkB,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA4I,MAAA,CAC7G9J,OAAO,CAACqB,IAAI,iBAAG,IAAIgH,KAAK,CAACrI,OAAO,CAACqB,IAAI,EAAEf,aAAa,CAACN,OAAO,CAACqB,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAyI,MAAA,CAC9F9J,OAAO,CAACoB,OAAO,iBAAG,IAAIiH,KAAK,CAACrI,OAAO,CAACoB,OAAO,EAAEd,aAAa,CAACN,OAAO,CAACoB,OAAO,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA0I,MAAA,CACvG9J,OAAO,CAACmB,IAAI,iBAAG,IAAIkH,KAAK,CAACrI,OAAO,CAACmB,IAAI,EAAEb,aAAa,CAACN,OAAO,CAACmB,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA2I,MAAA,CAC9F9J,OAAO,CAAC0B,IAAI,iBAAG,IAAI2G,KAAK,CAACrI,OAAO,CAAC0B,IAAI,EAAEpB,aAAa,CAACN,OAAO,CAAC0B,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAoI,MAAA,CAC9F9J,OAAO,CAACyB,SAAS,iBAAG,IAAI4G,KAAK,CAACrI,OAAO,CAACyB,SAAS,EAAEnB,aAAa,CAACN,OAAO,CAACyB,SAAS,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAqI,MAAA,CAC7G9J,OAAO,CAAC4B,IAAI,iBAAG,IAAIyG,KAAK,CAACrI,OAAO,CAAC4B,IAAI,EAAEtB,aAAa,CAACN,OAAO,CAAC4B,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAkI,MAAA,CAC9F9J,OAAO,CAAC2B,KAAK,iBAAG,IAAI0G,KAAK,CAACrI,OAAO,CAAC2B,KAAK,EAAErB,aAAa,CAACN,OAAO,CAAC2B,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAmI,MAAA,CACjG9J,OAAO,CAAC6B,QAAQ,iBAAG,IAAIwG,KAAK,CAACrI,OAAO,CAAC6B,QAAQ,EAAEvB,aAAa,CAACN,OAAO,CAAC6B,QAAQ,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAiI,MAAA,CAC1G9J,OAAO,CAAC8B,IAAI,iBAAG,IAAIuG,KAAK,CAACrI,OAAO,CAAC8B,IAAI,EAAExB,aAAa,CAACN,OAAO,CAAC8B,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAAgI,MAAA,CAC9F9J,OAAO,CAAC+B,KAAK,iBAAG,IAAIsG,KAAK,CAACrI,OAAO,CAAC+B,KAAK,EAAEzB,aAAa,CAACN,OAAO,CAAC+B,KAAK,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,YAAY,CAAC,EAAA+H,MAAA,CACnG;;ICxMYC,SAAU,0BAAAC,eAAA;EAAAnC,cAAA,CAAAkC,SAAA,EAAAC,eAAA;EACrB,SAAAD,UAAsB/C,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC;;EACxC+C,SAAA,CAUaE,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI+C,SAAS,CAAC/C,OAAO,CAAC;GAC9E;EAAA,IAAAuB,MAAA,GAAAwB,SAAA,CAAAvB,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAiB,SAAA;IAAAhB,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAN,SAAA;AAAA,EAT4BpC,cAAc;AAW5BoC,gBAAM,GAAqC,EAAE;;ICXjDO,OAAQ,0BAAAN,eAAA;EAAAnC,cAAA,CAAAyC,OAAA,EAAAN,eAAA;EACnB,SAAAM,QAAsBtD,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,cAAc,CAAC;;EAC1CsD,OAAA,CAUaL,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIsD,OAAO,CAACtD,OAAO,CAAC;GAC5E;EAAA,IAAAuB,MAAA,GAAA+B,OAAA,CAAA9B,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAwB,OAAA;IAAAvB,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAC,OAAA;AAAA,EAT0B3C,cAAc;AAW1B2C,cAAM,GAAmC,EAAE;;ICX/CC,IAAK,0BAAAP,eAAA;EAAAnC,cAAA,CAAA0C,IAAA,EAAAP,eAAA;EAChB,SAAAO,KAAsBvD,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnCuD,IAAA,CAUaN,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIuD,IAAI,CAACvD,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAgC,IAAA,CAAA/B,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAyB,IAAA;IAAAxB,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMwB,KAAK,GAAGb,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACnC,CAAU,CAAC,CAACwD,KAAK,GAAAlD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjBC,SAAS,QAAU,SAAS,IAA5BA,SAAS;MACT,OAAO+C,KAAK;;;EACb,OAAAD,IAAA;AAAA,EATuB5C,cAAc;AAWvB4C,WAAM,GAAgC,EAAE;;ACXzD;;;AAGA,IAAaE,KAAM,0BAAAT,eAAA;EAAAnC,cAAA,CAAA4C,KAAA,EAAAT,eAAA;EACjB,SAAAS,MAAsBzD,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC;;EACnCyD,KAAA,CAUaR,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAA0D,qBAAA,GAAO,IAAI,CAACC,WAAW,CAAC3D,OAAO,CAAC,YAAA0D,qBAAA,GAAK,IAAI,CAACC,WAAW,CAAC3D,OAAO,CAAC,GAAG,IAAIyD,KAAK,CAACzD,OAAO,CAAC;GACpF;EAAA,IAAAuB,MAAA,GAAAkC,KAAA,CAAAjC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA2B,KAAA;IAAA1B,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAM4B,KAAK,GAAGnB,KAAK,CAAC,IAAI,CAACzC,OAAO,CAAC;MACjC,CAAU,CAAC,CAAC4D,KAAK,GAAAtD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjBC,SAAS,QAAU,SAAS,IAA5BA,SAAS;MACT,OAAOmD,KAAK;;;EACb,OAAAH,KAAA;AAAA,EATwB9C,cAAc;AAWxB8C,iBAAW,GAAiC,EAAE;;ICdlDI,MAAO,0BAAAb,eAAA;EAAAnC,cAAA,CAAAgD,MAAA,EAAAb,eAAA;EAClB,SAAAa,OAAsB7D,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,QAAQ,CAAC;;EACpC6D,MAAA,CAUaZ,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI6D,MAAM,CAAC7D,OAAO,CAAC;GAC3E;EAAA,IAAAuB,MAAA,GAAAsC,MAAA,CAAArC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA+B,MAAA;IAAA9B,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAQ,MAAA;AAAA,EATyBlD,cAAc;AAWzBkD,aAAM,GAAkC,EAAE;;ICX9CC,OAAQ,0BAAAd,eAAA;EAAAnC,cAAA,CAAAiD,OAAA,EAAAd,eAAA;EACnB,SAAAc,QAAsB9D,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,SAAS,CAAC;;EACrC8D,OAAA,CAUab,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI8D,OAAO,CAAC9D,OAAO,CAAC;GAC5E;EAAA,IAAAuB,MAAA,GAAAuC,OAAA,CAAAtC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAgC,OAAA;IAAA/B,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAS,OAAA;AAAA,EAT0BnD,cAAc;AAW1BmD,cAAM,GAAmC,EAAE;;ICX/CC,IAAK,0BAAAf,eAAA;EAAAnC,cAAA,CAAAkD,IAAA,EAAAf,eAAA;EAChB,SAAAe,KAAsB/D,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,IAAI,EAAE,aAAa,CAAC;;EACxC+D,IAAA,CAUad,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI+D,IAAI,CAAC/D,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAwC,IAAA,CAAAvC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAiC,IAAA;IAAAhC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAU,IAAA;AAAA,EATuBpD,cAAc;AAWvBoD,WAAM,GAAgC,EAAE;;ICX5CC,KAAM,0BAAAhB,eAAA;EAAAnC,cAAA,CAAAmD,KAAA,EAAAhB,eAAA;EACjB,SAAAgB,MAAsBhE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC;;EACrCgE,KAAA,CAUaf,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIgE,KAAK,CAAChE,OAAO,CAAC;GAC1E;EAAA,IAAAuB,MAAA,GAAAyC,KAAA,CAAAxC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAkC,KAAA;IAAAjC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAW,KAAA;AAAA,EATwBrD,cAAc;AAWxBqD,YAAM,GAAiC,EAAE;;ICX7CC,IAAK,0BAAAjB,eAAA;EAAAnC,cAAA,CAAAoD,IAAA,EAAAjB,eAAA;EAChB,SAAAiB,KAAsBjE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,WAAW,CAAC;;EACxCiE,IAAA,CAUahB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIiE,IAAI,CAACjE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAA0C,IAAA,CAAAzC,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAmC,IAAA;IAAAlC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAY,IAAA;AAAA,EATuBtD,cAAc;AAWvBsD,WAAM,GAAgC,EAAE;;ICX5CC,IAAK,0BAAAlB,eAAA;EAAAnC,cAAA,CAAAqD,IAAA,EAAAlB,eAAA;EAChB,SAAAkB,KAAsBlE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,WAAW,CAAC;;EACvCkE,IAAA,CAUajB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIkE,IAAI,CAAClE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAA2C,IAAA,CAAA1C,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAoC,IAAA;IAAAnC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAa,IAAA;AAAA,EATuBvD,cAAc;AAWvBuD,WAAM,GAAgC,EAAE;;ICX5CC,IAAK,0BAAAnB,eAAA;EAAAnC,cAAA,CAAAsD,IAAA,EAAAnB,eAAA;EAChB,SAAAmB,KAAsBnE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnCmE,IAAA,CAUalB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAImE,IAAI,CAACnE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAA4C,IAAA,CAAA3C,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAqC,IAAA;IAAApC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAc,IAAA;AAAA,EATuBxD,cAAc;AAWvBwD,WAAM,GAAgC,EAAE;;ICX5CC,KAAM,0BAAApB,eAAA;EAAAnC,cAAA,CAAAuD,KAAA,EAAApB,eAAA;EACjB,SAAAoB,MAAsBpE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnCoE,KAAA,CAUanB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIoE,KAAK,CAACpE,OAAO,CAAC;GAC1E;EAAA,IAAAuB,MAAA,GAAA6C,KAAA,CAAA5C,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAsC,KAAA;IAAArC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqC,MAAM,GAAG1B,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACpC,CAAU,CAAC,CAACqE,MAAM,GAAA/D,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAlBC,SAAS,QAAW,SAAS,IAA7BA,SAAS;MACT,OAAO4D,MAAM;;;EACd,OAAAD,KAAA;AAAA,EATwBzD,cAAc;AAWxByD,YAAM,GAAiC,EAAE;;ICX7CE,IAAK,0BAAAtB,eAAA;EAAAnC,cAAA,CAAAyD,IAAA,EAAAtB,eAAA;EAChB,SAAAsB,KAAsBtE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnCsE,IAAA,CAUarB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIsE,IAAI,CAACtE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAA+C,IAAA,CAAA9C,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAwC,IAAA;IAAAvC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAiB,IAAA;AAAA,EATuB3D,cAAc;AAWvB2D,WAAM,GAAgC,EAAE;;ICX5CC,IAAK,0BAAAvB,eAAA;EAAAnC,cAAA,CAAA0D,IAAA,EAAAvB,eAAA;EAChB,SAAAuB,KAAsBvE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnCuE,IAAA,CAUatB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIuE,IAAI,CAACvE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAgD,IAAA,CAAA/C,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAAyC,IAAA;IAAAxC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAkB,IAAA;AAAA,EATuB5D,cAAc;AAWvB4D,WAAM,GAAgC,EAAE;;ICX5CC,KAAM,0BAAAxB,eAAA;EAAAnC,cAAA,CAAA2D,KAAA,EAAAxB,eAAA;EACjB,SAAAwB,MAAsBxE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,OAAO,CAAC;;EACpCwE,KAAA,CAUavB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIwE,KAAK,CAACxE,OAAO,CAAC;GAC1E;EAAA,IAAAuB,MAAA,GAAAiD,KAAA,CAAAhD,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA0C,KAAA;IAAAzC,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAmB,KAAA;AAAA,EATwB7D,cAAc;AAWxB6D,YAAM,GAAiC,EAAE;;ICX7CC,IAAK,0BAAAzB,eAAA;EAAAnC,cAAA,CAAA4D,IAAA,EAAAzB,eAAA;EAChB,SAAAyB,KAAsBzE,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,CAAC;;EACtCyE,IAAA,CAUaxB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAIyE,IAAI,CAACzE,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAkD,IAAA,CAAAjD,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA2C,IAAA;IAAA1C,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAoB,IAAA;AAAA,EATuB9D,cAAc;AAWvB8D,WAAM,GAAgC,EAAE;;ICX5CC,IAAK,0BAAA1B,eAAA;EAAAnC,cAAA,CAAA6D,IAAA,EAAA1B,eAAA;EAChB,SAAA0B,KAAsB1E,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnC0E,IAAA,CAUazB,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI0E,IAAI,CAAC1E,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAmD,IAAA,CAAAlD,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA4C,IAAA;IAAA3C,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAqB,IAAA;AAAA,EATuB/D,cAAc;AAWvB+D,WAAM,GAAgC,EAAE;;ICX5CC,KAAM,0BAAA3B,eAAA;EAAAnC,cAAA,CAAA8D,KAAA,EAAA3B,eAAA;EACjB,SAAA2B,MAAsB3E,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,CAAC;;EACrC2E,KAAA,CAUa1B,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI2E,KAAK,CAAC3E,OAAO,CAAC;GAC1E;EAAA,IAAAuB,MAAA,GAAAoD,KAAA,CAAAnD,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA6C,KAAA;IAAA5C,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMqB,OAAO,GAAGV,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACrC,CAAU,CAAC,CAACqD,OAAO,GAAA/C,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnBC,SAAS,QAAY,SAAS,IAA9BA,SAAS;MACT,OAAO4C,OAAO;;;EACf,OAAAsB,KAAA;AAAA,EATwBhE,cAAc;AAWxBgE,YAAM,GAAiC,EAAE;;ICX7CC,IAAK,0BAAA5B,eAAA;EAAAnC,cAAA,CAAA+D,IAAA,EAAA5B,eAAA;EAChB,SAAA4B,KAAsB5E,OAAe;WACnCgD,eAAA,CAAA1B,IAAA,OAAMtB,OAAO,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC;;EACnC4E,IAAA,CAUa3B,OAAO,GAAd,SAAAA,QAAejD,OAAe;;IACnC,QAAAkD,oBAAA,GAAO,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,YAAAkD,oBAAA,GAAK,IAAI,CAACC,MAAM,CAACnD,OAAO,CAAC,GAAG,IAAI4E,IAAI,CAAC5E,OAAO,CAAC;GACzE;EAAA,IAAAuB,MAAA,GAAAqD,IAAA,CAAApD,SAAA;EAAAD,MAAA,CAEME,MAAM,GAAN,SAAAA,OAAOC,KAAe;IAC3B,OAAOA,KAAK,CAAC0B,QAAQ,IAAI1B,KAAK,CAAC1B,OAAO,KAAK,IAAI,CAACA,OAAO;GACxD;EAAA8B,YAAA,CAAA8C,IAAA;IAAA7C,GAAA;IAAAC,GAAA,EAdD,SAAAA;MACE,IAAMwB,KAAK,GAAGb,OAAO,CAAC,IAAI,CAAC3C,OAAO,CAAC;MACnC,CAAU,CAAC,CAACwD,KAAK,GAAAlD,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjBC,SAAS,QAAU,SAAS,IAA5BA,SAAS;MACT,OAAO+C,KAAK;;;EACb,OAAAoB,IAAA;AAAA,EATuBjE,cAAc;AAWvBiE,WAAM,GAAgC,EAAE;;;ACjBzD,IA0BaC,MAAM,IAAAC,OAAA,OAAAA,OAAA,CAChB9L,OAAO,CAACQ,QAAQ,iBAAGiK,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACQ,QAAQ,CAAC,EAAAsL,OAAA,CAClD9L,OAAO,CAACS,OAAO,iBAAGgK,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACS,OAAO,CAAC,EAAAqL,OAAA,CAChD9L,OAAO,CAACU,OAAO,iBAAG+J,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACU,OAAO,CAAC,EAAAoL,OAAA,CAChD9L,OAAO,CAACW,KAAK,iBAAG8J,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACW,KAAK,CAAC,EAAAmL,OAAA,CAC5C9L,OAAO,CAACY,KAAK,iBAAG6J,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACY,KAAK,CAAC,EAAAkL,OAAA,CAC5C9L,OAAO,CAACa,MAAM,iBAAGgK,MAAM,CAACZ,OAAO,CAACjK,OAAO,CAACa,MAAM,CAAC,EAAAiL,OAAA,CAC/C9L,OAAO,CAAC+C,cAAc,iBAAG8H,MAAM,CAACZ,OAAO,CAACjK,OAAO,CAAC+C,cAAc,CAAC,EAAA+I,OAAA,CAC/D9L,OAAO,CAACc,KAAK,iBAAGkK,KAAK,CAACf,OAAO,CAACjK,OAAO,CAACc,KAAK,CAAC,EAAAgL,OAAA,CAC5C9L,OAAO,CAACmC,aAAa,iBAAG6I,KAAK,CAACf,OAAO,CAACjK,OAAO,CAACmC,aAAa,CAAC,EAAA2J,OAAA,CAC5D9L,OAAO,CAACe,IAAI,iBAAGoK,IAAI,CAAClB,OAAO,CAACjK,OAAO,CAACe,IAAI,CAAC,EAAA+K,OAAA,CACzC9L,OAAO,CAACgB,GAAG,iBAAGsJ,OAAO,CAACL,OAAO,CAACjK,OAAO,CAACgB,GAAG,CAAC,EAAA8K,OAAA,CAC1C9L,OAAO,CAACgD,WAAW,iBAAGsH,OAAO,CAACL,OAAO,CAACjK,OAAO,CAACgD,WAAW,CAAC,EAAA8I,OAAA,CAE1D9L,OAAO,CAACiB,QAAQ,iBAAGwJ,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACiB,QAAQ,CAAC,EAAA6K,OAAA,CAClD9L,OAAO,CAAC4C,gBAAgB,iBAAG6H,KAAK,CAACR,OAAO,CAACjK,OAAO,CAAC4C,gBAAgB,CAAC,EAAAkJ,OAAA,CAClE9L,OAAO,CAACkB,SAAS,iBAAG6I,SAAS,CAACE,OAAO,CAACjK,OAAO,CAACkB,SAAS,CAAC,EAAA4K,OAAA,CACxD9L,OAAO,CAACkD,iBAAiB,iBAAG6G,SAAS,CAACE,OAAO,CAACjK,OAAO,CAACkD,iBAAiB,CAAC,EAAA4I,OAAA,CACxE9L,OAAO,CAACmB,IAAI,iBAAG4J,IAAI,CAACd,OAAO,CAACjK,OAAO,CAACmB,IAAI,CAAC,EAAA2K,OAAA,CACzC9L,OAAO,CAACmD,YAAY,iBAAG4H,IAAI,CAACd,OAAO,CAACjK,OAAO,CAACmD,YAAY,CAAC,EAAA2I,OAAA,CACzD9L,OAAO,CAACoB,OAAO,iBAAG0J,OAAO,CAACb,OAAO,CAACjK,OAAO,CAACoB,OAAO,CAAC,EAAA0K,OAAA,CAClD9L,OAAO,CAACoD,eAAe,iBAAG0H,OAAO,CAACb,OAAO,CAACjK,OAAO,CAACoD,eAAe,CAAC,EAAA0I,OAAA,CAClE9L,OAAO,CAACqB,IAAI,iBAAG6J,IAAI,CAACjB,OAAO,CAACjK,OAAO,CAACqB,IAAI,CAAC,EAAAyK,OAAA,CACzC9L,OAAO,CAACsB,YAAY,iBAAG4J,IAAI,CAACjB,OAAO,CAACjK,OAAO,CAACsB,YAAY,CAAC,EAAAwK,OAAA,CACzD9L,OAAO,CAAC0B,IAAI,iBAAG6I,IAAI,CAACN,OAAO,CAACjK,OAAO,CAAC0B,IAAI,CAAC,EAAAoK,OAAA,CACzC9L,OAAO,CAACoC,IAAI,iBAAGgJ,KAAK,CAACnB,OAAO,CAACjK,OAAO,CAACoC,IAAI,CAAC,EAAA0J,OAAA,CAC1C9L,OAAO,CAACqC,YAAY,iBAAG+I,KAAK,CAACnB,OAAO,CAACjK,OAAO,CAACqC,YAAY,CAAC,EAAAyJ,OAAA,CAC1D9L,OAAO,CAACuB,IAAI,iBAAG+J,IAAI,CAACrB,OAAO,CAACjK,OAAO,CAACuB,IAAI,CAAC,EAAAuK,OAAA,CACzC9L,OAAO,CAACyB,SAAS,iBAAGwJ,IAAI,CAAChB,OAAO,CAACjK,OAAO,CAACyB,SAAS,CAAC,EAAAqK,OAAA,CACnD9L,OAAO,CAAC4B,IAAI,iBAAG2J,IAAI,CAACtB,OAAO,CAACjK,OAAO,CAAC4B,IAAI,CAAC,EAAAkK,OAAA,CACzC9L,OAAO,CAAC2B,KAAK,iBAAG6J,KAAK,CAACvB,OAAO,CAACjK,OAAO,CAAC2B,KAAK,CAAC,EAAAmK,OAAA,CAC5C9L,OAAO,CAAC6B,QAAQ,iBAAG4J,IAAI,CAACxB,OAAO,CAACjK,OAAO,CAAC6B,QAAQ,CAAC,EAAAiK,OAAA,CACjD9L,OAAO,CAACsC,QAAQ,iBAAGmI,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACsC,QAAQ,CAAC,EAAAwJ,OAAA,CAClD9L,OAAO,CAAC8B,IAAI,iBAAG4J,IAAI,CAACzB,OAAO,CAACjK,OAAO,CAAC8B,IAAI,CAAC,EAAAgK,OAAA,CACzC9L,OAAO,CAAC+B,KAAK,iBAAG4J,KAAK,CAAC1B,OAAO,CAACjK,OAAO,CAAC+B,KAAK,CAAC,EAAA+J,OAAA,CAC5C9L,OAAO,CAACuC,aAAa,iBAAGkI,KAAK,CAACR,OAAO,CAACjK,OAAO,CAACuC,aAAa,CAAC,EAAAuJ,OAAA,CAC5D9L,OAAO,CAACqD,SAAS,iBAAGuI,IAAI,CAAC3B,OAAO,CAACjK,OAAO,CAACqD,SAAS,CAAC,EAAAyI,OAAA,CACrD;;IC7DYC,UAAU,gBAAGC,IAAI,CAACC,MAAM,CAAC,oEAAoE,CAAC;AAE3G;AACA,IAAaC,IAAI,gBAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAClC,IAAaE,GAAG,gBAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AACjC,IAAaG,GAAG,gBAAGJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AACjC,IAAaI,KAAK,gBAAGL,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AACnC,IAAaK,IAAI,gBAAGN,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;AAClC,IAAaM,GAAG,gBAAGP,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC;AAClC,IAAaO,IAAI,gBAAGR,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC;AACpC,IAAaQ,IAAI,gBAAGT,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC;AACpC,IAAaS,KAAK,gBAAGV,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC;AAEtC,IAAaU,iBAAiB,gBAAGX,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC;;;ACflD,IAGaW,oBAAoB,IAAAC,qBAAA,OAAAA,qBAAA,CAC9B1M,YAAY,CAAC2M,KAAK,iBAAGd,IAAI,CAACC,MAAM,CAAC,MAAM,CAAC,EAAAY,qBAAA,CACxC1M,YAAY,CAAC4M,OAAO,iBAAGf,IAAI,CAACC,MAAM,CAAC,oEAAoE,CAAC,EAAAY,qBAAA,CAC1G;;ACND;AACA,IAAMG,iBAAiB,IAAG,gBAAgB,IAAIC,MAAM;AAEpD;;;;AAIA,IAAaC,yBAA0B,0BAAAC,MAAA;EAAAtF,cAAA,CAAAqF,yBAAA,EAAAC,MAAA;EAGrC,SAAAD;;IACEpF,KAAA,GAAAqF,MAAA,CAAA7E,IAAA,MAAO;IAHOR,KAAA,4BAA2B,GAAS,IAAI;IAItDA,KAAA,CAAKX,IAAI,GAAGW,KAAA,CAAKsF,WAAW,CAACjG,IAAI;IACjC,IAAI6F,iBAAiB,EAAEC,MAAM,CAACI,cAAc,CAAAC,sBAAA,CAAAxF,KAAA,GAAO,iBAAAoF,yBAAA,QAAAE,WAAA,WAAW5E,SAAS,CAAC;IAAA,OAAAV,KAAA;;EACzE,OAAAoF,yBAAA;AAAA,gBAAAK,gBAAA,CAP4CC,KAAK;AAUpD;;;;AAIA,IAAaC,4BAA6B,0BAAAC,OAAA;EAAA7F,cAAA,CAAA4F,4BAAA,EAAAC,OAAA;EAGxC,SAAAD;;IACEE,MAAA,GAAAD,OAAA,CAAApF,IAAA,MAAO;IAHOqF,MAAA,+BAA8B,GAAS,IAAI;IAIzDA,MAAA,CAAKxG,IAAI,GAAGwG,MAAA,CAAKP,WAAW,CAACjG,IAAI;IACjC,IAAI6F,iBAAiB,EAAEC,MAAM,CAACI,cAAc,CAAAC,sBAAA,CAAAK,MAAA,GAAO,iBAAAF,4BAAA,QAAAL,WAAA,WAAW5E,SAAS,CAAC;IAAA,OAAAmF,MAAA;;EACzE,OAAAF,4BAAA;AAAA,gBAAAF,gBAAA,CAP+CC,KAAK;;;ACrBvD,AASA,IAAMI,OAAO,gBAAGC,QAAQ,CAACC,QAAQ,CAAC;AAClC,IAAMC,GAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1BD,GAAG,CAACE,MAAM,GAAG,IAAI;AAEjB,IAAMC,qBAAqB,IAAAC,qBAAA,OAAAA,qBAAA,CACxBjO,QAAQ,CAACkO,UAAU,IAAGR,OAAO,CAACQ,UAAU,EAAAD,qBAAA,CACxCjO,QAAQ,CAACmO,aAAa,IAAGT,OAAO,CAACS,aAAa,EAAAF,qBAAA,CAC9CjO,QAAQ,CAACoO,QAAQ,IAAGV,OAAO,CAACU,QAAQ,EAAAH,qBAAA,CACtC;AAED,IAAMI,eAAe,IAAAC,gBAAA,OAAAA,gBAAA,CAElBtO,QAAQ,CAACkO,UAAU,IAAGlO,QAAQ,CAACuO,SAAS,EAAAD,gBAAA,CAExCtO,QAAQ,CAACmO,aAAa,IAAGnO,QAAQ,CAACwO,WAAW,EAAAF,gBAAA,CAG7CtO,QAAQ,CAACoO,QAAQ,IAAGpO,QAAQ,CAACyO,OAAO,EAAAH,gBAAA,CACtC;AAED,IAAaI,QAAQ;EAInB,SAAAA,SAAmBC,SAAoB,EAAEC;QAAAA;MAAAA,cAAyB9C,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC;;IAC9E,IAAI,CAAC4C,SAAS,GAAG7C,IAAI,CAACC,MAAM,CAAC4C,SAAS,CAAC;IACvC,IAAI,CAACC,WAAW,GAAG9C,IAAI,CAACC,MAAM,CAAC6C,WAAW,CAAC;;EAC5CF,QAAA,CAEcG,gBAAgB,GAAvB,SAAAA,iBAAwBC,WAAiC;IAC/D,IAAIA,WAAW,YAAYhD,IAAI,IAAI,OAAOgD,WAAW,KAAK,QAAQ,IAAI,OAAOA,WAAW,KAAK,QAAQ,EACnG,OAAO,IAAIJ,QAAQ,CAACI,WAAW,CAAC;IAElC,IAAI,WAAW,IAAIA,WAAW,IAAI,aAAa,IAAIA,WAAW,EAAE,OAAOA,WAAW;IAClF,MAAM,IAAIxB,KAAK,CAAC,0BAA0B,CAAC;;;;EAG7C,IAAAjF,MAAA,GAAAqG,QAAA,CAAApG,SAAA;EAAAD,MAAA,CAUO0G,MAAM,GAAN,SAAAA;IACL,OAAO,IAAIL,QAAQ,CAAC,IAAI,CAACE,WAAW,EAAE,IAAI,CAACD,SAAS,CAAC;GACtD;EAAAtG,MAAA,CAEM2G,GAAG,GAAH,SAAAA,IAAIxG,KAA2B;IACpC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,IAAIsD,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACN,WAAW,EAAEK,WAAW,CAACL,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAAC5C,IAAI,CAACkD,GAAG,CAAC,IAAI,CAACL,SAAS,EAAEM,WAAW,CAACN,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAExF,OAAO,IAAIF,QAAQ,CACjB5C,IAAI,CAACkD,GAAG,CACNlD,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAACF,WAAW,CAACN,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACD9C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACP,WAAW,EAAEK,WAAW,CAACL,WAAW,CAAC,CACzD;GACF;EAAAvG,MAAA,CAEM+G,QAAQ,GAAR,SAAAA,SAAS5G,KAA2B;IACzC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,IAAIsD,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACN,WAAW,EAAEK,WAAW,CAACL,WAAW,CAAC,EAAE;MACzD,OAAO,IAAIF,QAAQ,CAAC5C,IAAI,CAACsD,QAAQ,CAAC,IAAI,CAACT,SAAS,EAAEM,WAAW,CAACN,SAAS,CAAC,EAAE,IAAI,CAACC,WAAW,CAAC;;IAE7F,OAAO,IAAIF,QAAQ,CACjB5C,IAAI,CAACsD,QAAQ,CACXtD,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAACF,WAAW,CAACN,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD,EACD9C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACP,WAAW,EAAEK,WAAW,CAACL,WAAW,CAAC,CACzD;GACF;EAAAvG,MAAA,CAEMgH,QAAQ,GAAR,SAAAA,SAAS7G,KAA2B;IACzC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,OAAOsD,IAAI,CAACuD,QAAQ,CAClBvD,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAACF,WAAW,CAACN,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAvG,MAAA,CAEMiH,OAAO,GAAP,SAAAA,QAAQ9G,KAA2B;IACxC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,OAAOsD,IAAI,CAACoD,KAAK,CACfpD,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAACF,WAAW,CAACN,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAvG,MAAA,CAEMkH,WAAW,GAAX,SAAAA,YAAY/G,KAA2B;IAC5C,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,OAAOsD,IAAI,CAACyD,WAAW,CACrBzD,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAACF,WAAW,CAACN,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,CACvD;GACF;EAAAvG,MAAA,CAEM8G,QAAQ,GAAR,SAAAA,SAAS3G,KAA2B;IACzC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,OAAO,IAAIkG,QAAQ,CACjB5C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACN,SAAS,CAAC,EACpD7C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACP,WAAW,EAAEK,WAAW,CAACL,WAAW,CAAC,CACzD;GACF;EAAAvG,MAAA,CAEMmH,MAAM,GAAN,SAAAA,OAAOhH,KAA2B;IACvC,IAAMyG,WAAW,GAAGP,QAAQ,CAACG,gBAAgB,CAACrG,KAAK,CAAC;IACpD,OAAO,IAAIkG,QAAQ,CACjB5C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACR,SAAS,EAAEM,WAAW,CAACL,WAAW,CAAC,EACtD9C,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACP,WAAW,EAAEK,WAAW,CAACN,SAAS,CAAC,CACvD;GACF;EAAAtG,MAAA,CAEMoH,aAAa,GAAb,SAAAA,cACLC,iBAAyB,EACzBC,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqB5P,QAAQ,CAACmO,aAAa;;IAE3C,CAAUjH,MAAM,CAACM,SAAS,CAACkI,iBAAiB,CAAC,GAAAtI,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA7CC,SAAS,QAAyCmI,iBAAiB,4BAAnEnI,SAAS;IACT,EAAUmI,iBAAiB,GAAG,CAAC,IAAAtI,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA/BC,SAAS,QAA2BmI,iBAAiB,0BAArDnI,SAAS;IAETmG,OAAO,CAACoC,GAAG,CAAC;MACVC,SAAS,EAAEL,iBAAiB,GAAG,CAAC;MAChCE,QAAQ,EAAE5B,qBAAqB,CAAC4B,QAAQ;KACzC,CAAC;IACF,IAAMI,QAAQ,GAAG,IAAItC,OAAO,CAAC,IAAI,CAACiB,SAAS,CAACsB,QAAQ,EAAE,CAAC,CACpDC,GAAG,CAAC,IAAI,CAACtB,WAAW,CAACqB,QAAQ,EAAE,CAAC,CAChCE,mBAAmB,CAACT,iBAAiB,CAAC;IACzC,OAAOM,QAAQ,CAACrC,QAAQ,CAACqC,QAAQ,CAACI,aAAa,EAAE,EAAET,MAAM,CAAC;GAC3D;EAAAtH,MAAA,CAEMgI,OAAO,GAAP,SAAAA,QACLD,aAAqB,EACrBT,QACAC;QADAD;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IAAA,IACvCD;MAAAA,WAAqB5P,QAAQ,CAACmO,aAAa;;IAE3C,CAAUjH,MAAM,CAACM,SAAS,CAAC4I,aAAa,CAAC,GAAAhJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAzCC,SAAS,QAAqC6I,aAAa,4BAA3D7I,SAAS;IACT,EAAU6I,aAAa,IAAI,CAAC,IAAAhJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA5BC,SAAS,QAAwB6I,aAAa,sBAA9C7I,SAAS;IAETsG,GAAG,CAACyC,EAAE,GAAGF,aAAa;IACtBvC,GAAG,CAAC0C,EAAE,GAAGlC,eAAe,CAACuB,QAAQ,CAAC;IAClC,OAAO,IAAI/B,GAAG,CAAC,IAAI,CAACc,SAAS,CAACsB,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,IAAI,CAACtB,WAAW,CAACqB,QAAQ,EAAE,CAAC,CAACtC,QAAQ,CAACyC,aAAa,EAAET,MAAM,CAAC;;;;;EAG5G/G,YAAA,CAAA8F,QAAA;IAAA7F,GAAA;IAAAC,GAAA,EAhHA,SAAAA;MACE,OAAOgD,IAAI,CAAC0D,MAAM,CAAC,IAAI,CAACb,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;;IAGtD/F,GAAA;IAAAC,GAAA,EACA,SAAAA;MACE,OAAO,IAAI4F,QAAQ,CAAC5C,IAAI,CAAC0E,SAAS,CAAC,IAAI,CAAC7B,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC,EAAE,IAAI,CAACA,WAAW,CAAC;;;IACxF/F,GAAA;IAAAC,GAAA,EA4GD,SAAAA;MACE,OAAO,IAAI4F,QAAQ,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;EACtD,OAAAF,QAAA;AAAA;;AC1JH,IAAMb,KAAG,gBAAGF,QAAQ,CAACG,IAAI,CAAC;AAE1BD,KAAG,CAACE,MAAM,GAAG,IAAI;AAEjB,IAAa0C,cAAmC,0BAAAC,SAAA;EAAA/I,cAAA,CAAA8I,cAAA,EAAAC,SAAA;EA2B9C,SAAAD,eAAsBE,QAAW,EAAEhC,SAAoB,EAAEC,WAAuB;;IAC9EhH,KAAA,GAAA8I,SAAA,CAAAtI,IAAA,OAAMuG,SAAS,EAAEC,WAAW,CAAC;IAC7B,CAAU9C,IAAI,CAAC8E,eAAe,CAAChJ,KAAA,CAAKoI,QAAQ,EAAEnE,UAAU,CAAC,GAAAzE,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAzDC,SAAS,QAAkD,QAAQ,IAAnEA,SAAS;IACTK,KAAA,CAAK+I,QAAQ,GAAGA,QAAQ;IACxB/I,KAAA,CAAKiJ,YAAY,GAAG/E,IAAI,CAACgF,YAAY,CAAChF,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC4E,QAAQ,CAAC5J,QAAQ,CAAC,CAAC;IAAA,OAAAa,KAAA;;;;;;;EA3BxF6I,cAAA,CAKcM,aAAa,GAApB,SAAAA,cAAyCJ,QAAW,EAAEK,SAAoB;IAC/E,OAAO,IAAIP,cAAc,CAACE,QAAQ,EAAEK,SAAS,CAAC;;;;;;;;EAGhDP,cAAA,CAMcQ,oBAAoB,GAA3B,SAAAA,qBACLN,QAAW,EACXhC,SAAoB,EACpBC,WAAsB;IAEtB,OAAO,IAAI6B,cAAc,CAACE,QAAQ,EAAEhC,SAAS,EAAEC,WAAW,CAAC;GAC5D;EAAA,IAAAvG,MAAA,GAAAoI,cAAA,CAAAnI,SAAA;EAAAD,MAAA,CASM2G,GAAG,GAAH,SAAAA,IAAIxG,KAAwB;IACjC,CAAU,IAAI,CAACmI,QAAQ,CAACpI,MAAM,CAACC,KAAK,CAACmI,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,UAAU,IAA1DA,SAAS;IACT,IAAM2J,KAAK,GAAAR,SAAA,CAAApI,SAAA,CAAS0G,GAAG,CAAA5G,IAAA,OAACI,KAAK,CAAC;IAC9B,OAAOiI,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEO,KAAK,CAACvC,SAAS,EAAEuC,KAAK,CAACtC,WAAW,CAAC;GAC9F;EAAAvG,MAAA,CAEM+G,QAAQ,GAAR,SAAAA,SAAS5G,KAAwB;IACtC,CAAU,IAAI,CAACmI,QAAQ,CAACpI,MAAM,CAACC,KAAK,CAACmI,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,UAAU,IAA1DA,SAAS;IACT,IAAM4J,UAAU,GAAAT,SAAA,CAAApI,SAAA,CAAS8G,QAAQ,CAAAhH,IAAA,OAACI,KAAK,CAAC;IACxC,OAAOiI,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEQ,UAAU,CAACxC,SAAS,EAAEwC,UAAU,CAACvC,WAAW,CAAC;GACxG;EAAAvG,MAAA,CAEM8G,QAAQ,GAAR,SAAAA,SAAS3G,KAA2B;IACzC,IAAM4I,UAAU,GAAAV,SAAA,CAAApI,SAAA,CAAS6G,QAAQ,CAAA/G,IAAA,OAACI,KAAK,CAAC;IACxC,OAAOiI,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAES,UAAU,CAACzC,SAAS,EAAEyC,UAAU,CAACxC,WAAW,CAAC;GACxG;EAAAvG,MAAA,CAEMmH,MAAM,GAAN,SAAAA,OAAOhH,KAA2B;IACvC,IAAM6I,OAAO,GAAAX,SAAA,CAAApI,SAAA,CAASkH,MAAM,CAAApH,IAAA,OAACI,KAAK,CAAC;IACnC,OAAOiI,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,EAAEU,OAAO,CAAC1C,SAAS,EAAE0C,OAAO,CAACzC,WAAW,CAAC;GAClG;EAAAvG,MAAA,CAEMoH,aAAa,GAAb,SAAAA,cACLC,mBACAC,MAAe,EACfC;QAFAF;MAAAA,oBAA4B,CAAC;;IAAA,IAE7BE;MAAAA,WAAqB5P,QAAQ,CAACkO,UAAU;;IAExC,OAAOwC,SAAA,CAAApI,SAAA,CAAMkH,MAAM,CAAApH,IAAA,OAAC,IAAI,CAACyI,YAAY,EAAEpB,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GAC1F;EAAAvH,MAAA,CAEMgI,OAAO,GAAP,SAAAA,QACLD,eACAT,MAAe,EACfC;QAFAQ;MAAAA,gBAAwB,IAAI,CAACO,QAAQ,CAAC5J,QAAQ;;IAAA,IAE9C6I;MAAAA,WAAqB5P,QAAQ,CAACkO,UAAU;;IAExC,EAAUkC,aAAa,IAAI,IAAI,CAACO,QAAQ,CAAC5J,QAAQ,IAAAK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjDC,SAAS,QAA0C,UAAU,IAA7DA,SAAS;IACT,OAAOmJ,SAAA,CAAApI,SAAA,CAAMkH,MAAM,CAAApH,IAAA,OAAC,IAAI,CAACyI,YAAY,EAAER,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GAChF;EAAAvH,MAAA,CAEMiJ,OAAO,GAAP,SAAAA,QAAQ3B;QAAAA;MAAAA,SAAiB;QAAEE,cAAc,EAAE;OAAI;;IACpDhC,KAAG,CAACyC,EAAE,GAAG,IAAI,CAACK,QAAQ,CAAC5J,QAAQ;IAC/B,OAAO,IAAI8G,KAAG,CAAC,IAAI,CAACmC,QAAQ,CAACC,QAAQ,EAAE,CAAC,CAACC,GAAG,CAAC,IAAI,CAACW,YAAY,CAACZ,QAAQ,EAAE,CAAC,CAACtC,QAAQ,CAACgC,MAAM,CAAC;GAC5F;;;;;;EAODtH,MAAA,CAKOkJ,SAAS,GAAT,SAAAA;IACL,aAAW,IAAI,CAACZ,QAAQ,CAACa,OAAO,CAAC1J,OAAO,WAAM,IAAI,CAACwJ,OAAO,EAAE;GAC7D;EAAA1I,YAAA,CAAA6H,cAAA;IAAA5H,GAAA;IAAAC,GAAA,EAZD,SAAAA;MACE,IAAI,IAAI,CAAC6H,QAAQ,CAAClI,OAAO,EAAE,OAAO,IAA6B;MAC/D,OAAOgI,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACN,QAAQ,CAACa,OAAO,EAAE,IAAI,CAAC7C,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;EACpG,OAAA6B,cAAA;AAAA,EAjFqD/B,QAAQ;;ICPnD+C,KAAuD,0BAAAf,SAAA;EAAA/I,cAAA,CAAA8J,KAAA,EAAAf,SAAA;;;;;EASlE,SAAAe;;IAUE,IAAIC,YAAmB,EAAEC,aAAqB,EAAE/C,WAAsB,EAAED,SAAoB;IAAA,SAAAiD,IAAA,GAAAC,SAAA,CAAAC,MAAA,EATzFC,IAOE,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAPFF,IAOE,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;;IAIL,IAAIF,IAAI,CAACD,MAAM,KAAK,CAAC,EAAE;MACnBJ,YAAY,GAA2CK,IAAI;MAA7CJ,aAAa,GAA4BI,IAAI;MAA9BnD,WAAW,GAAemD,IAAI;MAAjBpD,SAAS,GAAIoD,IAAI;KAC9D,MAAM;MACL,IAAMG,MAAM,GAAGH,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,CAAC3C,MAAM,CAACuC,IAAI,CAAC,CAAC,CAAC,CAACK,UAAU,CAAC;MAC5D,IAAAC,IAAA,GAAwD,CACvDN,IAAI,CAAC,CAAC,CAAC,CAACK,UAAU,CAACzB,QAAQ,EAC3BoB,IAAI,CAAC,CAAC,CAAC,CAACI,WAAW,CAACxB,QAAQ,EAC5BuB,MAAM,CAACtD,WAAW,EAClBsD,MAAM,CAACvD,SAAS,CACjB;MALC+C,YAAY,GAAAW,IAAA;MAAEV,aAAa,GAAAU,IAAA;MAAEzD,WAAW,GAAAyD,IAAA;MAAE1D,SAAS,GAAA0D,IAAA;;IAOvDzK,KAAA,GAAA8I,SAAA,CAAAtI,IAAA,OAAMuG,SAAS,EAAEC,WAAW,CAAC;IAE7BhH,KAAA,CAAK8J,YAAY,GAAGA,YAAY;IAChC9J,KAAA,CAAK+J,aAAa,GAAGA,aAAa;IAClC/J,KAAA,CAAK0K,MAAM,GAAG,IAAI5D,QAAQ,CACxB5C,IAAI,CAACgF,YAAY,CAAChF,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC2F,YAAY,CAAC3K,QAAQ,CAAC,CAAC,EACtE+E,IAAI,CAACgF,YAAY,CAAChF,IAAI,CAACC,MAAM,CAAC,EAAE,CAAC,EAAED,IAAI,CAACC,MAAM,CAAC4F,aAAa,CAAC5K,QAAQ,CAAC,CAAC,CACxE;IAAA,OAAAa,KAAA;;;;;EAGH,IAAAS,MAAA,GAAAoJ,KAAA,CAAAnJ,SAAA;EAAAD,MAAA,CAGO0G,MAAM,GAAN,SAAAA;IACL,OAAO,IAAI0C,KAAK,CAAC,IAAI,CAACE,aAAa,EAAE,IAAI,CAACD,YAAY,EAAE,IAAI,CAAC/C,SAAS,EAAE,IAAI,CAACC,WAAW,CAAC;;;;;;EAG3FvG,MAAA,CAIO8G,QAAQ,GAAR,SAAAA,SAAuC3G,KAAiC;IAC7E,CAAU,IAAI,CAACmJ,aAAa,CAACpJ,MAAM,CAACC,KAAK,CAACkJ,YAAY,CAAC,GAAAtK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAvDC,SAAS,QAAgD,OAAO,IAAhEA,SAAS;IACT,IAAMgL,QAAQ,GAAA7B,SAAA,CAAApI,SAAA,CAAS6G,QAAQ,CAAA/G,IAAA,OAACI,KAAK,CAAC;IACtC,OAAO,IAAIiJ,KAAK,CAAC,IAAI,CAACC,YAAY,EAAElJ,KAAK,CAACmJ,aAAa,EAAEY,QAAQ,CAAC3D,WAAW,EAAE2D,QAAQ,CAAC5D,SAAS,CAAC;;;;;;EAGpGtG,MAAA,CAIOmK,KAAK,GAAL,SAAAA,MAAMC,cAAqC;IAChD,CAAUA,cAAc,CAAC9B,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACmJ,YAAY,CAAC,GAAAtK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA3DC,SAAS,QAAoD,OAAO,IAApEA,SAAS;IACT,IAAM2K,MAAM,GAAAxB,SAAA,CAAApI,SAAA,CAAS6G,QAAQ,CAAA/G,IAAA,OAACqK,cAAc,CAAC;IAC7C,OAAOhC,cAAc,CAACQ,oBAAoB,CAAC,IAAI,CAACU,aAAa,EAAEO,MAAM,CAACvD,SAAS,EAAEuD,MAAM,CAACtD,WAAW,CAAC;;;;;;EAGtGvG,MAAA,CAQOoH,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAO,IAAI,CAACgD,mBAAmB,CAACjD,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACnF;EAAAvH,MAAA,CAEMgI,OAAO,GAAP,SAAAA,QAAQD,eAA2BT,MAAe,EAAEC,QAAmB;QAA/DQ;MAAAA,gBAAwB,CAAC;;IACtC,OAAO,IAAI,CAACsC,mBAAmB,CAACrC,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GACzE;EAAAhH,YAAA,CAAA6I,KAAA;IAAA5I,GAAA;IAAAC,GAAA,EAVD,SAAAA;MACE,OAAA4H,SAAA,CAAApI,SAAA,CAAa6G,QAAQ,CAAA/G,IAAA,OAAC,IAAI,CAACkK,MAAM;;;EAClC,OAAAb,KAAA;AAAA,EA3EyE/C,QAAQ;;ICFvEiE,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAAN,IAAA;MAC7BO,cAAc,GAAAP,IAAA,CAAdO,cAAc;IACdC,MAAM,GAAAR,IAAA,CAANQ,MAAM;IACNC,MAAM,GAAAT,IAAA,CAANS,MAAM;EAMN,IAAAC,KAAA,GAAyBF,MAAM,CAACnK,WAAW,CAACoK,MAAM,CAAC,GAAG,CAACD,MAAM,EAAEC,MAAM,CAAC,GAAG,CAACA,MAAM,EAAED,MAAM,CAAC;IAAlFG,MAAM,GAAAD,KAAA;IAAEE,MAAM,GAAAF,KAAA,IAAoE;EACzF,OAAOG,iBAAiB,CACtBN,cAAc,EACdO,SAAS,CAAC,CAAC,OAAO,CAAC,EAAE,CAACC,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,CAACJ,MAAM,CAAClL,OAAO,EAAEmL,MAAM,CAACnL,OAAO,CAAC,CAAC,CAAC,CAAC,EACtFnB,cAAc,CAACqM,MAAM,CAAClM,OAAO,CAAC,CAC/B;AACH,CAAC;;IChBYuM,gBAAgB,gBAAGvH,IAAI,CAACC,MAAM,CAAC7E,MAAM,CAACmM,gBAAgB,CAAC;AAEpE;;;;AAIA,SAAgBC,IAAIA,CAACC,KAAW;EAC9B,CAAUzH,IAAI,CAAC0H,kBAAkB,CAACD,KAAK,EAAEvH,IAAI,CAAC,GAAA5E,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,UAAU,IAA1DA,SAAS;;EAGT,IAAIuE,IAAI,CAACuD,QAAQ,CAACkE,KAAK,EAAEF,gBAAgB,CAAC,EAAE;IAC1C,OAAOvH,IAAI,CAACC,MAAM,CAAC0H,IAAI,CAACC,KAAK,CAACD,IAAI,CAACH,IAAI,CAACxH,IAAI,CAAC6H,QAAQ,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGjE,IAAIK,CAAO;EACX,IAAIC,CAAO;EACXD,CAAC,GAAGL,KAAK;EACTM,CAAC,GAAG/H,IAAI,CAACkD,GAAG,CAAClD,IAAI,CAAC0D,MAAM,CAAC+D,KAAK,EAAErH,GAAG,CAAC,EAAED,GAAG,CAAC;EAC1C,OAAOH,IAAI,CAACuD,QAAQ,CAACwE,CAAC,EAAED,CAAC,CAAC,EAAE;IAC1BA,CAAC,GAAGC,CAAC;IACLA,CAAC,GAAG/H,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACkD,GAAG,CAAClD,IAAI,CAAC0D,MAAM,CAAC+D,KAAK,EAAEM,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE3H,GAAG,CAAC;;EAE1D,OAAO0H,CAAC;AACV;AAEA;;;;;AAKA,SAAgBE,OAAOA;EACrB,IAAIC,MAAM,GAAAlC,SAAA,CAAAC,MAAA,QAAAkC,SAAA,GAAAnC,SAAA,GAAY;EACtB,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpC,SAAA,CAAOC,MAAM,EAAEmC,CAAC,EAAE,EAAE;IACtC,IAAMV,KAAK,GAAUU,CAAC,QAAApC,SAAA,CAAAC,MAAA,IAADmC,CAAC,GAAAD,SAAA,GAAAnC,SAAA,CAADoC,CAAC,CAAC;IACvB,IAAInI,IAAI,CAACoI,EAAE,CAACX,KAAK,EAAEQ,MAAM,CAAC,EAAE;MAC1BA,MAAM,GAAGR,KAAK;;;EAGlB,OAAOQ,MAAM;AACf;AAEA;;;;;AAKA,SAAgBI,OAAOA;EACrB,IAAIC,OAAO,GAAAvC,SAAA,CAAAC,MAAA,QAAAkC,SAAA,GAAAnC,SAAA,GAAY;EACvB,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpC,SAAA,CAAOC,MAAM,EAAEmC,CAAC,EAAE,EAAE;IACtC,IAAMV,KAAK,GAAUU,CAAC,QAAApC,SAAA,CAAAC,MAAA,IAADmC,CAAC,GAAAD,SAAA,GAAAnC,SAAA,CAADoC,CAAC,CAAC;IACvB,IAAInI,IAAI,CAACuI,EAAE,CAACd,KAAK,EAAEa,OAAO,CAAC,EAAE;MAC3BA,OAAO,GAAGb,KAAK;;;EAGnB,OAAOa,OAAO;AAChB;AAEA,SAAgBE,UAAUA,CAACC,CAAO,EAAEC,CAAO;EACzC,IAAI1I,IAAI,CAACyD,WAAW,CAACgF,CAAC,EAAEC,CAAC,CAAC,EAAE;IAC1B,OAAO1I,IAAI,CAACsD,QAAQ,CAACmF,CAAC,EAAEC,CAAC,CAAC;;EAE5B,OAAO1I,IAAI,CAACsD,QAAQ,CAACoF,CAAC,EAAED,CAAC,CAAC;AAC5B;;ICvDaE,IAAI;EAYf,SAAAA,KAAmBC,eAAsC,EAAEC,eAAsC;IAC/F,IAAMC,eAAe,GAAGF,eAAe,CAAC/D,QAAQ,CAACjI,WAAW,CAACiM,eAAe,CAAChE,QAAQ,CAAC;MAClF,CAAC+D,eAAe,EAAEC,eAAe,CAAC,GAClC,CAACA,eAAe,EAAED,eAAe,CAAC;IACtC,IAAI,CAACG,cAAc,GAAG,IAAI1M,KAAK,CAC7ByM,eAAe,CAAC,CAAC,CAAC,CAACjE,QAAQ,CAAC7J,OAAO,EACnC2N,IAAI,CAACzM,UAAU,CAAC4M,eAAe,CAAC,CAAC,CAAC,CAACjE,QAAQ,EAAEiE,eAAe,CAAC,CAAC,CAAC,CAACjE,QAAQ,CAAC,EACzE,EAAE,EACF,QAAQ,EACR,YAAY,CACb;IACD,IAAI,CAACmE,YAAY,GAAGF,eAAiE;;EACtFH,IAAA,CApBazM,UAAU,GAAjB,SAAAA,WAAkB6K,MAAa,EAAEC,MAAa;IACnD,OAAOH,kBAAkB,CAAC;MACxBC,cAAc,EAAEhP,eAAe,CAACiP,MAAM,CAAC/L,OAAO,CAAC;MAC/C+L,MAAM,EAANA,MAAM;MACNC,MAAM,EAANA;KACD,CAAC;;;;;;EAiBJ,IAAAzK,MAAA,GAAAoM,IAAA,CAAAnM,SAAA;EAAAD,MAAA,CAIO0M,aAAa,GAAb,SAAAA,cAAcC,KAAY;IAC/B,OAAOA,KAAK,CAACzM,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,IAAIgC,KAAK,CAACzM,MAAM,CAAC,IAAI,CAAC0K,MAAM,CAAC;;;;;;;;;EAmB/D5K,MAAA,CAIO4M,OAAO,GAAP,SAAAA,QAAQD,KAAY;IACzB,CAAU,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,GAAA5N,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnCC,SAAS,QAA4B,OAAO,IAA5CA,SAAS;IACT,OAAOyN,KAAK,CAACzM,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACkC,WAAW,GAAG,IAAI,CAACC,WAAW;;;;;EAGxE9M,MAAA,CAuBO+M,SAAS,GAAT,SAAAA,UAAUJ,KAAY;IAC3B,CAAU,IAAI,CAACD,aAAa,CAACC,KAAK,CAAC,GAAA5N,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnCC,SAAS,QAA4B,OAAO,IAA5CA,SAAS;IACT,OAAOyN,KAAK,CAACzM,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACqC,QAAQ,GAAG,IAAI,CAACC,QAAQ;GACjE;EAAAjN,MAAA,CAEMkN,eAAe,GAAf,SAAAA,gBAAgBC,WAAkC;IACvD,CAAU,IAAI,CAACT,aAAa,CAACS,WAAW,CAAC7E,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAlDC,SAAS,QAA2C,OAAO,IAA3DA,SAAS;IACT,IAAIuE,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACmG,QAAQ,CAACrF,QAAQ,EAAEhE,IAAI,CAAC,IAAIF,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACoG,QAAQ,CAACtF,QAAQ,EAAEhE,IAAI,CAAC,EAAE;MACxF,MAAM,IAAIgB,yBAAyB,EAAE;;IAEvC,IAAMyI,YAAY,GAAG,IAAI,CAACL,SAAS,CAACI,WAAW,CAAC7E,QAAQ,CAAC;IACzD,IAAM+E,aAAa,GAAG,IAAI,CAACN,SAAS,CAACI,WAAW,CAAC7E,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,MAAM,CAAC;IAC1G,IAAM2C,kBAAkB,GAAG7J,IAAI,CAACqD,QAAQ,CAACqG,WAAW,CAACxF,QAAQ,EAAEzD,IAAI,CAAC;IACpE,IAAMoC,SAAS,GAAG7C,IAAI,CAACqD,QAAQ,CAACwG,kBAAkB,EAAED,aAAa,CAAC1F,QAAQ,CAAC;IAC3E,IAAMpB,WAAW,GAAG9C,IAAI,CAACkD,GAAG,CAAClD,IAAI,CAACqD,QAAQ,CAACsG,YAAY,CAACzF,QAAQ,EAAExD,KAAK,CAAC,EAAEmJ,kBAAkB,CAAC;IAC7F,IAAMC,YAAY,GAAGnF,cAAc,CAACM,aAAa,CAC/CyE,WAAW,CAAC7E,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,MAAM,EACpElH,IAAI,CAAC0D,MAAM,CAACb,SAAS,EAAEC,WAAW,CAAC,CACpC;IACD,IAAI9C,IAAI,CAACoD,KAAK,CAAC0G,YAAY,CAAC5F,QAAQ,EAAEhE,IAAI,CAAC,EAAE;MAC3C,MAAM,IAAIuB,4BAA4B,EAAE;;IAE1C,OAAO,CAACqI,YAAY,EAAE,IAAInB,IAAI,CAACgB,YAAY,CAACzG,GAAG,CAACwG,WAAW,CAAC,EAAEE,aAAa,CAACtG,QAAQ,CAACwG,YAAY,CAAC,CAAC,CAAC;GACrG;EAAAvN,MAAA,CAEMwN,cAAc,GAAd,SAAAA,eAAeD,YAAmC;IACvD,CAAU,IAAI,CAACb,aAAa,CAACa,YAAY,CAACjF,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnDC,SAAS,QAA4C,OAAO,IAA5DA,SAAS;IACT,IACEuE,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACmG,QAAQ,CAACrF,QAAQ,EAAEhE,IAAI,CAAC,IACxCF,IAAI,CAACoD,KAAK,CAAC,IAAI,CAACoG,QAAQ,CAACtF,QAAQ,EAAEhE,IAAI,CAAC,IACxCF,IAAI,CAAC0H,kBAAkB,CAACoC,YAAY,CAAC5F,QAAQ,EAAE,IAAI,CAACoF,SAAS,CAACQ,YAAY,CAACjF,QAAQ,CAAC,CAACX,QAAQ,CAAC,EAC9F;MACA,MAAM,IAAIhD,yBAAyB,EAAE;;IAGvC,IAAM0I,aAAa,GAAG,IAAI,CAACN,SAAS,CAACQ,YAAY,CAACjF,QAAQ,CAAC;IAC3D,IAAM8E,YAAY,GAAG,IAAI,CAACL,SAAS,CAACQ,YAAY,CAACjF,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,MAAM,CAAC;IAC1G,IAAMrE,SAAS,GAAG7C,IAAI,CAACqD,QAAQ,CAACrD,IAAI,CAACqD,QAAQ,CAACsG,YAAY,CAACzF,QAAQ,EAAE4F,YAAY,CAAC5F,QAAQ,CAAC,EAAExD,KAAK,CAAC;IACnG,IAAMoC,WAAW,GAAG9C,IAAI,CAACqD,QAAQ,CAACrD,IAAI,CAACsD,QAAQ,CAACsG,aAAa,CAAC1F,QAAQ,EAAE4F,YAAY,CAAC5F,QAAQ,CAAC,EAAEzD,IAAI,CAAC;IACrG,IAAMiJ,WAAW,GAAG/E,cAAc,CAACM,aAAa,CAC9C6E,YAAY,CAACjF,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,GAAG,IAAI,CAACC,MAAM,GAAG,IAAI,CAACD,MAAM,EACrElH,IAAI,CAACkD,GAAG,CAAClD,IAAI,CAAC0D,MAAM,CAACb,SAAS,EAAEC,WAAW,CAAC,EAAE3C,GAAG,CAAC,CACnD;IACD,OAAO,CAACuJ,WAAW,EAAE,IAAIf,IAAI,CAACgB,YAAY,CAACzG,GAAG,CAACwG,WAAW,CAAC,EAAEE,aAAa,CAACtG,QAAQ,CAACwG,YAAY,CAAC,CAAC,CAAC;GACpG;EAAAvN,MAAA,CAEMyN,kBAAkB,GAAlB,SAAAA,mBACLC,WAAkC,EAClCC,YAAmC,EACnCC,YAAmC;IAEnC,CAAUF,WAAW,CAACpF,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACsM,cAAc,CAAC,GAAAzN,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1DC,SAAS,QAAmD,WAAW,IAAvEA,SAAS;IACT,IAAMuN,YAAY,GAAGkB,YAAY,CAACrF,QAAQ,CAACjI,WAAW,CAACuN,YAAY,CAACtF,QAAQ,CAAC;MACzE,CAACqF,YAAY,EAAEC,YAAY,CAAC,GAC5B,CAACA,YAAY,EAAED,YAAY,CAAC;IAChC,EAAUlB,YAAY,CAAC,CAAC,CAAC,CAACnE,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACyK,MAAM,CAAC,IAAI8B,YAAY,CAAC,CAAC,CAAC,CAACnE,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAAC0K,MAAM,CAAC,IAAA7L,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAtGC,SAAS,QAA+F,OAAO,IAA/GA,SAAS;IAET,IAAI2O,SAAe;IACnB,IAAIpK,IAAI,CAACoD,KAAK,CAAC6G,WAAW,CAAC/F,QAAQ,EAAEhE,IAAI,CAAC,EAAE;MAC1CkK,SAAS,GAAGpK,IAAI,CAACsD,QAAQ,CACvBkE,IAAI,CAACxH,IAAI,CAACqD,QAAQ,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,EAAE8E,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,CAAC,CAAC,EACvEvD,iBAAiB,CAClB;KACF,MAAM;MACL,IAAM0J,OAAO,GAAGrK,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,EAAE+F,WAAW,CAAC/F,QAAQ,CAAC,EAAE,IAAI,CAACqF,QAAQ,CAACrF,QAAQ,CAAC;MAClH,IAAMoG,OAAO,GAAGtK,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,EAAE+F,WAAW,CAAC/F,QAAQ,CAAC,EAAE,IAAI,CAACsF,QAAQ,CAACtF,QAAQ,CAAC;MAClHkG,SAAS,GAAGpK,IAAI,CAAC8E,eAAe,CAACuF,OAAO,EAAEC,OAAO,CAAC,GAAGD,OAAO,GAAGC,OAAO;MAEtEC,OAAO,CAACC,GAAG,CAAC;QACVH,OAAO,EAAEA,OAAO,CAAClG,QAAQ,EAAE;QAC3BmG,OAAO,EAAEA,OAAO,CAACnG,QAAQ,EAAE;QAC3BiG,SAAS,EAAEA,SAAS,CAACjG,QAAQ,EAAE;QAC/B8F,WAAW,EAAEA,WAAW,CAAC/F,QAAQ,CAACC,QAAQ,EAAE;QAC5CsG,KAAK,EAAEjD,IAAI,CAACxH,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAAC2F,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,EAAE,IAAI,CAAC8E,YAAY,CAAC,CAAC,CAAC,CAAC9E,QAAQ,CAAC;OACxF,CAAC;;IAEJ,IAAI,CAAClE,IAAI,CAACyD,WAAW,CAAC2G,SAAS,EAAElK,IAAI,CAAC,EAAE;MACtC,MAAM,IAAIuB,4BAA4B,EAAE;;IAG1C,OAAOkD,cAAc,CAACM,aAAa,CAAC,IAAI,CAAC8D,cAAc,EAAEqB,SAAS,CAAC;GACpE;EAAA7N,MAAA,CAEMmO,iBAAiB,GAAjB,SAAAA,kBACLxB,KAAY,EACZe,WAAkC,EAClCG,SAAgC,EAChCO,OACAF,KAAiB;QADjBE;MAAAA,QAAiB,KAAK;;IAGtB,CAAU,IAAI,CAAC1B,aAAa,CAACC,KAAK,CAAC,GAAA5N,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAnCC,SAAS,QAA4B,OAAO,IAA5CA,SAAS;IACT,CAAUwO,WAAW,CAACpF,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACsM,cAAc,CAAC,GAAAzN,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1DC,SAAS,QAAmD,cAAc,IAA1EA,SAAS;IACT,CAAU2O,SAAS,CAACvF,QAAQ,CAACpI,MAAM,CAAC,IAAI,CAACsM,cAAc,CAAC,GAAAzN,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxDC,SAAS,QAAiD,WAAW,IAArEA,SAAS;IACT,CAAUuE,IAAI,CAAC8E,eAAe,CAACsF,SAAS,CAAClG,QAAQ,EAAE+F,WAAW,CAAC/F,QAAQ,CAAC,GAAA5I,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxEC,SAAS,QAAiE,WAAW,IAArFA,SAAS;IAET,IAAImP,mBAA0C;IAC9C,IAAI,CAACD,KAAK,EAAE;MACVC,mBAAmB,GAAGX,WAAW;KAClC,MAAM;MACL,CAAU,CAAC,CAACQ,KAAK,GAAAnP,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjBC,SAAS,QAAU,QAAQ,IAA3BA,SAAS;MACT,IAAMoP,WAAW,GAAG7K,IAAI,CAACC,MAAM,CAACwK,KAAK,CAAC;MACtC,IAAI,CAACzK,IAAI,CAACoD,KAAK,CAACyH,WAAW,EAAE3K,IAAI,CAAC,EAAE;QAClC,IAAM4K,KAAK,GAAGtD,IAAI,CAACxH,IAAI,CAACqD,QAAQ,CAAC,IAAI,CAACkG,QAAQ,CAACrF,QAAQ,EAAE,IAAI,CAACsF,QAAQ,CAACtF,QAAQ,CAAC,CAAC;QACjF,IAAM6G,SAAS,GAAGvD,IAAI,CAACqD,WAAW,CAAC;QACnC,IAAI7K,IAAI,CAACyD,WAAW,CAACqH,KAAK,EAAEC,SAAS,CAAC,EAAE;UACtC,IAAMlI,SAAS,GAAG7C,IAAI,CAACqD,QAAQ,CAAC4G,WAAW,CAAC/F,QAAQ,EAAElE,IAAI,CAACsD,QAAQ,CAACwH,KAAK,EAAEC,SAAS,CAAC,CAAC;UACtF,IAAMjI,WAAW,GAAG9C,IAAI,CAACkD,GAAG,CAAClD,IAAI,CAACqD,QAAQ,CAACyH,KAAK,EAAExK,IAAI,CAAC,EAAEyK,SAAS,CAAC;UACnE,IAAMC,YAAY,GAAGhL,IAAI,CAAC0D,MAAM,CAACb,SAAS,EAAEC,WAAW,CAAC;UACxD8H,mBAAmB,GAAGX,WAAW,CAAC/G,GAAG,CAACyB,cAAc,CAACM,aAAa,CAAC,IAAI,CAAC8D,cAAc,EAAEiC,YAAY,CAAC,CAAC;SACvG,MAAM;UACLJ,mBAAmB,GAAGX,WAAW;;OAEpC,MAAM;QACLW,mBAAmB,GAAGX,WAAW;;;IAIrC,OAAOtF,cAAc,CAACM,aAAa,CACjCiE,KAAK,EACLlJ,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAAC+G,SAAS,CAAClG,QAAQ,EAAE,IAAI,CAACoF,SAAS,CAACJ,KAAK,CAAC,CAAChF,QAAQ,CAAC,EAAE0G,mBAAmB,CAAC1G,QAAQ,CAAC,CAC7G;GACF;EAAApH,YAAA,CAAA6L,IAAA;IAAA5L,GAAA;IAAAC,GAAA,EAtKD,SAAAA;MACE,IAAMoJ,MAAM,GAAG,IAAI,CAAC4C,YAAY,CAAC,CAAC,CAAC,CAACtF,MAAM,CAAC,IAAI,CAACsF,YAAY,CAAC,CAAC,CAAC,CAAC;MAChE,OAAO,IAAIrD,KAAK,CAAC,IAAI,CAACuB,MAAM,EAAE,IAAI,CAACC,MAAM,EAAEf,MAAM,CAACtD,WAAW,EAAEsD,MAAM,CAACvD,SAAS,CAAC;;;;;;IAGlF9F,GAAA;IAAAC,GAAA,EAGA,SAAAA;MACE,IAAMoJ,MAAM,GAAG,IAAI,CAAC4C,YAAY,CAAC,CAAC,CAAC,CAACtF,MAAM,CAAC,IAAI,CAACsF,YAAY,CAAC,CAAC,CAAC,CAAC;MAChE,OAAO,IAAIrD,KAAK,CAAC,IAAI,CAACwB,MAAM,EAAE,IAAI,CAACD,MAAM,EAAEd,MAAM,CAACtD,WAAW,EAAEsD,MAAM,CAACvD,SAAS,CAAC;;;IACjF9F,GAAA;IAAAC,GAAA,EAcD,SAAAA;MACE,OAAO,IAAI,CAACkK,MAAM,CAAClM,OAAO;;;IAC3B+B,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACgM,YAAY,CAAC,CAAC,CAAC,CAACnE,QAAQ;;;IACrC9H,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACgM,YAAY,CAAC,CAAC,CAAC,CAACnE,QAAQ;;;IACrC9H,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACgM,YAAY,CAAC,CAAC,CAAC;;;IAC5BjM,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACgM,YAAY,CAAC,CAAC,CAAC;;;EAC5B,OAAAL,IAAA;AAAA;;ACvFH,IAAMsC,WAAW,gBAAG,IAAIrI,QAAQ,eAAC5C,IAAI,CAACC,MAAM,CAAC,GAAG,CAAC,CAAC;AAElD;;;;AAIA,SAASiL,SAASA,CAACzE,QAAkB;EACnC,OAAO,IAAI0E,OAAO,CAAC1E,QAAQ,CAAC5D,SAAS,EAAE4D,QAAQ,CAAC3D,WAAW,CAAC;AAC9D;AAEA,IAAaqI,OAAQ,0BAAAvG,SAAA;EAAA/I,cAAA,CAAAsP,OAAA,EAAAvG,SAAA;EAArB,SAAAuG;;;;;;IAIkBrP,KAAA,UAAS,GAAS,IAAI;IAAA,OAAAA,KAAA;;EAyBvC,IAAAS,MAAA,GAAA4O,OAAA,CAAA3O,SAAA;EAAAD,MAAA,CAvBC2G,GAAG,GAAH,SAAAA,IAAIxG,KAA2B;IAC7B,OAAOwO,SAAS,CAAAtG,SAAA,CAAApI,SAAA,CAAO0G,GAAG,CAAA5G,IAAA,OAACI,KAAK,CAAC,CAAC;GACnC;EAAAH,MAAA,CAED+G,QAAQ,GAAR,SAAAA,SAAS5G,KAA2B;IAClC,OAAOwO,SAAS,CAAAtG,SAAA,CAAApI,SAAA,CAAO8G,QAAQ,CAAAhH,IAAA,OAACI,KAAK,CAAC,CAAC;GACxC;EAAAH,MAAA,CAED8G,QAAQ,GAAR,SAAAA,SAAS3G,KAA2B;IAClC,OAAOwO,SAAS,CAAAtG,SAAA,CAAApI,SAAA,CAAO6G,QAAQ,CAAA/G,IAAA,OAACI,KAAK,CAAC,CAAC;GACxC;EAAAH,MAAA,CAEDmH,MAAM,GAAN,SAAAA,OAAOhH,KAA2B;IAChC,OAAOwO,SAAS,CAAAtG,SAAA,CAAApI,SAAA,CAAOkH,MAAM,CAAApH,IAAA,OAACI,KAAK,CAAC,CAAC;GACtC;EAAAH,MAAA,CAEMoH,aAAa,GAAb,SAAAA,cAAcC,mBAA+BC,MAAe,EAAEC,QAAmB;QAAnEF;MAAAA,oBAA4B,CAAC;;IAChD,OAAOgB,SAAA,CAAApI,SAAA,CAAM6G,QAAQ,CAAA/G,IAAA,OAAC2O,WAAW,EAAEtH,aAAa,CAACC,iBAAiB,EAAEC,MAAM,EAAEC,QAAQ,CAAC;GACtF;EAAAvH,MAAA,CAEMgI,OAAO,GAAP,SAAAA,QAAQD,eAA2BT,MAAe,EAAEC,QAAmB;QAA/DQ;MAAAA,gBAAwB,CAAC;;IACtC,OAAOM,SAAA,CAAApI,SAAA,CAAM6G,QAAQ,CAAA/G,IAAA,OAAC2O,WAAW,EAAE1G,OAAO,CAACD,aAAa,EAAET,MAAM,EAAEC,QAAQ,CAAC;GAC5E;EAAA,OAAAqH,OAAA;AAAA,EA5B0BvI,QAAQ;;ICTxBwI,KAAK;EAMhB,SAAAA,MAAmBC,KAAa,EAAEC,KAAa,EAAEC,MAAe;IA0BxD,cAAS,GAAkC,IAAI;IAzBrD,EAAUF,KAAK,CAACrF,MAAM,GAAG,CAAC,IAAA1K,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1BC,SAAS,QAAmB,OAAO,IAAnCA,SAAS;IACT,IAAMT,OAAO,GAAWqQ,KAAK,CAAC,CAAC,CAAC,CAACrQ,OAAO;IACxC,CACEqQ,KAAK,CAACG,KAAK,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACzQ,OAAO,KAAKA,OAAO;MAAC,GAAAM,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBADjDC,SAAS,QAEP,WAAW,IAFbA,SAAS;IAKT,IAAMiQ,YAAY,GAAGJ,KAAK,CAAC5F,OAAO;IAClC,CAAU2F,KAAK,CAAC,CAAC,CAAC,CAACpC,aAAa,CAACyC,YAAY,CAAC,GAAApQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,OAAO,IAAvDA,SAAS;IACT,EAAU,OAAO8P,MAAM,KAAK,WAAW,IAAIF,KAAK,CAACA,KAAK,CAACrF,MAAM,GAAG,CAAC,CAAC,CAACiD,aAAa,CAACsC,MAAM,CAAC7F,OAAO,CAAC,IAAApK,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAhGC,SAAS,QAAyF,QAAQ,IAA1GA,SAAS;IAET,IAAMkQ,IAAI,GAAY,CAACD,YAAY,CAAC;IACpC,SAAAE,SAAA,GAAAC,+BAAA,CAAwBR,KAAK,CAACS,OAAO,EAAE,GAAAC,KAAA,IAAAA,KAAA,GAAAH,SAAA,IAAAI,IAAA,GAAE;MAAA,IAAAC,WAAA,GAAAF,KAAA,CAAAtE,KAAA;QAA7BU,CAAC,GAAA8D,WAAA;QAAER,IAAI,GAAAQ,WAAA;MACjB,IAAMC,YAAY,GAAGP,IAAI,CAACxD,CAAC,CAAC;MAC5B,EAAU+D,YAAY,CAACzP,MAAM,CAACgP,IAAI,CAACvE,MAAM,CAAC,IAAIgF,YAAY,CAACzP,MAAM,CAACgP,IAAI,CAACtE,MAAM,CAAC,IAAA7L,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9EC,SAAS,QAAuE,MAAM,IAAtFA,SAAS;MACT,IAAM8P,OAAM,GAAGW,YAAY,CAACzP,MAAM,CAACgP,IAAI,CAACvE,MAAM,CAAC,GAAGuE,IAAI,CAACtE,MAAM,GAAGsE,IAAI,CAACvE,MAAM;MAC3EyE,IAAI,CAACQ,IAAI,CAACZ,OAAM,CAAC;;IAGnB,IAAI,CAACF,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACM,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACL,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;;EACrBzO,YAAA,CAAAsO,KAAA;IAAArO,GAAA;IAAAC,GAAA,EAID,SAAAA;MACE,IAAI,IAAI,CAACoP,SAAS,KAAK,IAAI,EAAE,OAAO,IAAI,CAACA,SAAS;MAClD,IAAMC,MAAM,GAAgC,EAAE;MAC9C,SAAAC,UAAA,GAAAT,+BAAA,CAAwB,IAAI,CAACR,KAAK,CAACS,OAAO,EAAE,GAAAS,MAAA,IAAAA,MAAA,GAAAD,UAAA,IAAAN,IAAA,GAAE;QAAA,IAAAQ,YAAA,GAAAD,MAAA,CAAA9E,KAAA;UAAlCU,CAAC,GAAAqE,YAAA;UAAEf,IAAI,GAAAe,YAAA;QACjBH,MAAM,CAACF,IAAI,CACT,IAAI,CAACR,IAAI,CAACxD,CAAC,CAAC,CAAC1L,MAAM,CAACgP,IAAI,CAACvE,MAAM,CAAC,GAC5B,IAAIvB,KAAK,CAAC8F,IAAI,CAAClC,QAAQ,CAAC1E,QAAQ,EAAE4G,IAAI,CAACjC,QAAQ,CAAC3E,QAAQ,EAAE4G,IAAI,CAAClC,QAAQ,CAACrF,QAAQ,EAAEuH,IAAI,CAACjC,QAAQ,CAACtF,QAAQ,CAAC,GACzG,IAAIyB,KAAK,CAAC8F,IAAI,CAACjC,QAAQ,CAAC3E,QAAQ,EAAE4G,IAAI,CAAClC,QAAQ,CAAC1E,QAAQ,EAAE4G,IAAI,CAACjC,QAAQ,CAACtF,QAAQ,EAAEuH,IAAI,CAAClC,QAAQ,CAACrF,QAAQ,CAAC,CAC9G;;MAEH,IAAMuI,OAAO,GAAGJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAAC,CAACC,MAAM,CAAC,UAACC,WAAW,EAAEC,YAAY;QAAA,OAAKD,WAAW,CAACvJ,QAAQ,CAACwJ,YAAY,CAAC;SAAER,MAAM,CAAC,CAAC,CAAC,CAAC;MACpH,OAAQ,IAAI,CAACD,SAAS,GAAG,IAAIzG,KAAK,CAAC,IAAI,CAAC2F,KAAK,EAAE,IAAI,CAACC,MAAM,EAAEkB,OAAO,CAAC3J,WAAW,EAAE2J,OAAO,CAAC5J,SAAS,CAAC;;;IACpG9F,GAAA;IAAAC,GAAA,EAED,SAAAA;MACE,OAAO,IAAI,CAACqO,KAAK,CAAC,CAAC,CAAC,CAACrQ,OAAO;;;EAC7B,OAAAoQ,KAAA;AAAA;;ACnDH;;;;;;AAMA,SAAgB0B,kBAAkBA,CAChCC,QAA8B,EAC9BrD,WAAkC,EAClCI,YAAoC;EAEpC,IAAMkD,kBAAkB,GAAGD,QAAQ,CAACrG,KAAK,CAACgD,WAAW,CAAC;;EAEtD,IAAMuD,WAAW,GAAGD,kBAAkB,CAAC1J,QAAQ,CAACwG,YAAY,CAAC,CAACpG,MAAM,CAACsJ,kBAAkB,CAAC;EACxF,OAAO,IAAI7B,OAAO,CAAC8B,WAAW,CAACpK,SAAS,EAAEoK,WAAW,CAACnK,WAAW,CAAC;AACpE;;AClBA;AACA;AACA,SAAgBoK,YAAYA,CAAIC,KAAU,EAAEjK,GAAM,EAAEkK,OAAe,EAAEC,UAAkC;EACrG,EAAUD,OAAO,GAAG,CAAC,IAAA9R,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAArBC,SAAS,QAAc,eAAe,IAAtCA,SAAS;;EAET,EAAU0R,KAAK,CAACnH,MAAM,IAAIoH,OAAO,IAAA9R,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjCC,SAAS,QAA0B,YAAY,IAA/CA,SAAS;;EAGT,IAAI0R,KAAK,CAACnH,MAAM,KAAK,CAAC,EAAE;IACtBmH,KAAK,CAAChB,IAAI,CAACjJ,GAAG,CAAC;IACf,OAAO,IAAI;GACZ,MAAM;IACL,IAAMoK,MAAM,GAAGH,KAAK,CAACnH,MAAM,KAAKoH,OAAO;;IAEvC,IAAIE,MAAM,IAAID,UAAU,CAACF,KAAK,CAACA,KAAK,CAACnH,MAAM,GAAG,CAAC,CAAC,EAAE9C,GAAG,CAAC,IAAI,CAAC,EAAE;MAC3D,OAAOA,GAAG;;IAGZ,IAAIqK,EAAE,GAAG,CAAC;MACRC,EAAE,GAAGL,KAAK,CAACnH,MAAM;IAEnB,OAAOuH,EAAE,GAAGC,EAAE,EAAE;MACd,IAAMC,GAAG,GAAIF,EAAE,GAAGC,EAAE,KAAM,CAAC;MAC3B,IAAIH,UAAU,CAACF,KAAK,CAACM,GAAG,CAAC,EAAEvK,GAAG,CAAC,IAAI,CAAC,EAAE;QACpCqK,EAAE,GAAGE,GAAG,GAAG,CAAC;OACb,MAAM;QACLD,EAAE,GAAGC,GAAG;;;IAGZN,KAAK,CAACO,MAAM,CAACH,EAAE,EAAE,CAAC,EAAErK,GAAG,CAAC;IACxB,OAAOoK,MAAM,GAAGH,KAAK,CAACQ,GAAG,EAAG,GAAG,IAAI;;AAEvC;;ACbA;AACA;AACA,SAAgBC,qBAAqBA,CACnCnF,CAA+B,EAC/BC,CAA+B;;EAG/B,CAAUD,CAAC,CAACiB,WAAW,CAAC7E,QAAQ,CAACpI,MAAM,CAACiM,CAAC,CAACgB,WAAW,CAAC7E,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA/DC,SAAS,QAAwD,gBAAgB,IAAjFA,SAAS;EACT,CAAUgN,CAAC,CAACqB,YAAY,CAACjF,QAAQ,CAACpI,MAAM,CAACiM,CAAC,CAACoB,YAAY,CAACjF,QAAQ,CAAC,GAAAvJ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAjEC,SAAS,QAA0D,iBAAiB,IAApFA,SAAS;EACT,IAAIgN,CAAC,CAACqB,YAAY,CAACtG,OAAO,CAACkF,CAAC,CAACoB,YAAY,CAAC,EAAE;IAC1C,IAAIrB,CAAC,CAACiB,WAAW,CAAClG,OAAO,CAACkF,CAAC,CAACgB,WAAW,CAAC,EAAE;MACxC,OAAO,CAAC;;;IAGV,IAAIjB,CAAC,CAACiB,WAAW,CAACnG,QAAQ,CAACmF,CAAC,CAACgB,WAAW,CAAC,EAAE;MACzC,OAAO,CAAC,CAAC;KACV,MAAM;MACL,OAAO,CAAC;;GAEX,MAAM;;IAEL,IAAIjB,CAAC,CAACqB,YAAY,CAACvG,QAAQ,CAACmF,CAAC,CAACoB,YAAY,CAAC,EAAE;MAC3C,OAAO,CAAC;KACT,MAAM;MACL,OAAO,CAAC,CAAC;;;AAGf;AAEA;AACA,SAAgB+D,eAAeA,CAC7BpF,CAAqC,EACrCC,CAAqC;EAErC,IAAMoF,MAAM,GAAGF,qBAAqB,CAACnF,CAAC,EAAEC,CAAC,CAAC;EAC1C,IAAIoF,MAAM,KAAK,CAAC,EAAE;IAChB,OAAOA,MAAM;;;EAIf,IAAIrF,CAAC,CAACwE,WAAW,CAAC1J,QAAQ,CAACmF,CAAC,CAACuE,WAAW,CAAC,EAAE;IACzC,OAAO,CAAC,CAAC;GACV,MAAM,IAAIxE,CAAC,CAACwE,WAAW,CAACxJ,WAAW,CAACiF,CAAC,CAACuE,WAAW,CAAC,EAAE;IACnD,OAAO,CAAC;;;EAIV,OAAOxE,CAAC,CAACsF,KAAK,CAACpC,IAAI,CAAC3F,MAAM,GAAG0C,CAAC,CAACqF,KAAK,CAACpC,IAAI,CAAC3F,MAAM;AAClD;AASA;;;;AAIA,IAAagI,KAAK;EAkDhB,SAAAA,MACED,KAA6B,EAC7BE,MAAmG,EACnGC,SAAqB;IAErB,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,SAAS,GAAGA,SAAS;IAE1B,IAAMlF,YAAY,GAA4B,IAAI9C,KAAK,CAAC6H,KAAK,CAACpC,IAAI,CAAC3F,MAAM,CAAC;IAC1E,IAAIkI,SAAS,KAAK9Z,SAAS,CAAC+Z,WAAW,EAAE;MACvC,CAAUF,MAAM,CAACpJ,QAAQ,CAACpI,MAAM,CAACsR,KAAK,CAACzC,KAAK,CAAC,GAAAhQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA7CC,SAAS,QAAsC,OAAO,IAAtDA,SAAS;MACTuN,YAAY,CAAC,CAAC,CAAC,GAAGiF,MAAM,CAACvI,OAAO;MAChC,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4F,KAAK,CAACpC,IAAI,CAAC3F,MAAM,GAAG,CAAC,EAAEmC,CAAC,EAAE,EAAE;QAC9C,IAAMsD,IAAI,GAAGsC,KAAK,CAAC1C,KAAK,CAAClD,CAAC,CAAC;QAC3B,IAAAiG,qBAAA,GAAuB3C,IAAI,CAAChC,eAAe,CAACT,YAAY,CAACb,CAAC,CAAC,CAAC;UAArD2B,YAAY,GAAAsE,qBAAA;QACnBpF,YAAY,CAACb,CAAC,GAAG,CAAC,CAAC,GAAG2B,YAAY;;MAEpC,IAAI,CAACJ,WAAW,GAAG/E,cAAc,CAACQ,oBAAoB,CAAC4I,KAAK,CAACzC,KAAK,EAAE2C,MAAM,CAACpL,SAAS,EAAEoL,MAAM,CAACnL,WAAW,CAAC;MACzG,IAAI,CAACgH,YAAY,GAAGnF,cAAc,CAACQ,oBAAoB,CACrD4I,KAAK,CAACxC,MAAM,EACZvC,YAAY,CAACA,YAAY,CAAChD,MAAM,GAAG,CAAC,CAAC,CAACnD,SAAS,EAC/CmG,YAAY,CAACA,YAAY,CAAChD,MAAM,GAAG,CAAC,CAAC,CAAClD,WAAW,CAClD;KACF,MAAM;MACL,CAAUmL,MAAM,CAACpJ,QAAQ,CAACpI,MAAM,CAACsR,KAAK,CAACxC,MAAM,CAAC,GAAAjQ,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAAuC,QAAQ,IAAxDA,SAAS;MACTuN,YAAY,CAACA,YAAY,CAAChD,MAAM,GAAG,CAAC,CAAC,GAAGiI,MAAM,CAACvI,OAAO;MACtD,KAAK,IAAIyC,EAAC,GAAG4F,KAAK,CAACpC,IAAI,CAAC3F,MAAM,GAAG,CAAC,EAAEmC,EAAC,GAAG,CAAC,EAAEA,EAAC,EAAE,EAAE;QAC9C,IAAMsD,KAAI,GAAGsC,KAAK,CAAC1C,KAAK,CAAClD,EAAC,GAAG,CAAC,CAAC;QAC/B,IAAAkG,oBAAA,GAAsB5C,KAAI,CAAC1B,cAAc,CAACf,YAAY,CAACb,EAAC,CAAC,CAAC;UAAnDuB,WAAW,GAAA2E,oBAAA;QAClBrF,YAAY,CAACb,EAAC,GAAG,CAAC,CAAC,GAAGuB,WAAW;;MAEnC,IAAI,CAACA,WAAW,GAAG/E,cAAc,CAACQ,oBAAoB,CACpD4I,KAAK,CAACzC,KAAK,EACXtC,YAAY,CAAC,CAAC,CAAC,CAACnG,SAAS,EACzBmG,YAAY,CAAC,CAAC,CAAC,CAAClG,WAAW,CAC5B;MACD,IAAI,CAACgH,YAAY,GAAGnF,cAAc,CAACQ,oBAAoB,CAAC4I,KAAK,CAACxC,MAAM,EAAE0C,MAAM,CAACpL,SAAS,EAAEoL,MAAM,CAACnL,WAAW,CAAC;;IAE7G,IAAI,CAACwL,cAAc,GAAG,IAAI3I,KAAK,CAC7B,IAAI,CAAC+D,WAAW,CAAC7E,QAAQ,EACzB,IAAI,CAACiF,YAAY,CAACjF,QAAQ,EAC1B,IAAI,CAAC6E,WAAW,CAACxF,QAAQ,EACzB,IAAI,CAAC4F,YAAY,CAAC5F,QAAQ,CAC3B;IACD,IAAI,CAAC+I,WAAW,GAAGH,kBAAkB,CAACiB,KAAK,CAAChB,QAAQ,EAAE,IAAI,CAACrD,WAAW,EAAE,IAAI,CAACI,YAAY,CAAC;;;;;;;EApE5FkE,KAAA,CAKcO,OAAO,GAAd,SAAAA,QACLR,KAA6B,EAC7BS,QAAgC;IAEhC,OAAO,IAAIR,KAAK,CAACD,KAAK,EAAES,QAAQ,EAAEpa,SAAS,CAAC+Z,WAAW,CAAC;;;;;;;EAG1DH,KAAA,CAKcS,QAAQ,GAAf,SAAAA,SACLV,KAA6B,EAC7BW,SAAkC;IAElC,OAAO,IAAIV,KAAK,CAACD,KAAK,EAAEW,SAAS,EAAEta,SAAS,CAACua,YAAY,CAAC;;;;;;EAkD5D,IAAApS,MAAA,GAAAyR,KAAA,CAAAxR,SAAA;EAAAD,MAAA,CAIOqS,gBAAgB,GAAhB,SAAAA,iBAAiBC,iBAA0B;IAChD,CAAU,CAACA,iBAAiB,CAACtL,QAAQ,CAACrD,IAAI,CAAC,GAAA5E,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA3CC,SAAS,QAAoC,oBAAoB,IAAjEA,SAAS;IACT,IAAI,IAAI,CAACyS,SAAS,KAAK9Z,SAAS,CAACua,YAAY,EAAE;MAC7C,OAAO,IAAI,CAAC7E,YAAY;KACzB,MAAM;MACL,IAAMgF,yBAAyB,GAAG,IAAIlM,QAAQ,CAACzC,GAAG,CAAC,CAChD+C,GAAG,CAAC2L,iBAAiB,CAAC,CACtB5L,MAAM,EAAE,CACRI,QAAQ,CAAC,IAAI,CAACyG,YAAY,CAAC5F,QAAQ,CAAC,CAACA,QAAQ;MAChD,OAAOS,cAAc,CAACM,aAAa,CAAC,IAAI,CAAC6E,YAAY,CAACjF,QAAQ,EAAEiK,yBAAyB,CAAC;;;;;;;EAI9FvS,MAAA,CAIOwS,eAAe,GAAf,SAAAA,gBAAgBF,iBAA0B;IAC/C,CAAU,CAACA,iBAAiB,CAACtL,QAAQ,CAACrD,IAAI,CAAC,GAAA5E,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA3CC,SAAS,QAAoC,oBAAoB,IAAjEA,SAAS;IACT,IAAI,IAAI,CAACyS,SAAS,KAAK9Z,SAAS,CAAC+Z,WAAW,EAAE;MAC5C,OAAO,IAAI,CAACzE,WAAW;KACxB,MAAM;MACL,IAAMsF,wBAAwB,GAAG,IAAIpM,QAAQ,CAACzC,GAAG,CAAC,CAC/C+C,GAAG,CAAC2L,iBAAiB,CAAC,CACtBxL,QAAQ,CAAC,IAAI,CAACqG,WAAW,CAACxF,QAAQ,CAAC,CAACA,QAAQ;MAC/C,OAAOS,cAAc,CAACM,aAAa,CAAC,IAAI,CAACyE,WAAW,CAAC7E,QAAQ,EAAEmK,wBAAwB,CAAC;;;;;;;;;;;;;;;;;EAI5FhB,KAAA,CAcciB,gBAAgB,GAAvB,SAAAA,iBACL5D,KAAa,EACb6D,gBAAwC,EACxCC,WAAoB,EAAAC,KAAA;;EAGpBC,cACAC,cACAC;kCAJuD,EAAE,GAAAH,KAAA;MAAAI,kBAAA,GAAAjJ,IAAA,CAAvDkJ,aAAa;MAAbA,aAAa,GAAAD,kBAAA,cAAG,CAAC,GAAAA,kBAAA;MAAAE,YAAA,GAAAnJ,IAAA,CAAEoJ,OAAO;MAAPA,OAAO,GAAAD,YAAA,cAAG,CAAC,GAAAA,YAAA;IAAA,IAEhCL;MAAAA,eAAuB,EAAE;;IAAA,IACzBC;MAAAA,eAAyCJ,gBAAgB;;IAAA,IACzDK;MAAAA,aAA8D,EAAE;;IAEhE,EAAUlE,KAAK,CAACrF,MAAM,GAAG,CAAC,IAAA1K,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1BC,SAAS,QAAmB,OAAO,IAAnCA,SAAS;IACT,EAAUkU,OAAO,GAAG,CAAC,IAAArU,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAArBC,SAAS,QAAc,UAAU,IAAjCA,SAAS;IACT,EAAUyT,gBAAgB,KAAKI,YAAY,IAAID,YAAY,CAACrJ,MAAM,GAAG,CAAC,IAAA1K,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAtEC,SAAS,QAA+D,mBAAmB,IAA3FA,SAAS;IAET,IAAM+S,QAAQ,GAAGc,YAAY,CAAC5J,OAAO;IACrC,IAAMkK,QAAQ,GAAGT,WAAW,CAACzJ,OAAO;IACpC,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,KAAK,CAACrF,MAAM,EAAEmC,CAAC,EAAE,EAAE;MACrC,IAAMsD,IAAI,GAAGJ,KAAK,CAAClD,CAAC,CAAC;;MAErB,IAAI,CAACsD,IAAI,CAACvE,MAAM,CAACzK,MAAM,CAAC+R,QAAQ,CAAC3J,QAAQ,CAAC,IAAI,CAAC4G,IAAI,CAACtE,MAAM,CAAC1K,MAAM,CAAC+R,QAAQ,CAAC3J,QAAQ,CAAC,EAAE;MACtF,IAAI4G,IAAI,CAAClC,QAAQ,CAAC/F,OAAO,CAACtD,IAAI,CAAC,IAAIuL,IAAI,CAACjC,QAAQ,CAAChG,OAAO,CAACtD,IAAI,CAAC,EAAE;MAEhE,IAAIwO,SAAgC;MACpC,IAAI;QACF;QAAC,IAAAmB,sBAAA,GAAcpE,IAAI,CAAChC,eAAe,CAAC+E,QAAQ,CAAC;QAA3CE,SAAS,GAAAmB,sBAAA;OACZ,CAAC,OAAOzT,KAAK,EAAE;;QAEd,IAAIA,KAAK,CAAC0T,8BAA8B,EAAE;UACxC;;QAEF,MAAM1T,KAAK;;;MAGb,IAAIsS,SAAS,CAAC7J,QAAQ,CAACpI,MAAM,CAACmT,QAAQ,CAAC,EAAE;QACvC1C,YAAY,CACVqC,UAAU,EACV,IAAIvB,KAAK,CACP,IAAI5C,KAAK,IAAA2E,MAAA,CAAKV,YAAY,GAAE5D,IAAI,IAAGyD,gBAAgB,CAACrK,QAAQ,EAAEsK,WAAW,CAAC,EAC1ED,gBAAgB,EAChB9a,SAAS,CAAC+Z,WAAW,CACtB,EACDsB,aAAa,EACb5B,eAAe,CAChB;OACF,MAAM,IAAI8B,OAAO,GAAG,CAAC,IAAItE,KAAK,CAACrF,MAAM,GAAG,CAAC,EAAE;QAC1C,IAAMgK,sBAAsB,GAAG3E,KAAK,CAACqB,KAAK,CAAC,CAAC,EAAEvE,CAAC,CAAC,CAAC4H,MAAM,CAAC1E,KAAK,CAACqB,KAAK,CAACvE,CAAC,GAAG,CAAC,EAAEkD,KAAK,CAACrF,MAAM,CAAC,CAAC;;QAGzFgI,KAAK,CAACiB,gBAAgB,CACpBe,sBAAsB,EACtBd,gBAAgB,EAChBC,WAAW,EACX;UACEM,aAAa,EAAbA,aAAa;UACbE,OAAO,EAAEA,OAAO,GAAG;SACpB,KAAAI,MAAA,CACGV,YAAY,GAAE5D,IAAI,IACtBiD,SAAS,EACTa,UAAU,CACX;;;IAIL,OAAOA,UAAU;;;;;;EAGnBhT,MAAA,CAIO0T,mBAAmB,GAAnB,SAAAA,oBAAoBpB,iBAA0B;IACnD,OAAO,IAAIlJ,KAAK,CACd,IAAI,CAAC+D,WAAW,CAAC7E,QAAQ,EACzB,IAAI,CAACiF,YAAY,CAACjF,QAAQ,EAC1B,IAAI,CAACkK,eAAe,CAACF,iBAAiB,CAAC,CAAC3K,QAAQ,EAChD,IAAI,CAAC0K,gBAAgB,CAACC,iBAAiB,CAAC,CAAC3K,QAAQ,CAClD;;;;;;;;;;;;;;;;;EAGH8J,KAAA,CAeckC,iBAAiB,GAAxB,SAAAA,kBACL7E,KAAa,EACb8E,UAAkB,EAClBC,iBAA0C,EAAAC,MAAA;;EAG1ChB,cACAiB,eACAf;oCAJuD,EAAE,GAAAc,MAAA;MAAAE,mBAAA,GAAAtJ,KAAA,CAAvDwI,aAAa;MAAbA,aAAa,GAAAc,mBAAA,cAAG,CAAC,GAAAA,mBAAA;MAAAC,aAAA,GAAAvJ,KAAA,CAAE0I,OAAO;MAAPA,OAAO,GAAAa,aAAA,cAAG,CAAC,GAAAA,aAAA;IAAA,IAEhCnB;MAAAA,eAAuB,EAAE;;IAAA,IACzBiB;MAAAA,gBAA0CF,iBAAiB;;IAAA,IAC3Db;MAAAA,aAA+D,EAAE;;IAEjE,EAAUlE,KAAK,CAACrF,MAAM,GAAG,CAAC,IAAA1K,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA1BC,SAAS,QAAmB,OAAO,IAAnCA,SAAS;IACT,EAAUkU,OAAO,GAAG,CAAC,IAAArU,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAArBC,SAAS,QAAc,UAAU,IAAjCA,SAAS;IACT,EAAU2U,iBAAiB,KAAKE,aAAa,IAAIjB,YAAY,CAACrJ,MAAM,GAAG,CAAC,IAAA1K,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAxEC,SAAS,QAAiE,mBAAmB,IAA7FA,SAAS;IAET,IAAMiT,SAAS,GAAG4B,aAAa,CAAC5K,OAAO;IACvC,IAAM+K,OAAO,GAAGN,UAAU,CAACzK,OAAO;IAClC,KAAK,IAAIyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,KAAK,CAACrF,MAAM,EAAEmC,CAAC,EAAE,EAAE;MACrC,IAAMsD,IAAI,GAAGJ,KAAK,CAAClD,CAAC,CAAC;;MAErB,IAAI,CAACsD,IAAI,CAACvE,MAAM,CAACzK,MAAM,CAACiS,SAAS,CAAC7J,QAAQ,CAAC,IAAI,CAAC4G,IAAI,CAACtE,MAAM,CAAC1K,MAAM,CAACiS,SAAS,CAAC7J,QAAQ,CAAC,EAAE;MACxF,IAAI4G,IAAI,CAAClC,QAAQ,CAAC/F,OAAO,CAACtD,IAAI,CAAC,IAAIuL,IAAI,CAACjC,QAAQ,CAAChG,OAAO,CAACtD,IAAI,CAAC,EAAE;MAEhE,IAAIsO,QAA+B;MACnC,IAAI;QACF;QAAC,IAAAkC,qBAAA,GAAajF,IAAI,CAAC1B,cAAc,CAAC2E,SAAS,CAAC;QAA1CF,QAAQ,GAAAkC,qBAAA;OACX,CAAC,OAAOtU,KAAK,EAAE;;QAEd,IAAIA,KAAK,CAACuU,2BAA2B,EAAE;UACrC;;QAEF,MAAMvU,KAAK;;;MAGb,IAAIoS,QAAQ,CAAC3J,QAAQ,CAACpI,MAAM,CAACgU,OAAO,CAAC,EAAE;QACrCvD,YAAY,CACVqC,UAAU,EACV,IAAIvB,KAAK,CACP,IAAI5C,KAAK,EAAEK,IAAI,EAAAsE,MAAA,CAAKV,YAAY,GAAGc,UAAU,EAAEC,iBAAiB,CAACvL,QAAQ,CAAC,EAC1EuL,iBAAiB,EACjBhc,SAAS,CAACua,YAAY,CACvB,EACDc,aAAa,EACb5B,eAAe,CAChB;OACF,MAAM,IAAI8B,OAAO,GAAG,CAAC,IAAItE,KAAK,CAACrF,MAAM,GAAG,CAAC,EAAE;QAC1C,IAAMgK,sBAAsB,GAAG3E,KAAK,CAACqB,KAAK,CAAC,CAAC,EAAEvE,CAAC,CAAC,CAAC4H,MAAM,CAAC1E,KAAK,CAACqB,KAAK,CAACvE,CAAC,GAAG,CAAC,EAAEkD,KAAK,CAACrF,MAAM,CAAC,CAAC;;QAGzFgI,KAAK,CAACkC,iBAAiB,CACrBF,sBAAsB,EACtBG,UAAU,EACVC,iBAAiB,EACjB;UACEX,aAAa,EAAbA,aAAa;UACbE,OAAO,EAAEA,OAAO,GAAG;SACpB,GACAlE,IAAI,EAAAsE,MAAA,CAAKV,YAAY,GACtBb,QAAQ,EACRe,UAAU,CACX;;;IAIL,OAAOA,UAAU;GAClB;EAAA,OAAAvB,KAAA;AAAA;;AC9XH;AACA,SAAgB4C,SAASA,CAACC,OAAqB,EAAEC,OAAe;EAC9D,OAAOD,OAAO,CAACD,SAAS,CAACE,OAAO,CAAC,CAACC,gBAAgB,EAAE;AACtD;AAEA;AACA,SAAgBC,mBAAmBA,CAACH,OAAqB,EAAEC,OAAgB;EACzE,OAAOA,OAAO,GAAGF,SAAS,CAACC,OAAO,EAAEC,OAAO,CAAC,GAAGD,OAAO;AACxD;;SCLgBI,MAAMA,CAACxJ,KAAW,EAAEyJ,IAAU,EAAEC,EAAQ;EACtD,OAAOD,IAAI,GAAGlR,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAACoE,KAAK,EAAE0J,EAAE,CAAC,EAAED,IAAI,CAAC,GAAGhR,IAAI;AAClE;AAEA,SAAgBkR,SAASA,CAACC,KAAa,EAAEC,IAAU,EAAEC,OAAgB;EACnE,IAAIC,OAAa;EACjB,IAAIxR,IAAI,CAACoD,KAAK,CAACiO,KAAK,CAACC,IAAI,EAAEpR,IAAI,CAAC,EAAE;IAChCsR,OAAO,GAAGF,IAAI;GACf,MAAM;IACLE,OAAO,GAAGxR,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAACiO,IAAI,EAAED,KAAK,CAACG,OAAO,CAAC,EAAEH,KAAK,CAACC,IAAI,CAAC;IACrE,IAAIC,OAAO,IAAIvR,IAAI,CAACuD,QAAQ,CAACvD,IAAI,CAAC0D,MAAM,CAAC1D,IAAI,CAACqD,QAAQ,CAACmO,OAAO,EAAEH,KAAK,CAACC,IAAI,CAAC,EAAED,KAAK,CAACG,OAAO,CAAC,EAAEF,IAAI,CAAC,EAAE;MAClGE,OAAO,GAAGxR,IAAI,CAACkD,GAAG,CAACsO,OAAO,EAAErR,GAAG,CAAC;;;EAIpC,OAAOqR,OAAO;AAChB;;SCfgBC,4BAA4BA,CAAChK,KAAW,EAAEiK,YAA0B;EAClF,CAAU1R,IAAI,CAAC0H,kBAAkB,CAACD,KAAK,EAAEvH,IAAI,CAAC,GAAA5E,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA9CC,SAAS,QAA0CgM,KAAK,kBAAaiK,YAAY,UAAjFjW,SAAS;EACT,CAAUuE,IAAI,CAAC8E,eAAe,CAAC2C,KAAK,EAAE7G,oBAAoB,CAAC8Q,YAAY,CAAC,CAAC,GAAApW,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAzEC,SAAS,QAAqEgM,KAAK,kBAAaiK,YAAY,UAA5GjW,SAAS;AACX;;SCmDgBkW,KAAKA,CAAChL,cAAwC;EAC5D,cAAYA,cAAc,CAACzC,QAAQ,CAACC,QAAQ,CAAC,EAAE,CAAC;AAClD;AAEA,IAAMyN,QAAQ,GAAG,KAAK;AAEtB;;;AAGA,IAAsBC,MAAM;;;;EAI1B,SAAAA;;;;;;EAEAA,MAAA,CAKcC,kBAAkB,GAAzB,SAAAA,mBACLC,KAA2C,EAC3CC,OAA4C;IAE5C,IAAMC,OAAO,GAAGF,KAAK,CAACrI,WAAW,CAAC7E,QAAQ,CAACzG,QAAQ;IACnD,IAAM8T,QAAQ,GAAGH,KAAK,CAACjI,YAAY,CAACjF,QAAQ,CAACzG,QAAQ;;IAErD,CAAU,EAAE6T,OAAO,IAAIC,QAAQ,CAAC,GAAA5W,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAhCC,SAAS,QAAyB,cAAc,IAAhDA,SAAS;IACT,EAAU,EAAE,KAAK,IAAIuW,OAAO,CAAC,IAAIA,OAAO,CAACG,GAAG,GAAG,CAAC,IAAA7W,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAAhDC,SAAS,QAAyC,KAAK,IAAvDA,SAAS;IAET,IAAM0V,EAAE,GAAWpV,uBAAuB,CAACiW,OAAO,CAACI,SAAS,CAAC;IAC7D,IAAM5D,QAAQ,GAAWmD,KAAK,CAACI,KAAK,CAAChD,eAAe,CAACiD,OAAO,CAACK,eAAe,CAAC,CAAC;IAC9E,IAAM3D,SAAS,GAAWiD,KAAK,CAACI,KAAK,CAACnD,gBAAgB,CAACoD,OAAO,CAACK,eAAe,CAAC,CAAC;IAChF,IAAM1G,IAAI,GAAaoG,KAAK,CAAChE,KAAK,CAACpC,IAAI,CAAC2G,GAAG,CAAC,UAACpJ,KAAY;MAAA,OAAKA,KAAK,CAAClN,OAAO;MAAC;IAC5E,IAAMuW,QAAQ,GACZ,KAAK,IAAIP,OAAO,UACP,CAACrK,IAAI,CAACC,KAAK,CAAC,IAAI4K,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAGT,OAAO,CAACG,GAAG,EAAEhO,QAAQ,CAAC,EAAE,CAAC,UACpE6N,OAAO,CAACO,QAAQ,CAACpO,QAAQ,CAAC,EAAE,CAAG;IAE1C,IAAMuO,gBAAgB,GAAGC,OAAO,CAACX,OAAO,CAACY,aAAa,CAAC;IAEvD,IAAIC,UAAkB;IACtB,IAAI5M,IAA2B;IAC/B,IAAIwB,KAAa;IACjB,QAAQsK,KAAK,CAAC7D,SAAS;MACrB,KAAK9Z,SAAS,CAAC+Z,WAAW;QACxB,IAAI8D,OAAO,EAAE;UACXY,UAAU,GAAGH,gBAAgB,GAAG,oDAAoD,GAAG,uBAAuB;;UAE9GzM,IAAI,GAAG,CAACyI,SAAS,EAAE/C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UACtC9K,KAAK,GAAG+G,QAAQ;SACjB,MAAM,IAAI0D,QAAQ,EAAE;UACnBW,UAAU,GAAGH,gBAAgB,GAAG,oDAAoD,GAAG,uBAAuB;;UAE9GzM,IAAI,GAAG,CAACuI,QAAQ,EAAEE,SAAS,EAAE/C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UAChD9K,KAAK,GAAGmK,QAAQ;SACjB,MAAM;UACLiB,UAAU,GAAGH,gBAAgB,GACzB,uDAAuD,GACvD,0BAA0B;;UAE9BzM,IAAI,GAAG,CAACuI,QAAQ,EAAEE,SAAS,EAAE/C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UAChD9K,KAAK,GAAGmK,QAAQ;;QAElB;MACF,KAAKxd,SAAS,CAACua,YAAY;QACzB,CAAU,CAAC+D,gBAAgB,GAAApX,OAAA,CAAAC,GAAA,CAAAC,QAAA,oBAA3BC,SAAS,QAAoB,eAAe,IAA5CA,SAAS;QACT,IAAIwW,OAAO,EAAE;UACXY,UAAU,GAAG,uBAAuB;;UAEpC5M,IAAI,GAAG,CAACyI,SAAS,EAAE/C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UACtC9K,KAAK,GAAG+G,QAAQ;SACjB,MAAM,IAAI0D,QAAQ,EAAE;UACnBW,UAAU,GAAG,uBAAuB;;UAEpC5M,IAAI,GAAG,CAACyI,SAAS,EAAEF,QAAQ,EAAE7C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UAChD9K,KAAK,GAAGmK,QAAQ;SACjB,MAAM;UACLiB,UAAU,GAAG,0BAA0B;;UAEvC5M,IAAI,GAAG,CAACyI,SAAS,EAAEF,QAAQ,EAAE7C,IAAI,EAAEwF,EAAE,EAAEoB,QAAQ,CAAC;UAChD9K,KAAK,GAAGmK,QAAQ;;QAElB;;IAEJ,OAAO;MACLiB,UAAU,EAAVA,UAAU;MACV5M,IAAI,EAAJA,IAAI;MACJwB,KAAK,EAALA;KACD;GACF;EAAA,OAAAoK,MAAA;AAAA;;;;"}